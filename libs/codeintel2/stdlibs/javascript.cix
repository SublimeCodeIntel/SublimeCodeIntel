<!-- ***** BEGIN LICENSE BLOCK *****
 Version: MPL 1.1/GPL 2.0/LGPL 2.1
 
 The contents of this file are subject to the Mozilla Public License
 Version 1.1 (the "License"); you may not use this file except in
 compliance with the License. You may obtain a copy of the License at
 http://www.mozilla.org/MPL/
 
 Software distributed under the License is distributed on an "AS IS"
 basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 License for the specific language governing rights and limitations
 under the License.
 
 The Original Code is Komodo code.
 
 The Initial Developer of the Original Code is ActiveState Software Inc.
 Portions created by ActiveState Software Inc are Copyright (C) 2000-2007
 ActiveState Software Inc. All Rights Reserved.
 
 Contributor(s):
   ActiveState Software Inc
 
 Alternatively, the contents of this file may be used under the terms of
 either the GNU General Public License Version 2 or later (the "GPL"), or
 the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 in which case the provisions of the GPL or the LGPL are applicable instead
 of those above. If you wish to allow use of your version of this file only
 under the terms of either the GPL or the LGPL, and not to allow others to
 use your version of this file under the terms of the MPL, indicate your
 decision by deleting the provisions above and replace them with the notice
 and other provisions required by the GPL or the LGPL. If you do not delete
 the provisions above, a recipient may use your version of this file under
 the terms of any one of the MPL, the GPL or the LGPL.
 
 ***** END LICENSE BLOCK ***** -->

<codeintel version="2.0">
  <file lang="JavaScript" mtime="1102379523" path="javascript.cix">
    <scope ilk="blob" lang="JavaScript" name="*">
      <variable name="Infinity" />
      <variable name="NaN" />
      <variable name="undefined" />
      <scope doc="Import the given CommonJS module." ilk="function" name="require" signature="require(str)">
        <variable citdl="String" ilk="argument" name="str" />
      </scope>
      <scope doc="Evaluate the supplied string as JavaScript code." ilk="function" name="eval" signature="eval(str)">
        <variable citdl="String" ilk="argument" name="str" />
      </scope>
      <scope doc="Returns false if the supplied number is NaN, Infinity or -Infinity; returns true otherwise." ilk="function" name="isFinite" returns="Boolean" signature="isFinite(num) -&gt; Boolean">
        <variable citdl="Number" ilk="argument" name="num" />
      </scope>
      <scope doc="Returns true if the supplied number is NaN, false otherwise." ilk="function" name="isNaN" returns="Boolean" signature="isNaN(num) -&gt; Boolean">
        <variable citdl="Number" ilk="argument" name="num" />
      </scope>
      <scope doc="Attempt to convert a string into a number." ilk="function" name="parseFloat" returns="Number" signature="parseFloat(string) -&gt; Number">
        <variable citdl="String" ilk="argument" name="string" />
      </scope>
      <scope doc="Attempt to convert a string into an integer number, using the specified base." ilk="function" name="parseInt" returns="Number" signature="parseInt(string, radix) -&gt; Number">
        <variable citdl="String" ilk="argument" name="string" />
        <variable citdl="Number" ilk="argument" name="radix" />
      </scope>
      <scope ilk="class" name="Object">
        <variable name="constructor" />
        <variable name="prototype" />
        <scope doc="Determines if the object/instance itself has the named property or method." ilk="function" name="hasOwnProperty" returns="Boolean" signature="hasOwnProperty(propertyOrMethodName) -&gt; Boolean">
          <variable citdl="String" ilk="argument" name="propertyOrMethodName" />
        </scope>
        <scope doc="Determines if the calling object prototype is in the inheritance chain for the supplied argument." ilk="function" name="isPrototypeOf" returns="Boolean" signature="isPrototypeOf(instanceToTest) -&gt; Boolean">
          <variable citdl="Object" ilk="argument" name="instanceToTest" />
        </scope>
        <scope doc="Determines if the object/instance itself has a property or method of the supplied name which will appear in a for (prop in obj) enumeration." ilk="function" name="propertyIsEnumerable" returns="Boolean" signature="propertyIsEnumerable(propertyOrMethodName) -&gt; Boolean">
          <variable citdl="String" ilk="argument" name="propertyOrMethodName" />
        </scope>
        <scope doc="For most objects, the same as toString() unless explicitly overridden." ilk="function" name="toLocaleString" returns="String" signature="toLocaleString() -&gt; String" />
        <scope doc="Returns a string representation of the object." ilk="function" name="toString" returns="String" signature="toString() -&gt; String" />
        <scope doc="Returns the internal this value of the object." ilk="function" name="valueOf" returns="String" signature="valueOf() -&gt; String" />
      </scope>
      <scope classrefs="Object" ilk="class" name="Array">
        <variable name="length" />
        <scope doc="Concatenates one or more items or arrays onto the current array." ilk="function" name="concat" returns="Array" signature="concat(item1, item2, ...) -&gt; Array">
          <variable citdl="Object" ilk="argument" name="item1" />
          <variable citdl="Object" ilk="argument" name="item2" />
        </scope>
        <scope doc="Returns a string representation of the array, separated by the delimiter of your choice." ilk="function" name="join" returns="String" signature="join(separator) -&gt; String">
          <variable citdl="String" ilk="argument" name="separator" />
        </scope>
        <scope doc="Remove the last element from the array and return it." ilk="function" name="pop" returns="Object" signature="pop() -&gt; Object" />
        <scope doc="Adds one or more elements to the end of the array, returning the new length." ilk="function" name="push" returns="Number" signature="push(item1, item2, ...) -&gt; Number">
          <variable citdl="Object" ilk="argument" name="item1" />
          <variable citdl="Object" ilk="argument" name="item2" />
        </scope>
        <scope doc="Reverses the order of the elements in the array, and returns the array." ilk="function" name="reverse" returns="Array" signature="reverse() -&gt; Array" />
        <scope doc="Removes the first element of the array and returns it." ilk="function" name="shift" returns="Object" signature="shift() -&gt; Object" />
        <scope doc="Return a specified section of an array." ilk="function" name="slice" returns="Array" signature="slice(start, end) -&gt; Array">
          <variable citdl="Number" ilk="argument" name="start" />
          <variable citdl="Number" ilk="argument" name="end" />
        </scope>
        <scope doc="Sort the array." ilk="function" name="sort" returns="Array" signature="sort(compareFunction) -&gt; Array">
          <variable citdl="Function" ilk="argument" name="compareFunction" />
        </scope>
        <scope doc="Remove a section from the array and return it; optionally inserting new values in that place." ilk="function" name="splice" returns="Array" signature="splice(start, deleteCount, newItem1, newItem2, ...) -&gt; Array">
          <variable citdl="Number" ilk="argument" name="start" />
          <variable citdl="Number" ilk="argument" name="deleteCount" />
          <variable citdl="Object" ilk="argument" name="newItem1" />
          <variable citdl="Object" ilk="argument" name="newItem2" />
        </scope>
        <scope doc="Insert items to the front of an array, and return the new length." ilk="function" name="unshift" returns="Number" signature="unshift(newItem1, newItem2, ...) -&gt; Number">
          <variable citdl="Object" ilk="argument" name="newItem1" />
          <variable citdl="Object" ilk="argument" name="newItem2" />
        </scope>
      </scope>
      <scope classrefs="Object" ilk="class" name="Boolean" />
      <scope classrefs="Object" ilk="class" name="Date">
        <scope doc="Return the number of milliseconds corresponding to the supplied arguments." ilk="function" name="UTC" returns="Number" signature="UTC(year, month, day, hour, minute, second, ms) -&gt; Number">
          <variable citdl="Number" ilk="argument" name="year" />
          <variable citdl="Number" ilk="argument" name="month" />
          <variable citdl="Number" ilk="argument" name="day" />
          <variable citdl="Number" ilk="argument" name="hour" />
          <variable citdl="Number" ilk="argument" name="minute" />
          <variable citdl="Number" ilk="argument" name="second" />
          <variable citdl="Number" ilk="argument" name="ms" />
        </scope>
        <scope doc="Return the day number in the local timezone." ilk="function" name="getDate" returns="Number" signature="getDate() -&gt; Number" />
        <scope doc="Return the zero-based weekday number in the local timezone." ilk="function" name="getDay" returns="Number" signature="getDay() -&gt; Number" />
        <scope doc="Return the four-digit year in the local timezone." ilk="function" name="getFullYear" returns="Number" signature="getFullYear() -&gt; Number" />
        <scope doc="Return the hour number in the local timezone." ilk="function" name="getHours" returns="Number" signature="getHours() -&gt; Number" />
        <scope doc="Return the millisecond number in the local timezone." ilk="function" name="getMilliseconds" returns="Number" signature="getMilliseconds() -&gt; Number" />
        <scope doc="Return the minute number in the local timezone." ilk="function" name="getMinutes" returns="Number" signature="getMinutes() -&gt; Number" />
        <scope doc="Return the zero-based month number in the local timezone." ilk="function" name="getMonth" returns="Number" signature="getMonth() -&gt; Number" />
        <scope doc="Return the second number in the local timezone." ilk="function" name="getSeconds" returns="Number" signature="getSeconds() -&gt; Number" />
        <scope doc="Return the number of milliseconds since Midnight, Jan 1, 1970 UTC." ilk="function" name="getTime" returns="Number" signature="getTime() -&gt; Number" />
        <scope doc="Returns the difference between the local time and UTC time in minutes." ilk="function" name="getTimezoneOffset" returns="Number" signature="getTimezoneOffset() -&gt; Number" />
        <scope doc="Return the day number in UTC." ilk="function" name="getUTCDate" returns="Number" signature="getUTCDate() -&gt; Number" />
        <scope doc="Return the zero-based weekday number in UTC." ilk="function" name="getUTCDay" returns="Number" signature="getUTCDay() -&gt; Number" />
        <scope doc="Return the four-digit year in UTC." ilk="function" name="getUTCFullYear" returns="Number" signature="getUTCFullYear() -&gt; Number" />
        <scope doc="Return the hour number in UTC." ilk="function" name="getUTCHours" returns="Number" signature="getUTCHours() -&gt; Number" />
        <scope doc="Return the millisecond number in UTC." ilk="function" name="getUTCMilliseconds" returns="Number" signature="getUTCMilliseconds() -&gt; Number" />
        <scope doc="Return the minute number in UTC." ilk="function" name="getUTCMinutes" returns="Number" signature="getUTCMinutes() -&gt; Number" />
        <scope doc="Return the zero-based month number in UTC." ilk="function" name="getUTCMonth" returns="Number" signature="getUTCMonth() -&gt; Number" />
        <scope doc="Return the second number in UTC." ilk="function" name="getUTCSeconds" returns="Number" signature="getUTCSeconds() -&gt; Number" />
        <scope doc="Attempt to parse the supplied string as a date, and return the number of milliseconds it represents." ilk="function" name="parse" returns="Number" signature="parse(dateString) -&gt; Number">
          <variable citdl="String" ilk="argument" name="dateString" />
        </scope>
        <scope doc="Set the day number in the local timezone." ilk="function" name="setDate" returns="Number" signature="setDate(day) -&gt; Number">
          <variable citdl="Number" ilk="argument" name="day" />
        </scope>
        <scope doc="Set the year, expressed in the local timezone." ilk="function" name="setFullYear" returns="Number" signature="setFullYear(year, month, day) -&gt; Number">
          <variable citdl="Number" ilk="argument" name="year" />
          <variable citdl="Number" ilk="argument" name="month" />
          <variable citdl="Number" ilk="argument" name="day" />
        </scope>
        <scope doc="Set the hour number in the local timezone." ilk="function" name="setHours" returns="Number" signature="setHours(hours, mins, secs, ms) -&gt; Number">
          <variable citdl="Number" ilk="argument" name="hours" />
          <variable citdl="Number" ilk="argument" name="mins" />
          <variable citdl="Number" ilk="argument" name="secs" />
          <variable citdl="Number" ilk="argument" name="ms" />
        </scope>
        <scope doc="Set the millisecond number in the local timezone." ilk="function" name="setMilliseconds" returns="Number" signature="setMilliseconds(ms) -&gt; Number">
          <variable citdl="Number" ilk="argument" name="ms" />
        </scope>
        <scope doc="Set the minute number in the local timezone." ilk="function" name="setMinutes" returns="Number" signature="setMinutes(mins, secs, ms) -&gt; Number">
          <variable citdl="Number" ilk="argument" name="mins" />
          <variable citdl="Number" ilk="argument" name="secs" />
          <variable citdl="Number" ilk="argument" name="ms" />
        </scope>
        <scope doc="Set the zero-based month, expressed in the local timezone." ilk="function" name="setMonth" returns="Number" signature="setMonth(month, day) -&gt; Number">
          <variable citdl="Number" ilk="argument" name="month" />
          <variable citdl="Number" ilk="argument" name="day" />
        </scope>
        <scope doc="Set the second number in the local timezone." ilk="function" name="setSeconds" returns="Number" signature="setSeconds(second, ms) -&gt; Number">
          <variable citdl="Number" ilk="argument" name="second" />
          <variable citdl="Number" ilk="argument" name="ms" />
        </scope>
        <scope doc="Set the date object to a new time." ilk="function" name="setTime" returns="Number" signature="setTime(time) -&gt; Number">
          <variable citdl="Number" ilk="argument" name="time" />
        </scope>
        <scope doc="Set the UTC day number." ilk="function" name="setUTCDate" returns="Number" signature="setUTCDate(day) -&gt; Number">
          <variable citdl="Number" ilk="argument" name="day" />
        </scope>
        <scope doc="Set the UTC year number." ilk="function" name="setUTCFullYear" returns="Number" signature="setUTCFullYear(year, month, day) -&gt; Number">
          <variable citdl="Number" ilk="argument" name="year" />
          <variable citdl="Number" ilk="argument" name="month" />
          <variable citdl="Number" ilk="argument" name="day" />
        </scope>
        <scope doc="Set the UTC hours." ilk="function" name="setUTCHours" returns="Number" signature="setUTCHours(hours, mins, secs, ms) -&gt; Number">
          <variable citdl="Number" ilk="argument" name="hours" />
          <variable citdl="Number" ilk="argument" name="mins" />
          <variable citdl="Number" ilk="argument" name="secs" />
          <variable citdl="Number" ilk="argument" name="ms" />
        </scope>
        <scope doc="Set the UTC milliseconds." ilk="function" name="setUTCMilliseconds" returns="Number" signature="setUTCMilliseconds(ms) -&gt; Number">
          <variable citdl="Number" ilk="argument" name="ms" />
        </scope>
        <scope doc="Set the UTC minutes." ilk="function" name="setUTCMinutes" returns="Number" signature="setUTCMinutes(mins, secs, ms) -&gt; Number">
          <variable citdl="Number" ilk="argument" name="mins" />
          <variable citdl="Number" ilk="argument" name="secs" />
          <variable citdl="Number" ilk="argument" name="ms" />
        </scope>
        <scope doc="Set the UTC month." ilk="function" name="setUTCMonth" returns="Number" signature="setUTCMonth(month, day) -&gt; Number">
          <variable citdl="Number" ilk="argument" name="month" />
          <variable citdl="Number" ilk="argument" name="day" />
        </scope>
        <scope doc="Set the UTC seconds." ilk="function" name="setUTCSeconds" returns="Number" signature="setUTCSeconds(secs, ms) -&gt; Number">
          <variable citdl="Number" ilk="argument" name="secs" />
          <variable citdl="Number" ilk="argument" name="ms" />
        </scope>
        <scope doc="Return a string version of the date-only portion of the object." ilk="function" name="toDateString" returns="String" signature="toDateString() -&gt; String" />
        <scope doc="Return a string version of the time-only portion of the object." ilk="function" name="toTimeString" returns="String" signature="toTimeString() -&gt; String" />
        <scope doc="Returns a string form of the Date in a convenient, human-readable form in UTC." ilk="function" name="toUTCString" returns="String" signature="toUTCString() -&gt; String" />
        <scope doc="Attempt to parse the supplied string as a date, and return the number of milliseconds it represents." ilk="function" name="parse" returns="Number" signature="parse(dateString) -&gt; Number">
          <variable citdl="String" ilk="argument" name="dateString" />
        </scope>
        <scope doc="Return the number of milliseconds corresponding to the supplied arguments." ilk="function" name="UTC" returns="Number" signature="UTC(year, month, day, hour, minute, second, ms) -&gt; Number">
          <variable citdl="Number" ilk="argument" name="year" />
          <variable citdl="Number" ilk="argument" name="month" />
          <variable citdl="Number" ilk="argument" name="day" />
          <variable citdl="Number" ilk="argument" name="hour" />
          <variable citdl="Number" ilk="argument" name="minute" />
          <variable citdl="Number" ilk="argument" name="second" />
          <variable citdl="Number" ilk="argument" name="ms" />
        </scope>
      </scope>
      <scope classrefs="Object" ilk="class" name="Error" />
      <scope classrefs="Object" ilk="class" name="Function">
        <variable name="arguments" />
        <variable name="length" />
        <scope doc="Call the function/method, optionally setting a new scope for this and passing in parameters via an array." ilk="function" name="apply" returns="Object" signature="apply(thisScope, args) -&gt; Object">
          <variable citdl="Object" ilk="argument" name="thisScope" />
          <variable citdl="Array" ilk="argument" name="args" />
        </scope>
        <scope doc="Call the function/method, optionally setting a new scope for this and passing in parameters." ilk="function" name="call" returns="Object" signature="call(thisScope, arg1, arg2, ...) -&gt; Object">
          <variable citdl="Object" ilk="argument" name="thisScope" />
          <variable citdl="Object" ilk="argument" name="arg1" />
          <variable citdl="Object" ilk="argument" name="arg2" />
        </scope>
      </scope>
      <scope classrefs="Object" ilk="class" name="Math">
        <scope doc="Return the absolute value of x." ilk="function" name="abs" returns="Number" signature="abs(x) -&gt; Number">
          <variable citdl="Number" ilk="argument" name="x" />
        </scope>
        <scope doc="Return the arc cosine of x, in radians." ilk="function" name="acos" returns="Number" signature="acos(x) -&gt; Number">
          <variable citdl="Number" ilk="argument" name="x" />
        </scope>
        <scope doc="Return the arc tangent of x, in radians." ilk="function" name="atan" returns="Number" signature="atan(x) -&gt; Number">
          <variable citdl="Number" ilk="argument" name="x" />
        </scope>
        <scope doc="Return the arc tangent of x, in radians." ilk="function" name="atan" returns="Number" signature="atan(x) -&gt; Number">
          <variable citdl="Number" ilk="argument" name="x" />
        </scope>
        <scope doc="Return smallest integer which is larger than x (aka &quot;round up&quot;)." ilk="function" name="ceil" returns="Number" signature="ceil(x) -&gt; Number">
          <variable citdl="Number" ilk="argument" name="x" />
        </scope>
        <scope doc="Return the cosine of x, in radians." ilk="function" name="cos" returns="Number" signature="cos(x) -&gt; Number">
          <variable citdl="Number" ilk="argument" name="x" />
        </scope>
        <scope doc="Return the value of   e  x." ilk="function" name="exp" returns="Number" signature="exp(x) -&gt; Number">
          <variable citdl="Number" ilk="argument" name="x" />
        </scope>
        <scope doc="Return largest integer which is less than x (aka &quot;round down&quot;)." ilk="function" name="floor" returns="Number" signature="floor(x) -&gt; Number">
          <variable citdl="Number" ilk="argument" name="x" />
        </scope>
        <scope doc="Return the natural logarithm of x." ilk="function" name="log" returns="Number" signature="log(x) -&gt; Number">
          <variable citdl="Number" ilk="argument" name="x" />
        </scope>
        <scope doc="Return the largest of all arguments supplied." ilk="function" name="max" returns="Number" signature="max(value1, value2, ...) -&gt; Number">
          <variable citdl="Number" ilk="argument" name="value1" />
          <variable citdl="Number" ilk="argument" name="value2" />
        </scope>
        <scope doc="Return the smallest of all arguments supplied." ilk="function" name="min" returns="Number" signature="min(value1, value2, ...) -&gt; Number">
          <variable citdl="Number" ilk="argument" name="value1" />
          <variable citdl="Number" ilk="argument" name="value2" />
        </scope>
        <scope doc="Return the value of raising x to the power y." ilk="function" name="pow" returns="Number" signature="pow(x, y) -&gt; Number">
          <variable citdl="Number" ilk="argument" name="x" />
          <variable citdl="Number" ilk="argument" name="y" />
        </scope>
        <scope doc="Return a floating-point random number between 0 (inclusive) and 1 (exclusive)." ilk="function" name="random" returns="Number" signature="random() -&gt; Number" />
        <scope doc="Round a number to the closest integer." ilk="function" name="round" returns="Number" signature="round(x) -&gt; Number">
          <variable citdl="Number" ilk="argument" name="x" />
        </scope>
        <scope doc="Return the sine of x, in radians." ilk="function" name="sin" returns="Number" signature="sin(x) -&gt; Number">
          <variable citdl="Number" ilk="argument" name="x" />
        </scope>
        <scope doc="Return the square root of x." ilk="function" name="sqrt" returns="Number" signature="sqrt(x) -&gt; Number">
          <variable citdl="Number" ilk="argument" name="x" />
        </scope>
        <scope doc="Return the tangent of x, in radians." ilk="function" name="tan" returns="Number" signature="tan(x) -&gt; Number">
          <variable citdl="Number" ilk="argument" name="x" />
        </scope>
      </scope>
      <scope classrefs="Object" ilk="class" name="Number">
        <scope doc="Return the number formatted in scientific notation, with one digit before the decimal point and a specified number of digits after." ilk="function" name="toExponential" returns="String" signature="toExponential(fractionDigits) -&gt; String">
          <variable citdl="Number" ilk="argument" name="fractionDigits" />
        </scope>
        <scope doc="Return the number formatted with a specified number of digits after the decimal point." ilk="function" name="toFixed" returns="String" signature="toFixed(fractionDigits) -&gt; String">
          <variable citdl="Number" ilk="argument" name="fractionDigits" />
        </scope>
        <scope doc="Return the number as a string in either in fixed or exponential notation, with the specified number of digits." ilk="function" name="toPrecision" returns="String" signature="toPrecision(precision) -&gt; String">
          <variable citdl="Number" ilk="argument" name="precision" />
        </scope>
        <scope doc="Return the number as a string converted to a specified base." ilk="function" name="toString" returns="String" signature="toString(radix) -&gt; String">
          <variable citdl="Number" ilk="argument" name="radix" />
        </scope>
      </scope>
      <scope classrefs="Object" ilk="class" name="RegExp">
        <variable name="global" />
        <variable name="ignoreCase" />
        <variable name="lastIndex" />
        <variable name="multiline" />
        <variable name="source" />
        <scope doc="Run the regular expression against a string and return a single match." ilk="function" name="exec" returns="Array" signature="exec(sourceString) -&gt; Array">
          <variable citdl="String" ilk="argument" name="sourceString" />
        </scope>
        <scope doc="Run the regular expression against a string; return true if a match exists, false otherwise." ilk="function" name="test" returns="Boolean" signature="test(sourceString) -&gt; Boolean">
          <variable citdl="String" ilk="argument" name="sourceString" />
        </scope>
      </scope>
      <scope classrefs="Object" ilk="class" name="String">
        <variable name="length" />
        <scope doc="Return the character at a particular index in the string." ilk="function" name="charAt" returns="String" signature="charAt(pos) -&gt; String">
          <variable citdl="Number" ilk="argument" name="pos" />
        </scope>
        <scope doc="Return the Unicode value of the character at a particular index in the string." ilk="function" name="charCodeAt" returns="Number" signature="charCodeAt(pos) -&gt; Number">
          <variable citdl="Number" ilk="argument" name="pos" />
        </scope>
        <scope doc="Append one or more strings to the current string, and return the result." ilk="function" name="concat" returns="String" signature="concat(string1, string2, ...) -&gt; String">
          <variable citdl="String" ilk="argument" name="string1" />
          <variable citdl="String" ilk="argument" name="string2" />
        </scope>
        <scope doc="Create a new string from a series of Unicode character values." ilk="function" name="fromCharCode" returns="String" signature="fromCharCode(charCode0, charCode1, ...) -&gt; String">
          <variable citdl="Number" ilk="argument" name="charCode0" />
          <variable citdl="Number" ilk="argument" name="charCode1" />
        </scope>
        <scope doc="Find the offset of a substring within the string." ilk="function" name="indexOf" returns="String" signature="indexOf(searchString, position) -&gt; String">
          <variable citdl="String" ilk="argument" name="searchString" />
          <variable citdl="Number" ilk="argument" name="position" />
        </scope>
        <scope doc="The offset of a substring within the string." ilk="function" name="lastIndexOf" returns="String" signature="lastIndexOf(searchString, position) -&gt; String">
          <variable citdl="String" ilk="argument" name="searchString" />
          <variable citdl="Number" ilk="argument" name="position" />
        </scope>
        <scope doc="Compare the string to the argument in the current locale." ilk="function" name="localeCompare" returns="Number" signature="localeCompare(compareString) -&gt; Number">
          <variable citdl="String" ilk="argument" name="compareString" />
        </scope>
        <scope doc="Run the supplied regular expression against the string and return an array of the results." ilk="function" name="match" returns="Array" signature="match(expr) -&gt; Array">
          <variable citdl="RegExp" ilk="argument" name="expr" />
        </scope>
        <scope doc="Find and replace values in a string, and return the changed string." ilk="function" name="replace" returns="String" signature="replace(searchExpr, replaceExpr) -&gt; String">
          <variable citdl="Object" ilk="argument" name="searchExpr" />
          <variable citdl="Object" ilk="argument" name="replaceExpr" />
        </scope>
        <scope doc="Find the offset of a regular expression within the string." ilk="function" name="search" returns="Number" signature="search(searchExpr) -&gt; Number">
          <variable citdl="RegExp" ilk="argument" name="searchExpr" />
        </scope>
        <scope doc="Return a specified subsection of the string." ilk="function" name="slice" returns="String" signature="slice(start, end) -&gt; String">
          <variable citdl="Number" ilk="argument" name="start" />
          <variable citdl="Number" ilk="argument" name="end" />
        </scope>
        <scope doc="Separate the string into pieces and return an array of the resulting substrings." ilk="function" name="split" returns="Array" signature="split(separator, limit) -&gt; Array">
          <variable citdl="Object" ilk="argument" name="separator" />
          <variable citdl="Number" ilk="argument" name="limit" />
        </scope>
        <scope doc="Return a specified subsection of the string." ilk="function" name="substring" returns="String" signature="substring(start, end) -&gt; String">
          <variable citdl="Number" ilk="argument" name="start" />
          <variable citdl="Number" ilk="argument" name="end" />
        </scope>
        <scope doc="Return a locale-specific lowercase version of the string." ilk="function" name="toLocaleLowerCase" returns="String" signature="toLocaleLowerCase() -&gt; String" />
        <scope doc="Return a locale-specific uppercase version of the string." ilk="function" name="toLocaleUpperCase" returns="String" signature="toLocaleUpperCase() -&gt; String" />
        <scope doc="Return a lowercase version of the string." ilk="function" name="toLowerCase" returns="String" signature="toLowerCase() -&gt; String" />
        <scope doc="Return an uppercase version of the string." ilk="function" name="toUpperCase" returns="String" signature="toUpperCase() -&gt; String" />
      </scope>
      <scope ilk="class" name="XMLHttpRequest">
        <variable attributes="readonly" citdl="Channel" name="channel" />
        <variable attributes="readonly" citdl="DOMDocument" name="responseXML" />
        <variable attributes="readonly" citdl="String" name="responseText" />
        <variable attributes="readonly" citdl="unsigned long" name="status" />
        <variable attributes="readonly" citdl="String" name="statusText" />
        <scope doc="If the request has been sent already, this method will&#xA;abort the request." ilk="function" name="abort" signature="abort()" />
        <scope doc="Returns all of the response headers as a string for HTTP&#xA;requests.&#xA;&#xA;Note that this will return all the headers from the *current*&#xA;part of a multipart request, not from the original channel." ilk="function" name="getAllResponseHeaders" returns="string" signature="getAllResponseHeaders()" />
        <scope attributes="noscript" doc="Native (non-script) method to initialize a request. Note that&#xA;the request is not sent until the &lt;code&gt;send&lt;/code&gt; method&#xA;is invoked.&#xA;&#xA;Will abort currently active loads.&#xA;&#xA;After the initial response, all event listeners will be cleared.&#xA;Call open() before setting new event listeners." ilk="function" name="openRequest" signature="openRequest(method, url, async, user, password)">
          <variable citdl="String" ilk="argument" name="method" />
          <variable citdl="String" ilk="argument" name="url" />
          <variable citdl="boolean" ilk="argument" name="async" />
          <variable citdl="String" ilk="argument" name="user" />
          <variable citdl="String" ilk="argument" name="password" />
        </scope>
        <scope doc="Meant to be a script-only method for initializing a request.&#xA;The parameters are similar to the ones detailed in the&#xA;description of &lt;code&gt;openRequest&lt;/code&gt;, but the last&#xA;3 are optional.&#xA;&#xA;Will abort currently active loads.&#xA;&#xA;After the initial response, all event listeners will be cleared.&#xA;Call open() before setting new event listeners." ilk="function" name="open" signature="open(method, url)">
          <variable citdl="String" ilk="argument" name="method" />
          <variable citdl="String" ilk="argument" name="url" />
        </scope>
        <scope doc="Sends the request. If the request is asynchronous, returns&#xA;immediately after sending the request. If it is synchronous&#xA;returns only after the response has been received.&#xA;&#xA;After the initial response, all event listeners will be cleared.&#xA;Call open() before setting new event listeners." ilk="function" name="send" signature="send(body)">
          <variable citdl="Variant" ilk="argument" name="body" />
        </scope>
        <scope doc="Sets a HTTP request header for HTTP requests. You must call open&#xA;before setting the request headers." ilk="function" name="setRequestHeader" signature="setRequestHeader(header, value)">
          <variable citdl="String" ilk="argument" name="header" />
          <variable citdl="String" ilk="argument" name="value" />
        </scope>
        <variable attributes="readonly" citdl="long" name="readyState" />
        <scope doc="Override the mime type returned by the server (if any). This may&#xA;be used, for example, to force a stream to be treated and parsed&#xA;as text/xml, even if the server does not report it as such. This&#xA;must be done before the &lt;code&gt;send&lt;/code&gt; method is invoked." ilk="function" name="overrideMimeType" signature="overrideMimeType(mimetype)">
          <variable citdl="String" ilk="argument" name="mimetype" />
        </scope>
        <variable citdl="boolean" name="multipart" />
        <variable citdl="DOMEventListener" name="onload" />
        <variable citdl="DOMEventListener" name="onerror" />
        <variable citdl="DOMEventListener" name="onprogress" />
        <variable citdl="OnReadyStateChangeHandler" name="onreadystatechange" />
      </scope>
      <scope ilk="class" name="OnReadyStateChangeHandler">
        <scope doc="Helper to implement the onreadystatechange callback member.&#xA;You should not need to use this." ilk="function" name="handleEvent" signature="handleEvent()" />
      </scope>
      <variable citdl="Window" name="window" />
      <scope classrefs="EventTarget NSWindowBodyFramesetInlineEventHandlers" ilk="class" name="Window">
        <variable name="content" />
        <variable doc="Returns a reference to the content element in the current&#xA;window." name="_content" />
        <variable doc="This property indicates whether the current window is closed&#xA;or not" name="closed" />
        <variable doc="Returns an array of the XPCOM components installed in the&#xA;Gecko browser" name="Components" />
        <variable doc="Returns the XUL controller objects for the current chrome&#xA;window" name="controllers" />
        <variable doc="Returns the browser crypto object" name="crypto" />
        <variable doc="Gets/sets the status bar text for the given window" name="defaultStatus" />
        <variable doc="Returns a reference to the directories toolbar in the&#xA;current chrome" name="directories" />
        <variable citdl="HTMLDocument" doc="Returns a reference to the document that the window contains&#xA;Syntax : doc = window.document Parameters : doc is an object&#xA;reference to a document." name="document" />
        <variable doc="Returns an array of the subframes in the current window.&#xA;Syntax: frameList = window.frames; DOM Level 0." name="frames" />
        <variable doc="Returns a reference to the history object, which provides an&#xA;interface for manipulating the browser history. Syntax:&#xA;historyObj = window.history Parameters: historyObject is an&#xA;object reference." name="history" />
        <variable doc="Height of the browser window viewport including, if&#xA;rendered, the horizontal scrollbar. Syntax: var&#xA;intViewportHeight = window.innerHeight; Value:&#xA;intViewportHeight stores the window.innerHeight property&#xA;value." name="innerHeight" />
        <variable doc="Width of the browser window viewport including, if rendered,&#xA;the vertical scrollbar. Syntax: var intViewportWidth =&#xA;window.innerWidth; Value: intViewportWidth stores the&#xA;window.innerWidth property value." name="innerWidth" />
        <variable doc="Returns the number of frames in the window. Syntax: ifrms =&#xA;window.length Parameters: ifrms is the number of frames as&#xA;an integer." name="length" />
        <variable doc="Gets/sets the location, or current URL, of the window&#xA;object. Syntax: url = window.location window.location = url&#xA;Parameters: url is a string containing the URL for the&#xA;specified location." name="location" />
        <variable doc="Returns the locationbar object, whose visibility can be&#xA;toggled in the window. Syntax: objRef = window.locationbar&#xA;When you load the example page above, the browser displays&#xA;the following dialog: Image:window.locationbar example&#xA;dialog.png To toggle the visibility of these bars, you must&#xA;either sign your scripts or enable the appropriate&#xA;privileges, as in the example above." name="locationbar" />
        <variable doc="Returns the menubar object, whose visibility can be toggled&#xA;in the window. Syntax: objRef = window.menubar When you load&#xA;the example page above, the browser displays the following&#xA;dialog: DOM Level 0." name="menubar" />
        <variable doc="Gets/sets the name of the window. Syntax: string =&#xA;window.name window.name = string The name of the window is&#xA;used primarily for setting targets for hyperlinks and forms." name="name" />
        <variable doc="Returns a reference to the navigator object. Syntax: nav =&#xA;window.navigator Parameters: nav is a navigator object&#xA;reference." name="navigator">
          <variable doc="Returns the internal &quot;code&quot; name of the current browser.&#xA;Syntax: codeName = window.navigator.appCodeName Parameters:&#xA;codeName is the internal name of the browser as a string." name="appCodeName" />
          <variable doc="Returns the official name of the browser. Syntax: appName =&#xA;window.navigator.appName Parameters: appName is the name of&#xA;the browser as a string." name="appName" />
          <variable doc="Returns the version of the browser as a string. Syntax: ver&#xA;= window.navigator.appVersion Parameters: ver is the version&#xA;number of the browser as a string." name="appVersion" />
          <variable doc="Returns a boolean value indicating whether cookies are&#xA;enabled or not. Syntax: res = window.navigator.cookieEnabled&#xA;Parameters: res is a boolean True or False." name="cookieEnabled" />
          <variable doc="Returns a string representing the language version of the&#xA;browser. Syntax: lang = window.navigator.language&#xA;Parameters: lang is a two character string (e.g., &quot;en&quot; or&#xA;&quot;ja&quot;) representing the language version." name="language" />
          <variable doc="Returns a list of the MIME types supported by the browser&#xA;DOM Level 0. Not part of specification." name="mimeTypes" />
          <variable doc="Returns a string that identifies the current operating&#xA;system. Syntax: oscpuInfo = window.navigator.oscpu&#xA;Parameters: oscpu is a string that takes the following form." name="oscpu" />
          <variable doc="Returns a string representing the platform of the browser.&#xA;Syntax: plat = window.navigator.platform Parameters: plat is&#xA;a string with one of the following values: Win95 Windows 95&#xA;WinNT Windows NT MacPPC Macintosh PowerPC SunOS Solaris...." name="platform" />
          <variable doc="Returns an array of the plugins installed in the browser.&#xA;Syntax: plugins = window.navigator.plugins Parameters:&#xA;plugins is an array of plugin objects." name="plugins" />
          <variable doc="This property returns the product name of the current&#xA;browser. Syntax: productName = window.navigator.product&#xA;Parameters: productName is a string." name="product" />
          <variable doc="productSub returns the build number of the current browser.&#xA;Syntax: prodSub = window.navigator.productSub Parameters:&#xA;prodSub is a string." name="productSub" />
          <variable doc="Returns the user agent string for the current browser." name="userAgent" />
          <variable doc="Returns the name of the browser vendor for the current&#xA;browser. Syntax: venString = window.navigator.vendor&#xA;Parameters: venString is a string." name="vendor" />
          <variable doc="vendorSub is the substring of the vendor having to do with&#xA;the vendor version number. Syntax: venSub =&#xA;window.navigator.vendorSub Parameters: venSub is a string." name="vendorSub" />
          <scope doc="This method indicates whether the current browser is Java-&#xA;enabled or not. The return value for this method indicates&#xA;whether the preference that controls Java is on or off - not&#xA;whether the browser offers Java support in general." ilk="function" name="javaEnabled" signature="javaEnabled() =&gt; result" />
        </variable>
        <variable doc="Returns a reference to the window that opened this current&#xA;window. Syntax: objRef = window.opener When a window is&#xA;opened from another window, it maintains a reference to that&#xA;first window as window.opener." name="opener" />
        <variable doc="Gets the height of the outside of the browser window.&#xA;window.outerHeight represents the height of the whole&#xA;browser window including toolbars and window chrome." name="outerHeight" />
        <variable doc="Gets the width of the outside of the browser window.&#xA;window.outerWidth represents the width of the whole browser&#xA;window including sidebar (if expanded), window chrome and&#xA;window [re-]sizing borders/handles." name="outerWidth" />
        <variable doc="Gets the amount of content that has been hidden by scrolling&#xA;to the right. Syntax: hScroll = window.pageXOffset&#xA;Parameters: hScroll is the number of pixels scrolled as an&#xA;integer." name="pageXOffset" />
        <variable doc="Gets the amount of content that has been hidden by scrolling&#xA;down. Syntax: vScroll = window.pageYOffset Parameters:&#xA;vScroll is the number of pixels as an integer." name="pageYOffset" />
        <variable doc="Returns a reference to the parent of the current window or&#xA;subframe. Syntax: objRef = window.parent If a window does&#xA;not have a parent, its parent property is a reference to&#xA;itself." name="parent" />
        <variable doc="Returns the personalbar object, whose visibility can be&#xA;toggled in the window. Syntax: objRef = window.menubar To&#xA;toggle the visibility of these bars, you must either sign&#xA;your scripts or enable the appropriate privileges, as in the&#xA;example above." name="personalbar" />
        <variable doc="Returns the pkcs11 object , which can be used to install&#xA;drivers and other software associated with the pkcs11&#xA;protocol. Syntax: objRef = window.pkcs11 See nsIDOMPkcs11&#xA;for more information about how to manipulate pkcs11 objects." name="pkcs11" />
        <variable doc="Returns a reference to an nsIPrompt instance, allowing to&#xA;show dialogs parented to the current window. Syntax: objRef&#xA;= window.prompter DOM Level 0." name="prompter" />
        <variable doc="Returns a reference to the screen object associated with the&#xA;window. Syntax: screenObj = window.screen The screen object&#xA;is a special JavaScript object for controlling aspects of&#xA;the screen on which the current window is being rendered." name="screen">
          <variable doc="Returns the amount of vertical space available to the window&#xA;on the screen. Syntax: iAvail = window.screen.availHeight&#xA;DOM Level 0." name="availHeight" />
          <variable doc="Specifies the y-coordinate of the first pixel that is not&#xA;allocated to permanent or semipermanent user interface&#xA;features. Syntax: iAvail = window.screen.availTop In most&#xA;cases, this property returns 0." name="availTop" />
          <variable doc="Returns the amount of horizontal space in pixels available&#xA;to the window. Syntax: iAvail = window.screen.availWidth no&#xA;notes DOM Level 0." name="availWidth" />
          <variable doc="Returns the color depth of the screen. Syntax: bitDepth =&#xA;window.screen.colorDepth See also window.screen.pixelDepth." name="colorDepth" />
          <variable doc="Returns the height of the screen in pixels. Syntax: iHeight&#xA;= window.screen.height Note that not all of the height given&#xA;by this property may be available to the window itself." name="height" />
          <variable doc="Gets/sets the current distance in pixels from the left side&#xA;of the screen. Syntax: lLeft = window.screen.left&#xA;window.screen.left = lLeft See also window.screen.top." name="left" />
          <variable doc="Returns the bit depth of the screen. Syntax: depth =&#xA;window.screen.pixelDepth See also window.screen.colorDepth." name="pixelDepth" />
          <variable doc="Gets/sets the distance from the top of the screen. Syntax:&#xA;lTop = window.screen.top window.screen.top = lTop See also&#xA;window.screen.left." name="top" />
          <variable doc="Returns the width of the screen. Syntax: lWidth =&#xA;window.screen.width Note that not all of the width given by&#xA;this property may be available to the window itself." name="width" />
        </variable>
        <variable doc="Syntax: iAvail = window.screen.availLeft In most cases, this&#xA;property returns 0. DOM Level 0." name="screenavailLeft" />
        <variable doc="Returns the horizontal distance of the left border of the&#xA;user&apos;s browser from the left side of the screen. Syntax:&#xA;lLoc = window.screenX Parameters: lLoc is the number of&#xA;pixels from the left side the screen." name="screenX" />
        <variable doc="Returns the vertical distance of the top border of the&#xA;user&apos;s browser from the top side of the screen. Syntax: lLoc&#xA;= window.screenY Parameters: lLoc is the number of pixels&#xA;from the top of the screen." name="screenY" />
        <variable doc="Returns the scrollbars object, whose visibility can be&#xA;toggled in the window. Syntax: objRef = window.scrollbars&#xA;Note that scrollbars is not an array of the scrollbars." name="scrollbars" />
        <variable doc="Returns the number of pixels that the document has already&#xA;been scrolled horizontally. Syntax: xpix = window.scrollX&#xA;Parameters: xpix is the number of pixels." name="scrollX" />
        <variable doc="Returns the number of pixels that the document has already&#xA;been scrolled vertically. Syntax: ypix = window.scrollY&#xA;Parameters: ypix is the number of pixels." name="scrollY" />
        <variable doc="Returns an object reference to the window object. Syntax:&#xA;objRef = window.self window.self is almost always used in&#xA;comparisons like in the example above, which finds out if&#xA;the current window is the first subframe in the parent&#xA;frameset." name="self" />
        <variable doc="Returns a reference to the window object of the sidebar.&#xA;Syntax: sidebar = window.sidebar Parameters: sidebar is a&#xA;window object." name="sidebar" />
        <variable doc="Gets/sets the text in the statusbar at the bottom of the&#xA;browser. Syntax: string = window.status window.status =&#xA;string DOM Level 0." name="status" />
        <variable doc="Returns the statusbar object, whose visibility can be&#xA;toggled in the window. Syntax: objRef = window.menubar When&#xA;you load the example page above, the browser displays the&#xA;following dialog: DOM Level 0." name="statusbar" />
        <variable doc="Returns the toolbar object, whose visibility can be toggled&#xA;in the window. Syntax: objRef = window.menubar To toggle the&#xA;visibility of these bars, you must either sign your scripts&#xA;or enable the appropriate privileges, as in the example&#xA;above." name="toolbar" />
        <variable doc="Returns a reference to the topmost window in the window&#xA;hierarchy. Syntax: objRef = window.top Where the&#xA;window.parent property returns the immediate parent of the&#xA;current window, window.top returns the topmost window in the&#xA;hierarchy of window objects." name="top" />
        <variable doc="The window property of a window object points to the window&#xA;object itself." name="window" />
        <scope doc="Display an alert dialog with the specified text. The alert&#xA;dialog should be used for messages which do not require any&#xA;response of the part of the user, other than the&#xA;acknowledgement of the message." ilk="function" name="alert" signature="alert(text)">
          <variable doc="is a string of the text you want displayed in the alert dialog" ilk="argument" name="text" />
        </scope>
        <scope ilk="function" name="atob" />
        <scope doc="Returns the window to the previous item in the history. DOM&#xA;Level 0." ilk="function" name="back" signature="back()" />
        <scope doc="Shifts focus away from the window. The window.blur() method&#xA;is the programmatic equivalent of the user shifting focus&#xA;away from the current window." ilk="function" name="blur" signature="blur()" />
        <scope ilk="function" name="btoa" />
        <scope doc="Registers the window to capture all events of the specified&#xA;type. Events raised in the DOM by user activity (such as&#xA;clicking buttons or shifting focus away from the current&#xA;document) generally pass through the high-level window and&#xA;document objects first before arriving at the object that&#xA;initiated the event." ilk="function" name="captureEvents" signature="captureEvents(Event.eventType)">
          <variable ilk="argument" name="Event.eventType" />
        </scope>
        <scope doc="Clears a delay that&apos;s been set for a specific function. DOM&#xA;Level 0." ilk="function" name="clearInterval" signature="clearInterval(intervalID)">
          <variable doc="is the ID of the specific interval you want to clear, which is the return value of a call to the setInterval method" ilk="argument" name="intervalID" />
        </scope>
        <scope doc="Clears the delay set by window.setTimeout(). Passing an&#xA;invalid ID to clearTimeout does not have any effect (and&#xA;doesn&apos;t throw an exception)." ilk="function" name="clearTimeout" signature="clearTimeout(timeoutID)" />
        <scope doc="Closes the referenced window. ; DOM Level 0." ilk="function" name="close" signature="close()" />
        <scope doc="Displays a dialog with a message that the user needs to&#xA;respond to. Unlike the alert dialog, which contains only an&#xA;OK button, a confirm dialog has OK and Cancel buttons, and&#xA;returns true only when the user confirms the choice being&#xA;presented by clicking OK." ilk="function" name="confirm" signature="confirm(text) =&gt; result">
          <variable doc="is a string" ilk="argument" name="text" />
        </scope>
        <scope doc="Prints messages to the console. window.dump is commonly used&#xA;to debug JavaScript." ilk="function" name="dump" signature="dump(text)">
          <variable doc="is a string" ilk="argument" name="text" />
        </scope>
        <scope doc="Encodes a string. DOM Level 0." ilk="function" name="escape" signature="escape(sRegular) =&gt; sEscaped">
          <variable doc="is a regular string The escape() method converts special characters (any characters that are not regular text or numbers) into hexadecimal characters, which is especially necessary for setting the values of cookies" ilk="argument" name="sRegular" />
        </scope>
        <scope doc="Sets focus on the window. DOM Level 0." ilk="function" name="focus" signature="focus()" />
        <scope doc="Moves the window one document forward in the history. DOM&#xA;Level 0." ilk="function" name="forward" signature="forward()" />
        <scope doc="Flashes the application icon to get the user&apos;s attention. On&#xA;windows and linux, the icon flashes in the system tray." ilk="function" name="getAttention" signature="getAttention()" />
        <scope doc="Returns a selection object representing the selected&#xA;item(s). the selected text) is passed instead." ilk="function" name="getSelection" signature="getSelection() =&gt; selection" />
        <scope doc="Returns the window to the home page. DOM Level 0." ilk="function" name="home" signature="home()" />
        <scope doc="Moves the current window by a specified amount. You can use&#xA;negative numbers as parameters for this function." ilk="function" name="moveBy" signature="moveBy(deltaX, deltaY)">
          <variable doc="is the amount of pixels to move the window horizontally" ilk="argument" name="deltaX" />
          <variable doc="is the amount of pixels to move the window vertically" ilk="argument" name="deltaY" />
        </scope>
        <scope doc="Moves the window to the specified coordinates. This function&#xA;moves the window absolutely while window.moveBy moves the&#xA;window relative to its current location." ilk="function" name="moveTo" signature="moveTo(x, y)">
          <variable doc="is the vertical coordinate to be moved to" ilk="argument" name="y" />
          <variable doc="is the horizontal coordinate to be moved to" ilk="argument" name="x" />
        </scope>
        <scope doc="Creates a new secondary browser window and loads the&#xA;referenced resource. ; Return value and parameters:&#xA;WindowObjectReference This is the reference pointing to the&#xA;newly created browser window." ilk="function" name="open" signature="open(strUrl, strWindowName [, strWindowFeatures]) =&gt; WindowObjectReference" />
        <scope doc="Opens a new dialog window" ilk="function" name="openDialog" />
        <scope doc="Prints the current document. DOM Level 0." ilk="function" name="print" signature="print()" />
        <scope doc="Displays a dialog with a message that prompts the user for a&#xA;text response. A prompt dialog contains a single-line&#xA;textbox and an OK button, and returns the (possibly empty)&#xA;text the user inputted into that textbox." ilk="function" name="prompt" signature="prompt(text) =&gt; result">
          <variable doc="is a string of the text to be displayed to the user" ilk="argument" name="text" />
        </scope>
        <scope doc="Releases the window from trapping events of a specific type.&#xA;Also note that the eventType parameter is case-insensitive,&#xA;so you can also say, for example,&#xA;window.releaseEvents(Event.KeyPress)." ilk="function" name="releaseEvents" signature="releaseEvents(eventType)">
          <variable doc="is a string with one of the following values: Note that you can pass a list of events to this method using the following syntax: window.releaseEvents(Event.KEYPRESS | Event.KEYDOWN | Event.KEYUP)" ilk="argument" name="eventType" />
        </scope>
        <scope doc="Resizes the current window by a certain amount. This method&#xA;resizes the window relative to its current size." ilk="function" name="resizeBy" signature="resizeBy(xDelta, yDelta)">
          <variable doc="is the number of pixels to grow the window horizontally" ilk="argument" name="xDelta" />
          <variable doc="is the number of pixels to grow the window vertically" ilk="argument" name="yDelta" />
        </scope>
        <scope doc="Dynamically resizes window. See also window.resizeBy." ilk="function" name="resizeTo" signature="resizeTo(iWidth, iHeight)">
          <variable doc="is an integer representing the new width in pixels" ilk="argument" name="iWidth" />
          <variable doc="is an integer value representing the new height in pixels" ilk="argument" name="iHeight" />
        </scope>
        <scope doc="Scrolls the window to a particular place in the document.&#xA;window.scrollTo is effectively the same as this method." ilk="function" name="scroll" signature="scroll(x-coord, y-coord)">
          <variable doc="is the pixel along the vertical axis of the document that you want displayed in the upper left" ilk="argument" name="y-coord" />
          <variable doc="is the pixel along the horizontal axis of the document that you want displayed in the upper left" ilk="argument" name="x-coord" />
        </scope>
        <scope doc="Scrolls the document in the window by the given amount.&#xA;window.scrollBy scrolls by a particular amount where&#xA;window.scroll scrolls to an absolute position in the&#xA;document." ilk="function" name="scrollBy" signature="scrollBy(xDelta, yDelta)">
          <variable doc="is the amount of pixels to scroll horizontally" ilk="argument" name="xDelta" />
          <variable doc="is the amount of pixels to scroll vertically" ilk="argument" name="yDelta" />
        </scope>
        <scope doc="Scrolls the document by the given number of lines. See also&#xA;window.scrollBy, window.scrollByPages." ilk="function" name="scrollByLines" signature="scrollByLines(lines)">
          <variable doc="is the number of lines" ilk="argument" name="lines" />
        </scope>
        <scope doc="Scrolls the current document by the specified number of&#xA;pages. See also window.scrollBy, window.scrollByLines,&#xA;window.scroll, window.scrollTo." ilk="function" name="scrollByPages" signature="scrollByPages(pages)">
          <variable doc="is the number of pages to scroll" ilk="argument" name="pages" />
        </scope>
        <scope doc="Scrolls to a particular set of coordinates in the document.&#xA;This function is effectively the same as window.scroll." ilk="function" name="scrollTo" signature="scrollTo(x-coord, y-coord)">
          <variable doc="is the pixel along the vertical axis of the document that you want displayed in the upper left" ilk="argument" name="y-coord" />
          <variable doc="is the pixel along the horizontal axis of the document that you want displayed in the upper left" ilk="argument" name="x-coord" />
        </scope>
        <scope doc="Set a delay for a specific function. The interval ID is used&#xA;to refer to the specific interval when it needs to be&#xA;cleared." ilk="function" name="setInterval" signature="setInterval(funcName, delay) =&gt; ID">
          <variable doc="is the number of milliseconds (thousandths of a second) that the function should be delayed" ilk="argument" name="delay" />
          <variable doc="is the name of the function for which you want to set a delay" ilk="argument" name="funcName" />
        </scope>
        <scope doc="Executes a code snippet or a function after specified delay.&#xA;; timeoutID = window.setTimeout(code, delay); You can cancel&#xA;the timeout using window.clearTimeout()." ilk="function" name="setTimeout" signature="setTimeout(func, delay[, param1, param2, ...]) =&gt; timeoutID" />
        <scope doc="Sizes the window according to its content. DOM Level 0." ilk="function" name="sizeToContent" signature="sizeToContent()" />
        <scope doc="This method stops window loading. The stop() method is&#xA;exactly equivalent to clicking the stop button in the&#xA;browser." ilk="function" name="stop" signature="stop()" />
        <scope doc="Unencodes a value that has been encoded in hexadecimal&#xA;(e.g., a cookie). See also window.escape." ilk="function" name="unescape" signature="unescape(sValue)">
          <variable doc="is an encoded string" ilk="argument" name="sValue" />
        </scope>
        <scope doc="Updates the state of commands of the current chrome window&#xA;(UI). whether we are in bold right now)." ilk="function" name="updateCommands" signature="updateCommands(&quot;sCommandName&quot;)">
          <variable ilk="argument" name="sCommandName" />
        </scope>
      </scope>
      <scope classrefs="CharacterData" doc="This interface inherits from CharacterData and represents&#xA;the content of a comment, i.e., all the characters between&#xA;the starting &apos; &lt;!-- &apos; and ending &apos; --&gt; &apos;. Note that this is&#xA;the definition of a comment in XML, and, in practice, HTML,&#xA;although some HTML tools may implement the full SGML comment&#xA;structure." ilk="class" name="Comment" />
      <scope doc="The Event interface is used to provide contextual&#xA;information about an event to the handler processing the&#xA;event. An object which implements the Event interface is&#xA;generally passed as the first parameter to an event handler." ilk="class" name="Event">
        <variable attributes="static" citdl="Number" doc="The current event phase is the capturing phase." name="CAPTURING_PHASE" />
        <variable attributes="static" citdl="Number" doc="The event is currently being evaluated at the target&#xA;EventTarget." name="AT_TARGET" />
        <variable attributes="static" citdl="Number" doc="The current event phase is the bubbling phase." name="BUBBLING_PHASE" />
        <variable citdl="DOMString" doc="The name of the event (case-insensitive). The name must be&#xA;an XML name." name="type" />
        <variable citdl="EventTarget" doc="Used to indicate the EventTarget to which the event was&#xA;originally dispatched." name="target" />
        <variable citdl="EventTarget" doc="Used to indicate the EventTarget whose EventListeners are&#xA;currently being processed. This is particularly useful&#xA;during capturing and bubbling." name="currentTarget" />
        <variable citdl="Number" doc="Used to indicate which phase of event flow is currently&#xA;being evaluated." name="eventPhase" />
        <variable citdl="Boolean" doc="Used to indicate whether or not an event is a bubbling&#xA;event. If the event can bubble the value is true, else the&#xA;value is false." name="bubbles" />
        <variable citdl="Boolean" doc="Used to indicate whether or not an event can have its&#xA;default action prevented. If the default action can be&#xA;prevented the value is true, else the value is false." name="cancelable" />
        <variable citdl="DOMTimeStamp" doc="Used to specify the time (in milliseconds relative to the&#xA;epoch) at which the event was created. Due to the fact that&#xA;some systems may not provide this information the value of&#xA;timeStamp may be not available for all events." name="timeStamp" />
        <scope doc="The stopPropagation method is used prevent further&#xA;propagation of an event during event flow. If this method is&#xA;called by any EventListener the event will cease propagating&#xA;through the tree." ilk="function" name="stopPropagation" signature="stopPropagation()" />
        <scope doc="If an event is cancelable, the preventDefault method is used&#xA;to signify that the event is to be canceled, meaning any&#xA;default action normally taken by the implementation as a&#xA;result of the event will not occur. If, during any stage of&#xA;event flow, the preventDefault method is called the event is&#xA;canceled." ilk="function" name="preventDefault" signature="preventDefault()" />
        <scope doc="The initEvent method is used to initialize the value of an&#xA;Event created through the DocumentEvent interface. This&#xA;method may only be called before the Event has been&#xA;dispatched via the dispatchEvent method, though it may be&#xA;called multiple times during that phase if necessary." ilk="function" name="initEvent" signature="initEvent(eventTypeArg, canBubbleArg, cancelableArg)">
          <variable citdl="DOMString" ilk="argument" name="eventTypeArg" />
          <variable citdl="Boolean" ilk="argument" name="canBubbleArg" />
          <variable citdl="Boolean" ilk="argument" name="cancelableArg" />
        </scope>
      </scope>
      <scope doc="The DocumentStyle interface provides a mechanism by which&#xA;the style sheets embedded in a document can be retrieved.&#xA;The expectation is that an instance of the DocumentStyle&#xA;interface can be obtained by using binding-specific casting&#xA;methods on an instance of the Document interface." ilk="class" name="DocumentStyle">
        <variable citdl="StyleSheetList" doc="A list containing all the style sheets explicitly linked&#xA;into or embedded in a document. For HTML documents, this&#xA;includes external style sheets, included via the HTML LINK&#xA;element, and inline STYLE elements." name="styleSheets" />
      </scope>
      <scope classrefs="Node" doc="The Attr interface represents an attribute in an Element&#xA;object. Typically the allowable values for the attribute are&#xA;defined in a document type definition." ilk="class" name="Attr">
        <variable citdl="DOMString" doc="Returns the name of this attribute." name="name" />
        <variable citdl="Boolean" doc="If this attribute was explicitly given a value in the&#xA;original document, this is true ; otherwise, it is false.&#xA;Note that the implementation is in charge of this attribute,&#xA;not the user." name="specified" />
        <variable citdl="DOMString" doc="On retrieval, the value of the attribute is returned as a&#xA;string. Character and general entity references are replaced&#xA;with their values." name="value" />
        <variable citdl="Element" doc="The Element node this attribute is attached to or null if&#xA;this attribute is not in use." name="ownerElement" />
      </scope>
      <scope doc="The DOMImplementation interface provides a number of methods&#xA;for performing operations that are independent of any&#xA;particular instance of the document object model." ilk="class" name="DOMImplementation">
        <scope doc="Test if the DOM implementation implements a specific&#xA;feature." ilk="function" name="hasFeature" returns="Boolean" signature="hasFeature(feature, version)">
          <variable citdl="DOMString" ilk="argument" name="feature" />
          <variable citdl="DOMString" ilk="argument" name="version" />
        </scope>
        <scope doc="Creates an empty DocumentType node. Entity declarations and&#xA;notations are not made available." ilk="function" name="createDocumentType" returns="DocumentType" signature="createDocumentType(qualifiedName, publicId, systemId)">
          <variable citdl="DOMString" ilk="argument" name="qualifiedName" />
          <variable citdl="DOMString" ilk="argument" name="publicId" />
          <variable citdl="DOMString" ilk="argument" name="systemId" />
        </scope>
        <scope doc="Creates an XML Document object of the specified type with&#xA;its document element. HTML-only DOM implementations do not&#xA;need to implement this method." ilk="function" name="createDocument" returns="Document" signature="createDocument(namespaceURI, qualifiedName, doctype)">
          <variable citdl="DOMString" ilk="argument" name="namespaceURI" />
          <variable citdl="DOMString" ilk="argument" name="qualifiedName" />
          <variable citdl="DocumentType" ilk="argument" name="doctype" />
        </scope>
      </scope>
      <scope doc="Objects implementing the NamedNodeMap interface are used to&#xA;represent collections of nodes that can be accessed by name.&#xA;Note that NamedNodeMap does not inherit from NodeList ;&#xA;NamedNodeMaps are not maintained in any particular order." ilk="class" name="NamedNodeMap">
        <variable citdl="Number" doc="The number of nodes in this map. The range of valid child&#xA;node indices is 0 to length-1 inclusive." name="length" />
        <scope doc="Retrieves a node specified by name." ilk="function" name="getNamedItem" returns="Node" signature="getNamedItem(name)">
          <variable citdl="DOMString" ilk="argument" name="name" />
        </scope>
        <scope doc="Adds a node using its nodeName attribute. If a node with&#xA;that name is already present in this map, it is replaced by&#xA;the new one." ilk="function" name="setNamedItem" returns="Node" signature="setNamedItem(arg)">
          <variable citdl="Node" ilk="argument" name="arg" />
        </scope>
        <scope doc="Removes a node specified by name. When this map contains the&#xA;attributes attached to an element, if the removed attribute&#xA;is known to have a default value, an attribute immediately&#xA;appears containing the default value as well as the&#xA;corresponding namespace URI, local name, and prefix when&#xA;applicable." ilk="function" name="removeNamedItem" returns="Node" signature="removeNamedItem(name)">
          <variable citdl="DOMString" ilk="argument" name="name" />
        </scope>
        <scope doc="Returns the index th item in the map. If index is greater&#xA;than or equal to the number of nodes in this map, this&#xA;returns null." ilk="function" name="item" returns="Node" signature="item(index)">
          <variable citdl="Number" ilk="argument" name="index" />
        </scope>
        <scope doc="Retrieves a node specified by local name and namespace URI.&#xA;HTML-only DOM implementations do not need to implement this&#xA;method." ilk="function" name="getNamedItemNS" returns="Node" signature="getNamedItemNS(namespaceURI, localName)">
          <variable citdl="DOMString" ilk="argument" name="namespaceURI" />
          <variable citdl="DOMString" ilk="argument" name="localName" />
        </scope>
        <scope doc="Adds a node using its namespaceURI and localName. If a node&#xA;with that namespace URI and that local name is already&#xA;present in this map, it is replaced by the new one." ilk="function" name="setNamedItemNS" returns="Node" signature="setNamedItemNS(arg)">
          <variable citdl="Node" ilk="argument" name="arg" />
        </scope>
        <scope doc="Removes a node specified by local name and namespace URI. A&#xA;removed attribute may be known to have a default value when&#xA;this map contains the attributes attached to an element, as&#xA;returned by the attributes attribute of the Node interface." ilk="function" name="removeNamedItemNS" returns="Node" signature="removeNamedItemNS(namespaceURI, localName)">
          <variable citdl="DOMString" ilk="argument" name="namespaceURI" />
          <variable citdl="DOMString" ilk="argument" name="localName" />
        </scope>
      </scope>
      <scope doc="The CSSRule interface is the abstract base interface for any&#xA;type of CSS statement. This includes both rule sets and at-&#xA;rules." ilk="class" name="CSSRule">
        <variable attributes="static" citdl="Number" doc="The rule is a CSSUnknownRule." name="UNKNOWN_RULE" />
        <variable attributes="static" citdl="Number" doc="The rule is a CSSStyleRule." name="STYLE_RULE" />
        <variable attributes="static" citdl="Number" doc="The rule is a CSSCharsetRule." name="CHARSET_RULE" />
        <variable attributes="static" citdl="Number" doc="The rule is a CSSImportRule." name="IMPORT_RULE" />
        <variable attributes="static" citdl="Number" doc="The rule is a CSSMediaRule." name="MEDIA_RULE" />
        <variable attributes="static" citdl="Number" doc="The rule is a CSSFontFaceRule." name="FONT_FACE_RULE" />
        <variable attributes="static" citdl="Number" doc="The rule is a CSSPageRule." name="PAGE_RULE" />
        <variable citdl="Number" doc="The type of the rule, as defined above. The expectation is&#xA;that binding-specific casting methods can be used to cast&#xA;down from an instance of the CSSRule interface to the&#xA;specific derived interface implied by the type." name="type" />
        <variable citdl="DOMString" doc="The parsable textual representation of the rule. This&#xA;reflects the current state of the rule and not its initial&#xA;value." name="cssText" />
        <variable citdl="CSSStyleSheet" doc="The style sheet that contains this rule." name="parentStyleSheet" />
        <variable citdl="CSSRule" doc="If this rule is contained inside another rule (e.g. a style&#xA;rule inside an @media block), this is the containing rule." name="parentRule" />
      </scope>
      <scope classrefs="CSSRule" doc="The CSSMediaRule interface represents a @media rule in a CSS&#xA;style sheet. A @media rule can be used to delimit style&#xA;rules for specific media types." ilk="class" name="CSSMediaRule">
        <variable citdl="stylesheets::MediaList" doc="A list of media types for this rule." name="media" />
        <variable citdl="CSSRuleList" doc="A list of all CSS rules contained within the media block." name="cssRules" />
        <scope doc="Used to insert a new rule into the media block." ilk="function" name="insertRule" returns="Number" signature="insertRule(rule, index)">
          <variable citdl="DOMString" ilk="argument" name="rule" />
          <variable citdl="Number" ilk="argument" name="index" />
        </scope>
        <scope doc="Used to delete a rule from the media block." ilk="function" name="deleteRule" signature="deleteRule(index)">
          <variable citdl="Number" ilk="argument" name="index" />
        </scope>
      </scope>
      <scope doc="The CSS2Properties interface represents a convenience&#xA;mechanism for retrieving and setting properties within a&#xA;CSSStyleDeclaration. The attributes of this interface&#xA;correspond to all the properties specified in CSS2." ilk="class" name="CSS2Properties">
        <variable citdl="DOMString" doc="See the azimuth property definition in CSS2." name="azimuth" />
        <variable citdl="DOMString" doc="See the background property definition in CSS2." name="background" />
        <variable citdl="DOMString" doc="See the background-attachment property definition in CSS2." name="backgroundAttachment" />
        <variable citdl="DOMString" doc="See the background-color property definition in CSS2." name="backgroundColor" />
        <variable citdl="DOMString" doc="See the background-image property definition in CSS2." name="backgroundImage" />
        <variable citdl="DOMString" doc="See the background-position property definition in CSS2." name="backgroundPosition" />
        <variable citdl="DOMString" doc="See the background-repeat property definition in CSS2." name="backgroundRepeat" />
        <variable citdl="DOMString" doc="See the border property definition in CSS2." name="border" />
        <variable citdl="DOMString" doc="See the border-collapse property definition in CSS2." name="borderCollapse" />
        <variable citdl="DOMString" doc="See the border-color property definition in CSS2." name="borderColor" />
        <variable citdl="DOMString" doc="See the border-spacing property definition in CSS2." name="borderSpacing" />
        <variable citdl="DOMString" doc="See the border-style property definition in CSS2." name="borderStyle" />
        <variable citdl="DOMString" doc="See the border-top property definition in CSS2." name="borderTop" />
        <variable citdl="DOMString" doc="See the border-right property definition in CSS2." name="borderRight" />
        <variable citdl="DOMString" doc="See the border-bottom property definition in CSS2." name="borderBottom" />
        <variable citdl="DOMString" doc="See the border-left property definition in CSS2." name="borderLeft" />
        <variable citdl="DOMString" doc="See the border-top-color property definition in CSS2." name="borderTopColor" />
        <variable citdl="DOMString" doc="See the border-right-color property definition in CSS2." name="borderRightColor" />
        <variable citdl="DOMString" doc="See the border-bottom-color property definition in CSS2." name="borderBottomColor" />
        <variable citdl="DOMString" doc="See the border-left-color property definition in CSS2." name="borderLeftColor" />
        <variable citdl="DOMString" doc="See the border-top-style property definition in CSS2." name="borderTopStyle" />
        <variable citdl="DOMString" doc="See the border-right-style property definition in CSS2." name="borderRightStyle" />
        <variable citdl="DOMString" doc="See the border-bottom-style property definition in CSS2." name="borderBottomStyle" />
        <variable citdl="DOMString" doc="See the border-left-style property definition in CSS2." name="borderLeftStyle" />
        <variable citdl="DOMString" doc="See the border-top-width property definition in CSS2." name="borderTopWidth" />
        <variable citdl="DOMString" doc="See the border-right-width property definition in CSS2." name="borderRightWidth" />
        <variable citdl="DOMString" doc="See the border-bottom-width property definition in CSS2." name="borderBottomWidth" />
        <variable citdl="DOMString" doc="See the border-left-width property definition in CSS2." name="borderLeftWidth" />
        <variable citdl="DOMString" doc="See the border-width property definition in CSS2." name="borderWidth" />
        <variable citdl="DOMString" doc="See the bottom property definition in CSS2." name="bottom" />
        <variable citdl="DOMString" doc="See the caption-side property definition in CSS2." name="captionSide" />
        <variable citdl="DOMString" doc="See the clear property definition in CSS2." name="clear" />
        <variable citdl="DOMString" doc="See the clip property definition in CSS2." name="clip" />
        <variable citdl="DOMString" doc="See the color property definition in CSS2." name="color" />
        <variable citdl="DOMString" doc="See the content property definition in CSS2." name="content" />
        <variable citdl="DOMString" doc="See the counter-increment property definition in CSS2." name="counterIncrement" />
        <variable citdl="DOMString" doc="See the counter-reset property definition in CSS2." name="counterReset" />
        <variable citdl="DOMString" doc="See the cue property definition in CSS2." name="cue" />
        <variable citdl="DOMString" doc="See the cue-after property definition in CSS2." name="cueAfter" />
        <variable citdl="DOMString" doc="See the cue-before property definition in CSS2." name="cueBefore" />
        <variable citdl="DOMString" doc="See the cursor property definition in CSS2." name="cursor" />
        <variable citdl="DOMString" doc="See the direction property definition in CSS2." name="direction" />
        <variable citdl="DOMString" doc="See the display property definition in CSS2." name="display" />
        <variable citdl="DOMString" doc="See the elevation property definition in CSS2." name="elevation" />
        <variable citdl="DOMString" doc="See the empty-cells property definition in CSS2." name="emptyCells" />
        <variable citdl="DOMString" doc="See the float property definition in CSS2." name="cssFloat" />
        <variable citdl="DOMString" doc="See the font property definition in CSS2." name="font" />
        <variable citdl="DOMString" doc="See the font-family property definition in CSS2." name="fontFamily" />
        <variable citdl="DOMString" doc="See the font-size property definition in CSS2." name="fontSize" />
        <variable citdl="DOMString" doc="See the font-size-adjust property definition in CSS2." name="fontSizeAdjust" />
        <variable citdl="DOMString" doc="See the font-stretch property definition in CSS2." name="fontStretch" />
        <variable citdl="DOMString" doc="See the font-style property definition in CSS2." name="fontStyle" />
        <variable citdl="DOMString" doc="See the font-variant property definition in CSS2." name="fontVariant" />
        <variable citdl="DOMString" doc="See the font-weight property definition in CSS2." name="fontWeight" />
        <variable citdl="DOMString" doc="See the height property definition in CSS2." name="height" />
        <variable citdl="DOMString" doc="See the left property definition in CSS2." name="left" />
        <variable citdl="DOMString" doc="See the letter-spacing property definition in CSS2." name="letterSpacing" />
        <variable citdl="DOMString" doc="See the line-height property definition in CSS2." name="lineHeight" />
        <variable citdl="DOMString" doc="See the list-style property definition in CSS2." name="listStyle" />
        <variable citdl="DOMString" doc="See the list-style-image property definition in CSS2." name="listStyleImage" />
        <variable citdl="DOMString" doc="See the list-style-position property definition in CSS2." name="listStylePosition" />
        <variable citdl="DOMString" doc="See the list-style-type property definition in CSS2." name="listStyleType" />
        <variable citdl="DOMString" doc="See the margin property definition in CSS2." name="margin" />
        <variable citdl="DOMString" doc="See the margin-top property definition in CSS2." name="marginTop" />
        <variable citdl="DOMString" doc="See the margin-right property definition in CSS2." name="marginRight" />
        <variable citdl="DOMString" doc="See the margin-bottom property definition in CSS2." name="marginBottom" />
        <variable citdl="DOMString" doc="See the margin-left property definition in CSS2." name="marginLeft" />
        <variable citdl="DOMString" doc="See the marker-offset property definition in CSS2." name="markerOffset" />
        <variable citdl="DOMString" doc="See the marks property definition in CSS2." name="marks" />
        <variable citdl="DOMString" doc="See the max-height property definition in CSS2." name="maxHeight" />
        <variable citdl="DOMString" doc="See the max-width property definition in CSS2." name="maxWidth" />
        <variable citdl="DOMString" doc="See the min-height property definition in CSS2." name="minHeight" />
        <variable citdl="DOMString" doc="See the min-width property definition in CSS2." name="minWidth" />
        <variable citdl="DOMString" doc="See the orphans property definition in CSS2." name="orphans" />
        <variable citdl="DOMString" doc="See the outline property definition in CSS2." name="outline" />
        <variable citdl="DOMString" doc="See the outline-color property definition in CSS2." name="outlineColor" />
        <variable citdl="DOMString" doc="See the outline-style property definition in CSS2." name="outlineStyle" />
        <variable citdl="DOMString" doc="See the outline-width property definition in CSS2." name="outlineWidth" />
        <variable citdl="DOMString" doc="See the overflow property definition in CSS2." name="overflow" />
        <variable citdl="DOMString" doc="See the padding property definition in CSS2." name="padding" />
        <variable citdl="DOMString" doc="See the padding-top property definition in CSS2." name="paddingTop" />
        <variable citdl="DOMString" doc="See the padding-right property definition in CSS2." name="paddingRight" />
        <variable citdl="DOMString" doc="See the padding-bottom property definition in CSS2." name="paddingBottom" />
        <variable citdl="DOMString" doc="See the padding-left property definition in CSS2." name="paddingLeft" />
        <variable citdl="DOMString" doc="See the page property definition in CSS2." name="page" />
        <variable citdl="DOMString" doc="See the page-break-after property definition in CSS2." name="pageBreakAfter" />
        <variable citdl="DOMString" doc="See the page-break-before property definition in CSS2." name="pageBreakBefore" />
        <variable citdl="DOMString" doc="See the page-break-inside property definition in CSS2." name="pageBreakInside" />
        <variable citdl="DOMString" doc="See the pause property definition in CSS2." name="pause" />
        <variable citdl="DOMString" doc="See the pause-after property definition in CSS2." name="pauseAfter" />
        <variable citdl="DOMString" doc="See the pause-before property definition in CSS2." name="pauseBefore" />
        <variable citdl="DOMString" doc="See the pitch property definition in CSS2." name="pitch" />
        <variable citdl="DOMString" doc="See the pitch-range property definition in CSS2." name="pitchRange" />
        <variable citdl="DOMString" doc="See the play-during property definition in CSS2." name="playDuring" />
        <variable citdl="DOMString" doc="See the position property definition in CSS2." name="position" />
        <variable citdl="DOMString" doc="See the quotes property definition in CSS2." name="quotes" />
        <variable citdl="DOMString" doc="See the richness property definition in CSS2." name="richness" />
        <variable citdl="DOMString" doc="See the right property definition in CSS2." name="right" />
        <variable citdl="DOMString" doc="See the size property definition in CSS2." name="size" />
        <variable citdl="DOMString" doc="See the speak property definition in CSS2." name="speak" />
        <variable citdl="DOMString" doc="See the speak-header property definition in CSS2." name="speakHeader" />
        <variable citdl="DOMString" doc="See the speak-numeral property definition in CSS2." name="speakNumeral" />
        <variable citdl="DOMString" doc="See the speak-punctuation property definition in CSS2." name="speakPunctuation" />
        <variable citdl="DOMString" doc="See the speech-rate property definition in CSS2." name="speechRate" />
        <variable citdl="DOMString" doc="See the stress property definition in CSS2." name="stress" />
        <variable citdl="DOMString" doc="See the table-layout property definition in CSS2." name="tableLayout" />
        <variable citdl="DOMString" doc="See the text-align property definition in CSS2." name="textAlign" />
        <variable citdl="DOMString" doc="See the text-decoration property definition in CSS2." name="textDecoration" />
        <variable citdl="DOMString" doc="See the text-indent property definition in CSS2." name="textIndent" />
        <variable citdl="DOMString" doc="See the text-shadow property definition in CSS2." name="textShadow" />
        <variable citdl="DOMString" doc="See the text-transform property definition in CSS2." name="textTransform" />
        <variable citdl="DOMString" doc="See the top property definition in CSS2." name="top" />
        <variable citdl="DOMString" doc="See the unicode-bidi property definition in CSS2." name="unicodeBidi" />
        <variable citdl="DOMString" doc="See the vertical-align property definition in CSS2." name="verticalAlign" />
        <variable citdl="DOMString" doc="See the visibility property definition in CSS2." name="visibility" />
        <variable citdl="DOMString" doc="See the voice-family property definition in CSS2." name="voiceFamily" />
        <variable citdl="DOMString" doc="See the volume property definition in CSS2." name="volume" />
        <variable citdl="DOMString" doc="See the white-space property definition in CSS2." name="whiteSpace" />
        <variable citdl="DOMString" doc="See the widows property definition in CSS2." name="widows" />
        <variable citdl="DOMString" doc="See the width property definition in CSS2." name="width" />
        <variable citdl="DOMString" doc="See the word-spacing property definition in CSS2." name="wordSpacing" />
        <variable citdl="DOMString" doc="See the z-index property definition in CSS2." name="zIndex" />
      </scope>
      <scope doc="The RGBColor interface is used to represent any RGB color&#xA;value. This interface reflects the values in the underlying&#xA;style property." ilk="class" name="RGBColor">
        <variable citdl="CSSPrimitiveValue" doc="This attribute is used for the red value of the RGB color." name="red" />
        <variable citdl="CSSPrimitiveValue" doc="This attribute is used for the green value of the RGB color." name="green" />
        <variable citdl="CSSPrimitiveValue" doc="This attribute is used for the blue value of the RGB color." name="blue" />
      </scope>
      <scope classrefs="UIEvent" doc="The MouseEvent interface provides specific contextual&#xA;information associated with Mouse events. The detail&#xA;attribute inherited from UIEvent indicates the number of&#xA;times a mouse button has been pressed and released over the&#xA;same screen location during a user action." ilk="class" name="MouseEvent">
        <variable citdl="Number" doc="The horizontal coordinate at which the event occurred&#xA;relative to the origin of the screen coordinate system." name="screenX" />
        <variable citdl="Number" doc="The vertical coordinate at which the event occurred relative&#xA;to the origin of the screen coordinate system." name="screenY" />
        <variable citdl="Number" doc="The horizontal coordinate at which the event occurred&#xA;relative to the DOM implementation&apos;s client area." name="clientX" />
        <variable citdl="Number" doc="The vertical coordinate at which the event occurred relative&#xA;to the DOM implementation&apos;s client area." name="clientY" />
        <variable citdl="Boolean" doc="Used to indicate whether the &apos;ctrl&apos; key was depressed during&#xA;the firing of the event." name="ctrlKey" />
        <variable citdl="Boolean" doc="Used to indicate whether the &apos;shift&apos; key was depressed&#xA;during the firing of the event." name="shiftKey" />
        <variable citdl="Boolean" doc="Used to indicate whether the &apos;alt&apos; key was depressed during&#xA;the firing of the event. On some platforms this key may map&#xA;to an alternative key name." name="altKey" />
        <variable citdl="Boolean" doc="Used to indicate whether the &apos;meta&apos; key was depressed during&#xA;the firing of the event. On some platforms this key may map&#xA;to an alternative key name." name="metaKey" />
        <variable citdl="Number" doc="During mouse events caused by the depression or release of a&#xA;mouse button, button is used to indicate which mouse button&#xA;changed state. The values for button range from zero to&#xA;indicate the left button of the mouse, one to indicate the&#xA;middle button if present, and two to indicate the right&#xA;button." name="button" />
        <variable citdl="EventTarget" doc="Used to identify a secondary EventTarget related to a UI&#xA;event. Currently this attribute is used with the mouseover&#xA;event to indicate the EventTarget which the pointing device&#xA;exited and with the mouseout event to indicate the&#xA;EventTarget which the pointing device entered." name="relatedTarget" />
        <scope doc="The initMouseEvent method is used to initialize the value of&#xA;a MouseEvent created through the DocumentEvent interface.&#xA;This method may only be called before the MouseEvent has&#xA;been dispatched via the dispatchEvent method, though it may&#xA;be called multiple times during that phase if necessary." ilk="function" name="initMouseEvent" signature="initMouseEvent(typeArg, canBubbleArg, cancelableArg, viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg, ctrlKeyArg, altKeyArg, shiftKeyArg, metaKeyArg, buttonArg, relatedTargetArg)">
          <variable citdl="DOMString" ilk="argument" name="typeArg" />
          <variable citdl="Boolean" ilk="argument" name="canBubbleArg" />
          <variable citdl="Boolean" ilk="argument" name="cancelableArg" />
          <variable citdl="views::AbstractView" ilk="argument" name="viewArg" />
          <variable citdl="Number" ilk="argument" name="detailArg" />
          <variable citdl="Number" ilk="argument" name="screenXArg" />
          <variable citdl="Number" ilk="argument" name="screenYArg" />
          <variable citdl="Number" ilk="argument" name="clientXArg" />
          <variable citdl="Number" ilk="argument" name="clientYArg" />
          <variable citdl="Boolean" ilk="argument" name="ctrlKeyArg" />
          <variable citdl="Boolean" ilk="argument" name="altKeyArg" />
          <variable citdl="Boolean" ilk="argument" name="shiftKeyArg" />
          <variable citdl="Boolean" ilk="argument" name="metaKeyArg" />
          <variable citdl="Number" ilk="argument" name="buttonArg" />
          <variable citdl="EventTarget" ilk="argument" name="relatedTargetArg" />
        </scope>
      </scope>
      <scope classrefs="CSSRule" doc="The CSSUnknownRule interface represents an at-rule not&#xA;supported by this user agent." ilk="class" name="CSSUnknownRule" />
      <scope doc="A base interface that all views shall derive from." ilk="class" name="AbstractView">
        <variable citdl="DocumentView" doc="The source DocumentView of which this is an AbstractView." name="document" />
      </scope>
      <scope doc="The DocumentView interface is implemented by Document&#xA;objects in DOM implementations supporting DOM Views. It&#xA;provides an attribute to retrieve the default view of a&#xA;document." ilk="class" name="DocumentView">
        <variable citdl="AbstractView" doc="The default AbstractView for this Document , or null if none&#xA;available." name="defaultView" />
      </scope>
      <scope doc="The StyleSheet interface is the abstract base interface for&#xA;any type of style sheet. It represents a single style sheet&#xA;associated with a structured document." ilk="class" name="StyleSheet">
        <variable citdl="DOMString" doc="This specifies the style sheet language for this style&#xA;sheet. The style sheet language is specified as a content&#xA;type (e.g." name="type" />
        <variable citdl="Boolean" doc="false if the style sheet is applied to the document. true if&#xA;it is not." name="disabled" />
        <variable citdl="Node" doc="The node that associates this style sheet with the document.&#xA;For HTML, this may be the corresponding LINK or STYLE&#xA;element." name="ownerNode" />
        <variable citdl="StyleSheet" doc="For style sheet languages that support the concept of style&#xA;sheet inclusion, this attribute represents the including&#xA;style sheet, if one exists. If the style sheet is a top-&#xA;level style sheet, or the style sheet language does not&#xA;support inclusion, the value of this attribute is null." name="parentStyleSheet" />
        <variable citdl="DOMString" doc="If the style sheet is a linked style sheet, the value of its&#xA;attribute is its location. For inline style sheets, the&#xA;value of this attribute is null." name="href" />
        <variable citdl="DOMString" doc="The advisory title. The title is often specified in the&#xA;ownerNode." name="title" />
        <variable citdl="MediaList" doc="The intended destination media for style information. The&#xA;media is often specified in the ownerNode." name="media" />
      </scope>
      <scope classrefs="stylesheets::StyleSheet" doc="The CSSStyleSheet interface is a concrete interface used to&#xA;represent a CSS style sheet i.e., a style sheet whose&#xA;content type is &quot;text/css&quot;." ilk="class" name="CSSStyleSheet">
        <variable citdl="CSSRule" doc="If this style sheet comes from an @import rule, the&#xA;ownerRule attribute will contain the CSSImportRule. In that&#xA;case, the ownerNode attribute in the StyleSheet interface&#xA;will be null." name="ownerRule" />
        <variable citdl="CSSRuleList" doc="The list of all CSS rules contained within the style sheet.&#xA;This includes both rule sets and at-rules." name="cssRules" />
        <scope doc="Used to insert a new rule into the style sheet. The new rule&#xA;now becomes part of the cascade." ilk="function" name="insertRule" returns="Number" signature="insertRule(rule, index)">
          <variable citdl="DOMString" ilk="argument" name="rule" />
          <variable citdl="Number" ilk="argument" name="index" />
        </scope>
        <scope doc="Used to delete a rule from the style sheet." ilk="function" name="deleteRule" signature="deleteRule(index)">
          <variable citdl="Number" ilk="argument" name="index" />
        </scope>
      </scope>
      <scope doc="The CSSRuleList interface provides the abstraction of an&#xA;ordered collection of CSS rules. The items in the&#xA;CSSRuleList are accessible via an integral index, starting&#xA;from 0." ilk="class" name="CSSRuleList">
        <variable citdl="Number" doc="The number of CSSRules in the list. The range of valid child&#xA;rule indices is 0 to length-1 inclusive." name="length" />
        <scope doc="Used to retrieve a CSS rule by ordinal index. The order in&#xA;this collection represents the order of the rules in the CSS&#xA;style sheet." ilk="function" name="item" returns="CSSRule" signature="item(index)">
          <variable citdl="Number" ilk="argument" name="index" />
        </scope>
      </scope>
      <scope doc="The Rect interface is used to represent any rect value. This&#xA;interface reflects the values in the underlying style&#xA;property." ilk="class" name="Rect">
        <variable citdl="CSSPrimitiveValue" doc="This attribute is used for the top of the rect." name="top" />
        <variable citdl="CSSPrimitiveValue" doc="This attribute is used for the right of the rect." name="right" />
        <variable citdl="CSSPrimitiveValue" doc="This attribute is used for the bottom of the rect." name="bottom" />
        <variable citdl="CSSPrimitiveValue" doc="This attribute is used for the left of the rect." name="left" />
      </scope>
      <scope classrefs="Node" doc="This interface represents an entity, either parsed or&#xA;unparsed, in an XML document. Note that this models the&#xA;entity itself not the entity declaration." ilk="class" name="Entity">
        <variable citdl="DOMString" doc="The public identifier associated with the entity, if&#xA;specified. If the public identifier was not specified, this&#xA;is null." name="publicId" />
        <variable citdl="DOMString" doc="The system identifier associated with the entity, if&#xA;specified. If the system identifier was not specified, this&#xA;is null." name="systemId" />
        <variable citdl="DOMString" doc="For unparsed entities, the name of the notation for the&#xA;entity. For parsed entities, this is null." name="notationName" />
      </scope>
      <scope classrefs="Node" doc="The ProcessingInstruction interface represents a &quot;processing&#xA;instruction&quot;, used in XML as a way to keep processor-&#xA;specific information in the text of the document." ilk="class" name="ProcessingInstruction">
        <variable citdl="DOMString" doc="The target of this processing instruction. XML defines this&#xA;as being the first token following the markup that begins&#xA;the processing instruction." name="target" />
        <variable citdl="DOMString" doc="The content of this processing instruction. This is from the&#xA;first non white space character after the target to the&#xA;character immediately preceding the ?&gt;." name="data" />
      </scope>
      <scope classrefs="Node" doc="EntityReference objects may be inserted into the structure&#xA;model when an entity reference is in the source document, or&#xA;when the user wishes to insert an entity reference. Note&#xA;that character references and references to predefined&#xA;entities are considered to be expanded by the HTML or XML&#xA;processor so that characters are represented by their&#xA;Unicode equivalent rather than by an entity reference." ilk="class" name="EntityReference" />
      <scope doc="DOM operations only raise exceptions in &quot;exceptional&quot;&#xA;circumstances, i.e., when an operation is impossible to&#xA;perform (either for logical reasons, because data is lost,&#xA;or because the implementation has become unstable). In&#xA;general, DOM methods return specific error values in&#xA;ordinary processing situations, such as out-of-bound errors&#xA;when using NodeList." ilk="class" name="DOMException">
        <variable citdl="unsigned short &#xA;  " name="code" />
        <variable attributes="static" citdl="Number" doc="If index or size is negative, or greater than the allowed&#xA;value" name="INDEX_SIZE_ERR" />
        <variable attributes="static" citdl="Number" doc="If the specified range of text does not fit into a DOMString" name="DOMSTRING_SIZE_ERR" />
        <variable attributes="static" citdl="Number" doc="If any node is inserted somewhere it doesn&apos;t belong" name="HIERARCHY_REQUEST_ERR" />
        <variable attributes="static" citdl="Number" doc="If a node is used in a different document than the one that&#xA;created it (that doesn&apos;t support it)" name="WRONG_DOCUMENT_ERR" />
        <variable attributes="static" citdl="Number" doc="If an invalid or illegal character is specified, such as in&#xA;a name. See production 2 in the XML specification for the&#xA;definition of a legal character, and production 5 for the&#xA;definition of a legal name character." name="INVALID_CHARACTER_ERR" />
        <variable attributes="static" citdl="Number" doc="If data is specified for a node which does not support data" name="NO_DATA_ALLOWED_ERR" />
        <variable attributes="static" citdl="Number" doc="If an attempt is made to modify an object where&#xA;modifications are not allowed" name="NO_MODIFICATION_ALLOWED_ERR" />
        <variable attributes="static" citdl="Number" doc="If an attempt is made to reference a node in a context where&#xA;it does not exist" name="NOT_FOUND_ERR" />
        <variable attributes="static" citdl="Number" doc="If the implementation does not support the requested type of&#xA;object or operation." name="NOT_SUPPORTED_ERR" />
        <variable attributes="static" citdl="Number" doc="If an attempt is made to add an attribute that is already in&#xA;use elsewhere" name="INUSE_ATTRIBUTE_ERR" />
        <variable attributes="static" citdl="Number" doc="If an attempt is made to use an object that is not, or is no&#xA;longer, usable." name="INVALID_STATE_ERR" />
        <variable attributes="static" citdl="Number" doc="If an invalid or illegal string is specified." name="SYNTAX_ERR" />
        <variable attributes="static" citdl="Number" doc="If an attempt is made to modify the type of the underlying&#xA;object." name="INVALID_MODIFICATION_ERR" />
        <variable attributes="static" citdl="Number" doc="If an attempt is made to create or change an object in a way&#xA;which is incorrect with regard to namespaces." name="NAMESPACE_ERR" />
        <variable attributes="static" citdl="Number" doc="If a parameter or an operation is not supported by the&#xA;underlying object." name="INVALID_ACCESS_ERR" />
      </scope>
      <scope classrefs="Node" doc="Each Document has a doctype attribute whose value is either&#xA;null or a DocumentType object. The DocumentType interface in&#xA;the DOM Core provides an interface to the list of entities&#xA;that are defined for the document, and little else because&#xA;the effect of namespaces and the various XML schema efforts&#xA;on DTD representation are not clearly understood as of this&#xA;writing." ilk="class" name="DocumentType">
        <variable citdl="DOMString" doc="The name of DTD; i.e., the name immediately following the&#xA;DOCTYPE keyword." name="name" />
        <variable citdl="NamedNodeMap" doc="A NamedNodeMap containing the general entities, both&#xA;external and internal, declared in the DTD. Parameter&#xA;entities are not contained." name="entities" />
        <variable citdl="NamedNodeMap" doc="A NamedNodeMap containing the notations declared in the DTD.&#xA;Duplicates are discarded." name="notations" />
        <variable citdl="DOMString" doc="The public identifier of the external subset." name="publicId" />
        <variable citdl="DOMString" doc="The system identifier of the external subset." name="systemId" />
        <variable citdl="DOMString" doc="The internal subset as a string. The actual content returned&#xA;depends on how much information is available to the&#xA;implementation." name="internalSubset" />
      </scope>
      <scope classrefs="CSSRule" doc="The CSSCharsetRule interface represents a @charset rule in a&#xA;CSS style sheet. The value of the encoding attribute does&#xA;not affect the encoding of text data in the DOM objects;&#xA;this encoding is always UTF-16." ilk="class" name="CSSCharsetRule">
        <variable citdl="DOMString" doc="The encoding information used in this @charset rule." name="encoding" />
      </scope>
      <scope classrefs="CSSRule" doc="The CSSImportRule interface represents a @import rule within&#xA;a CSS style sheet. The @import rule is used to import style&#xA;rules from other style sheets." ilk="class" name="CSSImportRule">
        <variable citdl="DOMString" doc="The location of the style sheet to be imported. The&#xA;attribute will not contain the &quot;url(...)&quot; specifier around&#xA;the URI." name="href" />
        <variable citdl="stylesheets::MediaList" doc="A list of media types for which this style sheet may be&#xA;used." name="media" />
        <variable citdl="CSSStyleSheet" doc="The style sheet referred to by this rule, if it has been&#xA;loaded. The value of this attribute is null if the style&#xA;sheet has not yet been loaded or if it will not be loaded&#xA;(e.g." name="styleSheet" />
      </scope>
      <scope classrefs="CSS2Properties" doc="The CSSStyleDeclaration interface represents a single CSS&#xA;declaration block. This interface may be used to determine&#xA;the style properties currently set in a block or to set&#xA;style properties explicitly within the block." ilk="class" name="CSSStyleDeclaration">
        <variable citdl="DOMString" doc="The parsable textual representation of the declaration block&#xA;(excluding the surrounding curly braces). Setting this&#xA;attribute will result in the parsing of the new value and&#xA;resetting of all the properties in the declaration block&#xA;including the removal or addition of properties." name="cssText" />
        <variable citdl="Number" doc="The number of properties that have been explicitly set in&#xA;this declaration block. The range of valid indices is 0 to&#xA;length-1 inclusive." name="length" />
        <variable citdl="CSSRule" doc="The CSS rule that contains this declaration block or null if&#xA;this CSSStyleDeclaration is not attached to a CSSRule." name="parentRule" />
        <scope doc="Used to retrieve the value of a CSS property if it has been&#xA;explicitly set within this declaration block." ilk="function" name="getPropertyValue" returns="DOMString" signature="getPropertyValue(propertyName)">
          <variable citdl="DOMString" ilk="argument" name="propertyName" />
        </scope>
        <scope doc="Used to retrieve the object representation of the value of a&#xA;CSS property if it has been explicitly set within this&#xA;declaration block. This method returns null if the property&#xA;is a shorthand property." ilk="function" name="getPropertyCSSValue" returns="CSSValue" signature="getPropertyCSSValue(propertyName)">
          <variable citdl="DOMString" ilk="argument" name="propertyName" />
        </scope>
        <scope doc="Used to remove a CSS property if it has been explicitly set&#xA;within this declaration block." ilk="function" name="removeProperty" returns="DOMString" signature="removeProperty(propertyName)">
          <variable citdl="DOMString" ilk="argument" name="propertyName" />
        </scope>
        <scope doc="Used to retrieve the priority of a CSS property (e.g. the&#xA;&quot;important&quot; qualifier) if the property has been explicitly&#xA;set in this declaration block." ilk="function" name="getPropertyPriority" returns="DOMString" signature="getPropertyPriority(propertyName)">
          <variable citdl="DOMString" ilk="argument" name="propertyName" />
        </scope>
        <scope doc="Used to set a property value and priority within this&#xA;declaration block." ilk="function" name="setProperty" signature="setProperty(propertyName, value, priority)">
          <variable citdl="DOMString" ilk="argument" name="propertyName" />
          <variable citdl="DOMString" ilk="argument" name="value" />
          <variable citdl="DOMString" ilk="argument" name="priority" />
        </scope>
        <scope doc="Used to retrieve the properties that have been explicitly&#xA;set in this declaration block. The order of the properties&#xA;retrieved using this method does not have to be the order in&#xA;which they were set." ilk="function" name="item" returns="DOMString" signature="item(index)">
          <variable citdl="Number" ilk="argument" name="index" />
        </scope>
      </scope>
      <scope doc="The Node interface is the primary datatype for the entire&#xA;Document Object Model. It represents a single node in the&#xA;document tree." ilk="class" name="Node">
        <variable attributes="static" citdl="Number" doc="The node is an Element." name="ELEMENT_NODE" />
        <variable attributes="static" citdl="Number" doc="The node is an Attr." name="ATTRIBUTE_NODE" />
        <variable attributes="static" citdl="Number" doc="The node is a Text node." name="TEXT_NODE" />
        <variable attributes="static" citdl="Number" doc="The node is a CDATASection." name="CDATA_SECTION_NODE" />
        <variable attributes="static" citdl="Number" doc="The node is an EntityReference." name="ENTITY_REFERENCE_NODE" />
        <variable attributes="static" citdl="Number" doc="The node is an Entity." name="ENTITY_NODE" />
        <variable attributes="static" citdl="Number" doc="The node is a ProcessingInstruction." name="PROCESSING_INSTRUCTION_NODE" />
        <variable attributes="static" citdl="Number" doc="The node is a Comment." name="COMMENT_NODE" />
        <variable attributes="static" citdl="Number" doc="The node is a Document." name="DOCUMENT_NODE" />
        <variable attributes="static" citdl="Number" doc="The node is a DocumentType." name="DOCUMENT_TYPE_NODE" />
        <variable attributes="static" citdl="Number" doc="The node is a DocumentFragment." name="DOCUMENT_FRAGMENT_NODE" />
        <variable attributes="static" citdl="Number" doc="The node is a Notation." name="NOTATION_NODE" />
        <variable citdl="DOMString" doc="The name of this node, depending on its type; see the table&#xA;above." name="nodeName" />
        <variable citdl="DOMString" doc="The value of this node, depending on its type; see the table&#xA;above. When it is defined to be null , setting it has no&#xA;effect." name="nodeValue" />
        <variable citdl="Number" doc="A code representing the type of the underlying object, as&#xA;defined above." name="nodeType" />
        <variable citdl="Node" doc="The parent of this node. All nodes, except Attr , Document ,&#xA;DocumentFragment , Entity , and Notation may have a parent." name="parentNode" />
        <variable citdl="NodeList" doc="A NodeList that contains all children of this node. If there&#xA;are no children, this is a NodeList containing no nodes." name="childNodes" />
        <variable citdl="Node" doc="The first child of this node. If there is no such node, this&#xA;returns null." name="firstChild" />
        <variable citdl="Node" doc="The last child of this node. If there is no such node, this&#xA;returns null." name="lastChild" />
        <variable citdl="Node" doc="The node immediately preceding this node. If there is no&#xA;such node, this returns null." name="previousSibling" />
        <variable citdl="Node" doc="The node immediately following this node. If there is no&#xA;such node, this returns null." name="nextSibling" />
        <variable citdl="NamedNodeMap" doc="A NamedNodeMap containing the attributes of this node (if it&#xA;is an Element ) or null otherwise." name="attributes" />
        <variable citdl="Document" doc="The Document object associated with this node. This is also&#xA;the Document object used to create new nodes." name="ownerDocument" />
        <variable citdl="DOMString" doc="The namespace URI of this node, or null if it is&#xA;unspecified. This is not a computed value that is the result&#xA;of a namespace lookup based on an examination of the&#xA;namespace declarations in scope." name="namespaceURI" />
        <variable citdl="DOMString" doc="The namespace prefix of this node, or null if it is&#xA;unspecified. Note that setting this attribute, when&#xA;permitted, changes the nodeName attribute, which holds the&#xA;qualified name , as well as the tagName and name attributes&#xA;of the Element and Attr interfaces, when applicable." name="prefix" />
        <variable citdl="DOMString" doc="Returns the local part of the qualified name of this node.&#xA;For nodes of any type other than ELEMENT_NODE and&#xA;ATTRIBUTE_NODE and nodes created with a DOM Level 1 method,&#xA;such as createElement from the Document interface, this is&#xA;always null." name="localName" />
        <scope doc="Inserts the node newChild before the existing child node&#xA;refChild. If refChild is null , insert newChild at the end&#xA;of the list of children." ilk="function" name="insertBefore" returns="Node" signature="insertBefore(newChild, refChild)">
          <variable citdl="Node" ilk="argument" name="newChild" />
          <variable citdl="Node" ilk="argument" name="refChild" />
        </scope>
        <scope doc="Replaces the child node oldChild with newChild in the list&#xA;of children, and returns the oldChild node. If newChild is a&#xA;DocumentFragment object, oldChild is replaced by all of the&#xA;DocumentFragment children, which are inserted in the same&#xA;order." ilk="function" name="replaceChild" returns="Node" signature="replaceChild(newChild, oldChild)">
          <variable citdl="Node" ilk="argument" name="newChild" />
          <variable citdl="Node" ilk="argument" name="oldChild" />
        </scope>
        <scope doc="Removes the child node indicated by oldChild from the list&#xA;of children, and returns it." ilk="function" name="removeChild" returns="Node" signature="removeChild(oldChild)">
          <variable citdl="Node" ilk="argument" name="oldChild" />
        </scope>
        <scope doc="Adds the node newChild to the end of the list of children of&#xA;this node. If the newChild is already in the tree, it is&#xA;first removed." ilk="function" name="appendChild" returns="Node" signature="appendChild(newChild)">
          <variable citdl="Node" ilk="argument" name="newChild" />
        </scope>
        <scope doc="Returns whether this node has any children." ilk="function" name="hasChildNodes" returns="Boolean" signature="hasChildNodes()" />
        <scope doc="Returns a duplicate of this node, i.e., serves as a generic&#xA;copy constructor for nodes. The duplicate node has no&#xA;parent; ( parentNode is null.)." ilk="function" name="cloneNode" returns="Node" signature="cloneNode(deep)">
          <variable citdl="Boolean" ilk="argument" name="deep" />
        </scope>
        <scope doc="Puts all Text nodes in the full depth of the sub-tree&#xA;underneath this Node , including attribute nodes, into a&#xA;&quot;normal&quot; form where only structure (e.g., elements,&#xA;comments, processing instructions, CDATA sections, and&#xA;entity references) separates Text nodes, i.e., there are&#xA;neither adjacent Text nodes nor empty Text nodes. This can&#xA;be used to ensure that the DOM view of a document is the&#xA;same as if it were saved and re-loaded, and is useful when&#xA;operations (such as XPointer lookups) that depend on a&#xA;particular document tree structure are to be used." ilk="function" name="normalize" signature="normalize()" />
        <scope doc="Tests whether the DOM implementation implements a specific&#xA;feature and that feature is supported by this node." ilk="function" name="isSupported" returns="Boolean" signature="isSupported(feature, version)">
          <variable citdl="DOMString" ilk="argument" name="feature" />
          <variable citdl="DOMString" ilk="argument" name="version" />
        </scope>
        <scope doc="Returns whether this node (if it is an element) has any&#xA;attributes." ilk="function" name="hasAttributes" returns="Boolean" signature="hasAttributes()" />
      </scope>
      <scope doc="The EventCapturer interface is implemented by Node &apos;s which&#xA;are designated as being able to capture events." ilk="class" name="EventCapturer">
        <scope doc="This method is used when a capturing Node wishes to begin&#xA;capturing a particular type of event." ilk="function" name="captureEvent" signature="captureEvent(type)">
          <variable citdl="DOMString" ilk="argument" name="type" />
        </scope>
        <scope doc="This method is used when a capturing Node wishes to cease&#xA;capturing a particular type of event." ilk="function" name="releaseEvent" signature="releaseEvent(type)">
          <variable citdl="DOMString" ilk="argument" name="type" />
        </scope>
        <scope doc="This method is called during the handling of an event by a&#xA;capturing Node to continue the event&apos;s flow to additional&#xA;event handlers, or if none are present, to the event&apos;s&#xA;target." ilk="function" name="routeEvent" signature="routeEvent()" />
      </scope>
      <scope ilk="class" name="NSInlineEventHandlers">
        <scope ilk="function" name="onabort" />
        <scope ilk="function" name="onblur" />
        <scope ilk="function" name="oncanplay" />
        <scope ilk="function" name="oncanplaythrough" />
        <scope ilk="function" name="onchange" />
        <scope ilk="function" name="onclick" />
        <scope ilk="function" name="oncontextmenu" />
        <scope ilk="function" name="oncuechange" />
        <scope ilk="function" name="ondblclick" />
        <scope ilk="function" name="ondrag" />
        <scope ilk="function" name="ondragend" />
        <scope ilk="function" name="ondragenter" />
        <scope ilk="function" name="ondragleave" />
        <scope ilk="function" name="ondragover" />
        <scope ilk="function" name="ondragstart" />
        <scope ilk="function" name="ondrop" />
        <scope ilk="function" name="ondurationchange" />
        <scope ilk="function" name="onemptied" />
        <scope ilk="function" name="onended" />
        <scope ilk="function" name="onerror" />
        <scope ilk="function" name="onfocus" />
        <scope ilk="function" name="oninput" />
        <scope ilk="function" name="oninvalid" />
        <scope ilk="function" name="onkeydown" />
        <scope ilk="function" name="onkeypress" />
        <scope ilk="function" name="onkeyup" />
        <scope ilk="function" name="onload" />
        <scope ilk="function" name="onloadeddata" />
        <scope ilk="function" name="onloadedmetadata" />
        <scope ilk="function" name="onloadstart" />
        <scope ilk="function" name="onmousedown" />
        <scope ilk="function" name="onmousemove" />
        <scope ilk="function" name="onmouseout" />
        <scope ilk="function" name="onmouseover" />
        <scope ilk="function" name="onmouseup" />
        <scope ilk="function" name="onmousewheel" />
        <scope ilk="function" name="onpause" />
        <scope ilk="function" name="onplay" />
        <scope ilk="function" name="onplaying" />
        <scope ilk="function" name="onprogress" />
        <scope ilk="function" name="onratechange" />
        <scope ilk="function" name="onreset" />
        <scope ilk="function" name="onscroll" />
        <scope ilk="function" name="onseeked" />
        <scope ilk="function" name="onseeking" />
        <scope ilk="function" name="onselect" />
        <scope ilk="function" name="onshow" />
        <scope ilk="function" name="onstalled" />
        <scope ilk="function" name="onsubmit" />
        <scope ilk="function" name="onsuspend" />
        <scope ilk="function" name="ontimeupdate" />
        <scope ilk="function" name="onvolumechange" />
        <scope ilk="function" name="onwaiting" />
      </scope>
      <scope classrefs="NSInlineEventHandlers" ilk="class" name="NSWindowBodyFramesetInlineEventHandlers">
        <scope ilk="function" name="onafterprint" />
        <scope ilk="function" name="onbeforeprint" />
        <scope ilk="function" name="onbeforeunload" />
        <scope ilk="function" name="onhashchange" />
        <scope ilk="function" name="onmessage" />
        <scope ilk="function" name="onoffline" />
        <scope ilk="function" name="ononline" />
        <scope ilk="function" name="onpagehide" />
        <scope ilk="function" name="onpageshow" />
        <scope ilk="function" name="onpopstate" />
        <scope ilk="function" name="onresize" />
        <scope ilk="function" name="onscroll" />
        <scope ilk="function" name="onstorage" />
        <scope ilk="function" name="onunload" />
      </scope>
      <scope classrefs="NSInlineEventHandlers" doc="The EventTarget interface is implemented by all Nodes in an&#xA;implementation which supports the DOM Event Model.&#xA;Therefore, this interface can be obtained by using binding-&#xA;specific casting methods on an instance of the Node&#xA;interface." ilk="class" name="EventTarget">
        <scope doc="This method allows the registration of event listeners on&#xA;the event target. If an EventListener is added to an&#xA;EventTarget while it is processing an event, it will not be&#xA;triggered by the current actions but may be triggered during&#xA;a later stage of event flow, such as the bubbling phase." ilk="function" name="addEventListener" signature="addEventListener(type, listener, useCapture)">
          <variable citdl="DOMString" ilk="argument" name="type" />
          <variable citdl="EventListener" ilk="argument" name="listener" />
          <variable citdl="Boolean" ilk="argument" name="useCapture" />
        </scope>
        <scope doc="This method allows the removal of event listeners from the&#xA;event target. If an EventListener is removed from an&#xA;EventTarget while it is processing an event, it will not be&#xA;triggered by the current actions." ilk="function" name="removeEventListener" signature="removeEventListener(type, listener, useCapture)">
          <variable citdl="DOMString" ilk="argument" name="type" />
          <variable citdl="EventListener" ilk="argument" name="listener" />
          <variable citdl="Boolean" ilk="argument" name="useCapture" />
        </scope>
        <scope doc="This method allows the dispatch of events into the&#xA;implementations event model. Events dispatched in this&#xA;manner will have the same capturing and bubbling behavior as&#xA;events dispatched directly by the implementation." ilk="function" name="dispatchEvent" returns="Boolean" signature="dispatchEvent(evt)">
          <variable citdl="Event" ilk="argument" name="evt" />
        </scope>
      </scope>
      <scope doc="An HTMLCollection is a list of nodes. An individual node may&#xA;be accessed by either ordinal index or the node&apos;s name or id&#xA;attributes." ilk="class" name="HTMLCollection">
        <variable citdl="Number" doc="This attribute specifies the length or size of the list." name="length" />
        <scope doc="This method retrieves a node specified by ordinal index.&#xA;Nodes are numbered in tree order (depth-first traversal&#xA;order)." ilk="function" name="item" returns="Node" signature="item(index)">
          <variable citdl="Number" ilk="argument" name="index" />
        </scope>
        <scope doc="This method retrieves a Node using a name. With documents,&#xA;it first searches for a Node with a matching id attribute." ilk="function" name="namedItem" returns="Node" signature="namedItem(name)">
          <variable citdl="DOMString" ilk="argument" name="name" />
        </scope>
      </scope>
      <scope doc="An HTMLOptionsCollection is a list of nodes representing&#xA;HTML option element. An individual node may be accessed by&#xA;either ordinal index or the node&apos;s name or id attributes." ilk="class" name="HTMLOptionsCollection">
        <variable citdl="Number" doc="This attribute specifies the length or size of the list." name="length" />
        <scope doc="This method retrieves a node specified by ordinal index.&#xA;Nodes are numbered in tree order (depth-first traversal&#xA;order)." ilk="function" name="item" returns="Node" signature="item(index)">
          <variable citdl="Number" ilk="argument" name="index" />
        </scope>
        <scope doc="This method retrieves a Node using a name. It first searches&#xA;for a Node with a matching id attribute." ilk="function" name="namedItem" returns="Node" signature="namedItem(name)">
          <variable citdl="DOMString" ilk="argument" name="name" />
        </scope>
      </scope>
      <scope classrefs="Document DocumentEvent" doc="An HTMLDocument is the root of the HTML hierarchy and holds&#xA;the entire content. Besides providing access to the&#xA;hierarchy, it also provides some convenience methods for&#xA;accessing certain sets of information from the document." ilk="class" name="HTMLDocument">
        <variable citdl="DOMString" doc="The title of a document as specified by the TITLE element in&#xA;the head of the document." name="title" />
        <variable citdl="DOMString" doc="Returns the URI of the page that linked to this page. The&#xA;value is an empty string if the user navigated to the page&#xA;directly (not through a link, but, for example, via a&#xA;bookmark)." name="referrer" />
        <variable citdl="DOMString" doc="The domain name of the server that served the document, or&#xA;null if the server cannot be identified by a domain name." name="domain" />
        <variable citdl="DOMString" doc="The absolute URI of the document." name="URL" />
        <variable citdl="HTMLBodyElement" doc="The element that contains the content for the document. In&#xA;documents with BODY contents, returns the BODY element." name="body" />
        <variable citdl="HTMLCollection" doc="A collection of all the IMG elements in a document. The&#xA;behavior is limited to IMG elements for backwards&#xA;compatibility." name="images" />
        <variable citdl="HTMLCollection" doc="A collection of all the OBJECT elements that include applets&#xA;and APPLET ( deprecated ) elements in a document." name="applets" />
        <variable citdl="HTMLCollection" doc="A collection of all AREA elements and anchor ( A ) elements&#xA;in a document with a value for the href attribute." name="links" />
        <variable citdl="HTMLCollection" doc="A collection of all the forms of a document." name="forms" />
        <variable citdl="HTMLCollection" doc="A collection of all the anchor ( A ) elements in a document&#xA;with a value for the name attribute. For reasons of backward&#xA;compatibility, the returned set of anchors only contains&#xA;those anchors created with the name attribute, not those&#xA;created with the id attribute." name="anchors" />
        <variable citdl="DOMString" doc="This mutable string attribute denotes persistent state&#xA;information that (1) is associated with the current frame or&#xA;document and (2) is composed of information described by the&#xA;cookies non-terminal of , Section 4.2.2. If no persistent&#xA;state information is available for the current frame or&#xA;document document, then this property&apos;s value is an empty&#xA;string." name="cookie" />
        <scope doc="Open a document stream for writing. If a document exists in&#xA;the target, this method clears it." ilk="function" name="open" signature="open()" />
        <scope doc="Closes a document stream opened by open() and forces&#xA;rendering." ilk="function" name="close" signature="close()" />
        <scope doc="Write a string of text to a document stream opened by open(). Note that the function will produce a document which is&#xA;not necessarily driven by a DTD and therefore might be&#xA;produce an invalid result in the context of the document." ilk="function" name="write" signature="write(text)">
          <variable citdl="DOMString" ilk="argument" name="text" />
        </scope>
        <scope doc="Write a string of text followed by a newline character to a&#xA;document stream opened by open()." ilk="function" name="writeln" signature="writeln(text)">
          <variable citdl="DOMString" ilk="argument" name="text" />
        </scope>
        <scope doc="With documents, this method returns the (possibly empty)&#xA;collection of elements whose name value is given by&#xA;elementName. In documents, this methods only return the&#xA;(possibly empty) collection of form controls with matching&#xA;name." ilk="function" name="getElementsByName" returns="NodeList" signature="getElementsByName(elementName)">
          <variable citdl="DOMString" ilk="argument" name="elementName" />
        </scope>
      </scope>
      <scope classrefs="Element" doc="All HTML element interfaces derive from this class. Elements&#xA;that only expose the HTML core attributes are represented by&#xA;the base HTMLElement interface." ilk="class" name="HTMLElement">
        <variable citdl="DOMString" doc="The element&apos;s identifier. See the id attribute definition in&#xA;HTML 4.01." name="id" />
        <variable citdl="DOMString" doc="The element&apos;s advisory title. See the title attribute&#xA;definition in HTML 4.01." name="title" />
        <variable citdl="DOMString" doc="Language code defined in RFC 1766. See the lang attribute&#xA;definition in HTML 4.01." name="lang" />
        <variable citdl="DOMString" doc="Specifies the base direction of directionally neutral text&#xA;and the directionality of tables. See the dir attribute&#xA;definition in HTML 4.01." name="dir" />
        <variable citdl="DOMString" doc="The class attribute of the element. This attribute has been&#xA;renamed due to conflicts with the &quot;class&quot; keyword exposed by&#xA;many languages." name="className" />
      </scope>
      <scope classrefs="HTMLElement" doc="Root of an HTML document. See the HTML element definition in&#xA;HTML 4.01." ilk="class" name="HTMLHtmlElement">
        <variable citdl="DOMString" doc="Version information about the document&apos;s DTD. See the&#xA;version attribute definition in HTML 4.01." name="version" />
      </scope>
      <scope classrefs="HTMLElement" doc="Document head information. See the HEAD element definition&#xA;in HTML 4.01." ilk="class" name="HTMLHeadElement">
        <variable citdl="DOMString" doc="URI designating a metadata profile. See the profile&#xA;attribute definition in HTML 4.01." name="profile" />
      </scope>
      <scope classrefs="HTMLElement" doc="The LINK element specifies a link to an external resource,&#xA;and defines this document&apos;s relationship to that resource&#xA;(or vice versa). See the LINK element definition in HTML&#xA;4.01 (see also the LinkStyle interface in the StyleSheet&#xA;module )." ilk="class" name="HTMLLinkElement">
        <variable citdl="Boolean" doc="Enables/disables the link. This is currently only used for&#xA;style sheet links, and may be used to activate or deactivate&#xA;style sheets." name="disabled" />
        <variable citdl="DOMString" doc="The character encoding of the resource being linked to. See&#xA;the charset attribute definition in HTML 4.01." name="charset" />
        <variable citdl="DOMString" doc="The URI of the linked resource. See the href attribute&#xA;definition in HTML 4.01." name="href" />
        <variable citdl="DOMString" doc="Language code of the linked resource. See the hreflang&#xA;attribute definition in HTML 4.01." name="hreflang" />
        <variable citdl="DOMString" doc="Designed for use with one or more target media. See the&#xA;media attribute definition in HTML 4.01." name="media" />
        <variable citdl="DOMString" doc="Forward link type. See the rel attribute definition in HTML&#xA;4.01." name="rel" />
        <variable citdl="DOMString" doc="Reverse link type. See the rev attribute definition in HTML&#xA;4.01." name="rev" />
        <variable citdl="DOMString" doc="Frame to render the resource in. See the target attribute&#xA;definition in HTML 4.01." name="target" />
        <variable citdl="DOMString" doc="Advisory content type. See the type attribute definition in&#xA;HTML 4.01." name="type" />
      </scope>
      <scope classrefs="HTMLElement" doc="The document title. See the TITLE element definition in HTML&#xA;4.01." ilk="class" name="HTMLTitleElement">
        <variable citdl="DOMString" doc="The specified title as a string." name="text" />
      </scope>
      <scope classrefs="HTMLElement" doc="This contains generic meta-information about the document.&#xA;See the META element definition in HTML 4.01." ilk="class" name="HTMLMetaElement">
        <variable citdl="DOMString" doc="Associated information. See the content attribute definition&#xA;in HTML 4.01." name="content" />
        <variable citdl="DOMString" doc="HTTP response header name. See the http-equiv attribute&#xA;definition in HTML 4.01." name="httpEquiv" />
        <variable citdl="DOMString" doc="Meta information name. See the name attribute definition in&#xA;HTML 4.01." name="name" />
        <variable citdl="DOMString" doc="Select form of content. See the scheme attribute definition&#xA;in HTML 4.01." name="scheme" />
      </scope>
      <scope classrefs="HTMLElement" doc="Document base URI. See the BASE element definition in HTML&#xA;4.01." ilk="class" name="HTMLBaseElement">
        <variable citdl="DOMString" doc="The base URI. See the href attribute definition in HTML&#xA;4.01." name="href" />
        <variable citdl="DOMString" doc="The default target frame. See the target attribute&#xA;definition in HTML 4.01." name="target" />
      </scope>
      <scope classrefs="HTMLElement" doc="This element is used for single-line text input. See the&#xA;ISINDEX element definition in HTML 4.01." ilk="class" name="HTMLIsIndexElement">
        <variable citdl="HTMLFormElement" doc="Returns the FORM element containing this control. Returns&#xA;null if this control is not within the context of a form." name="form" />
        <variable citdl="DOMString" doc="The prompt message. See the prompt attribute definition in&#xA;HTML 4.01." name="prompt" />
      </scope>
      <scope classrefs="HTMLElement" doc="Style information. See the STYLE element definition in HTML&#xA;4.01, the CSS module and the LinkStyle interface in the&#xA;StyleSheets module." ilk="class" name="HTMLStyleElement">
        <variable citdl="Boolean" doc="Enables/disables the style sheet." name="disabled" />
        <variable citdl="DOMString" doc="Designed for use with one or more target media. See the&#xA;media attribute definition in HTML 4.01." name="media" />
        <variable citdl="DOMString" doc="The content type of the style sheet language. See the type&#xA;attribute definition in HTML 4.01." name="type" />
      </scope>
      <scope classrefs="HTMLElement NSWindowBodyFramesetInlineEventHandlers" doc="The HTML document body. This element is always present in&#xA;the DOM API, even if the tags are not present in the source&#xA;document." ilk="class" name="HTMLBodyElement">
        <variable citdl="DOMString" doc="Color of active links (after mouse-button down, but before&#xA;mouse-button up). See the alink attribute definition in HTML&#xA;4.01." name="aLink" />
        <variable citdl="DOMString" doc="URI of the background texture tile image. See the background&#xA;attribute definition in HTML 4.01." name="background" />
        <variable citdl="DOMString" doc="Document background color. See the bgcolor attribute&#xA;definition in HTML 4.01." name="bgColor" />
        <variable citdl="DOMString" doc="Color of links that are not active and unvisited. See the&#xA;link attribute definition in HTML 4.01." name="link" />
        <variable citdl="DOMString" doc="Document text color. See the text attribute definition in&#xA;HTML 4.01." name="text" />
        <variable citdl="DOMString" doc="Color of links that have been visited by the user. See the&#xA;vlink attribute definition in HTML 4.01." name="vLink" />
      </scope>
      <scope classrefs="HTMLElement" doc="The FORM element encompasses behavior similar to a&#xA;collection and an element. It provides direct access to the&#xA;contained form controls as well as the attributes of the&#xA;form element." ilk="class" name="HTMLFormElement">
        <variable citdl="HTMLCollection" doc="Returns a collection of all form control elements in the&#xA;form." name="elements" />
        <variable citdl="Number" doc="The number of form controls in the form." name="length" />
        <variable citdl="DOMString" doc="Names the form." name="name" />
        <variable citdl="DOMString" doc="List of character sets supported by the server. See the&#xA;accept-charset attribute definition in HTML 4.01." name="acceptCharset" />
        <variable citdl="DOMString" doc="Server-side form handler. See the action attribute&#xA;definition in HTML 4.01." name="action" />
        <variable citdl="DOMString" doc="The content type of the submitted form, generally&#xA;&quot;application/x-www-form-urlencoded&quot;. See the enctype&#xA;attribute definition in HTML 4.01." name="enctype" />
        <variable citdl="DOMString" doc="HTTP method used to submit form. See the method attribute&#xA;definition in HTML 4.01." name="method" />
        <variable citdl="DOMString" doc="Frame to render the resource in. See the target attribute&#xA;definition in HTML 4.01." name="target" />
        <scope doc="Submits the form. It performs the same action as a submit&#xA;button." ilk="function" name="submit" signature="submit()" />
        <scope doc="Restores a form element&apos;s default values. It performs the&#xA;same action as a reset button." ilk="function" name="reset" signature="reset()" />
      </scope>
      <scope classrefs="HTMLElement" doc="The select element allows the selection of an option. The&#xA;contained options can be directly accessed through the&#xA;select element as a collection." ilk="class" name="HTMLSelectElement">
        <variable citdl="DOMString" doc="The type of this form control. This is the string &quot;select-&#xA;multiple&quot; when the multiple attribute is true and the string&#xA;&quot;select-one&quot; when false." name="type" />
        <variable citdl="Number" doc="The ordinal index of the selected option, starting from 0.&#xA;The value -1 is returned if no element is selected." name="selectedIndex" />
        <variable citdl="DOMString" doc="The current form control value (i.e. the value of the&#xA;currently selected option), if multiple options are selected&#xA;this is the value of the first selected option." name="value" />
        <variable citdl="Number" doc="The number of options in this SELECT." name="length" />
        <variable citdl="HTMLFormElement" doc="Returns the FORM element containing this control. Returns&#xA;null if this control is not within the context of a form." name="form" />
        <variable citdl="HTMLOptionsCollection" doc="The collection of OPTION elements contained by this element." name="options" />
        <variable citdl="Boolean" doc="The control is unavailable in this context. See the disabled&#xA;attribute definition in HTML 4.01." name="disabled" />
        <variable citdl="Boolean" doc="If true, multiple OPTION elements may be selected in this&#xA;SELECT. See the multiple attribute definition in HTML 4.01." name="multiple" />
        <variable citdl="DOMString" doc="Form control or object name when submitted with a form. See&#xA;the name attribute definition in HTML 4.01." name="name" />
        <variable citdl="Number" doc="Number of visible rows. See the size attribute definition in&#xA;HTML 4.01." name="size" />
        <variable citdl="Number" doc="Index that represents the element&apos;s position in the tabbing&#xA;order. See the tabindex attribute definition in HTML 4.01." name="tabIndex" />
        <scope doc="Add a new element to the collection of OPTION elements for&#xA;this SELECT. This method is the equivalent of the&#xA;appendChild method of the Node interface if the before&#xA;parameter is null." ilk="function" name="add" signature="add(element, before)">
          <variable citdl="HTMLElement" ilk="argument" name="element" />
          <variable citdl="HTMLElement" ilk="argument" name="before" />
        </scope>
        <scope doc="Remove an element from the collection of OPTION elements for&#xA;this SELECT. Does nothing if no element has the given&#xA;index." ilk="function" name="remove" signature="remove(index)">
          <variable citdl="Number" ilk="argument" name="index" />
        </scope>
        <scope doc="Removes keyboard focus from this element." ilk="function" name="blur" signature="blur()" />
        <scope doc="Gives keyboard focus to this element." ilk="function" name="focus" signature="focus()" />
      </scope>
      <scope classrefs="HTMLElement" doc="Group options together in logical subdivisions. See the&#xA;OPTGROUP element definition in HTML 4.01." ilk="class" name="HTMLOptGroupElement">
        <variable citdl="Boolean" doc="The control is unavailable in this context. See the disabled&#xA;attribute definition in HTML 4.01." name="disabled" />
        <variable citdl="DOMString" doc="Assigns a label to this option group. See the label&#xA;attribute definition in HTML 4.01." name="label" />
      </scope>
      <scope classrefs="HTMLElement" doc="A selectable choice. See the OPTION element definition in&#xA;HTML 4.01." ilk="class" name="HTMLOptionElement">
        <variable citdl="HTMLFormElement" doc="Returns the FORM element containing this control. Returns&#xA;null if this control is not within the context of a form." name="form" />
        <variable citdl="Boolean" doc="Represents the value of the HTML selected attribute. The&#xA;value of this attribute does not change if the state of the&#xA;corresponding form control, in an interactive user agent,&#xA;changes." name="defaultSelected" />
        <variable citdl="DOMString" doc="The text contained within the option element." name="text" />
        <variable citdl="Number" doc="The index of this OPTION in its parent SELECT , starting&#xA;from 0." name="index" />
        <variable citdl="Boolean" doc="The control is unavailable in this context. See the disabled&#xA;attribute definition in HTML 4.01." name="disabled" />
        <variable citdl="DOMString" doc="Option label for use in hierarchical menus. See the label&#xA;attribute definition in HTML 4.01." name="label" />
        <variable citdl="Boolean" doc="Represents the current state of the corresponding form&#xA;control, in an interactive user agent. Changing this&#xA;attribute changes the state of the form control, but does&#xA;not change the value of the HTML selected attribute of the&#xA;element." name="selected" />
        <variable citdl="DOMString" doc="The current form control value. See the value attribute&#xA;definition in HTML 4.01." name="value" />
      </scope>
      <scope classrefs="HTMLElement" doc="Form control. Depending upon the environment in which the&#xA;page is being viewed, the value property may be read-only&#xA;for the file upload input type." ilk="class" name="HTMLInputElement">
        <variable citdl="DOMString" doc="When the type attribute of the element has the value &quot;text&quot;,&#xA;&quot;file&quot; or &quot;password&quot;, this represents the HTML value&#xA;attribute of the element. The value of this attribute does&#xA;not change if the contents of the corresponding form&#xA;control, in an interactive user agent, changes." name="defaultValue" />
        <variable citdl="Boolean" doc="When type has the value &quot;radio&quot; or &quot;checkbox&quot;, this&#xA;represents the HTML checked attribute of the element. The&#xA;value of this attribute does not change if the state of the&#xA;corresponding form control, in an interactive user agent,&#xA;changes." name="defaultChecked" />
        <variable citdl="HTMLFormElement" doc="Returns the FORM element containing this control. Returns&#xA;null if this control is not within the context of a form." name="form" />
        <variable citdl="DOMString" doc="A comma-separated list of content types that a server&#xA;processing this form will handle correctly. See the accept&#xA;attribute definition in HTML 4.01." name="accept" />
        <variable citdl="DOMString" doc="A single character access key to give access to the form&#xA;control. See the accesskey attribute definition in HTML&#xA;4.01." name="accessKey" />
        <variable citdl="DOMString" doc="Aligns this object (vertically or horizontally) with respect&#xA;to its surrounding text. See the align attribute definition&#xA;in HTML 4.01." name="align" />
        <variable citdl="DOMString" doc="Alternate text for user agents not rendering the normal&#xA;content of this element. See the alt attribute definition in&#xA;HTML 4.01." name="alt" />
        <variable citdl="Boolean" doc="When the type attribute of the element has the value &quot;radio&quot;&#xA;or &quot;checkbox&quot;, this represents the current state of the form&#xA;control, in an interactive user agent. Changes to this&#xA;attribute change the state of the form control, but do not&#xA;change the value of the HTML checked attribute of the INPUT&#xA;element." name="checked" />
        <variable citdl="Boolean" doc="The control is unavailable in this context. See the disabled&#xA;attribute definition in HTML 4.01." name="disabled" />
        <variable citdl="Number" doc="Maximum number of characters for text fields, when type has&#xA;the value &quot;text&quot; or &quot;password&quot;. See the maxlength attribute&#xA;definition in HTML 4.01." name="maxLength" />
        <variable citdl="DOMString" doc="Form control or object name when submitted with a form. See&#xA;the name attribute definition in HTML 4.01." name="name" />
        <variable citdl="Boolean" doc="This control is read-only. Relevant only when type has the&#xA;value &quot;text&quot; or &quot;password&quot;." name="readOnly" />
        <variable citdl="Number" doc="Size information. The precise meaning is specific to each&#xA;type of field." name="size" />
        <variable citdl="DOMString" doc="When the type attribute has the value &quot;image&quot;, this&#xA;attribute specifies the location of the image to be used to&#xA;decorate the graphical submit button. See the src attribute&#xA;definition in HTML 4.01." name="src" />
        <variable citdl="Number" doc="Index that represents the element&apos;s position in the tabbing&#xA;order. See the tabindex attribute definition in HTML 4.01." name="tabIndex" />
        <variable citdl="DOMString" doc="The type of control created (all lower case). See the type&#xA;attribute definition in HTML 4.01." name="type" />
        <variable citdl="DOMString" doc="Use client-side image map. See the usemap attribute&#xA;definition in HTML 4.01." name="useMap" />
        <variable citdl="DOMString" doc="When the type attribute of the element has the value &quot;text&quot;,&#xA;&quot;file&quot; or &quot;password&quot;, this represents the current contents&#xA;of the corresponding form control, in an interactive user&#xA;agent. Changing this attribute changes the contents of the&#xA;form control, but does not change the value of the HTML&#xA;value attribute of the element." name="value" />
        <scope doc="Removes keyboard focus from this element." ilk="function" name="blur" signature="blur()" />
        <scope doc="Gives keyboard focus to this element." ilk="function" name="focus" signature="focus()" />
        <scope doc="Select the contents of the text area. For INPUT elements&#xA;whose type attribute has one of the following values:&#xA;&quot;text&quot;, &quot;file&quot;, or &quot;password&quot;." ilk="function" name="select" signature="select()" />
        <scope doc="Simulate a mouse-click. For INPUT elements whose type&#xA;attribute has one of the following values: &quot;button&quot;,&#xA;&quot;checkbox&quot;, &quot;radio&quot;, &quot;reset&quot;, or &quot;submit&quot;." ilk="function" name="click" signature="click()" />
      </scope>
      <scope classrefs="HTMLElement" doc="Multi-line text field. See the TEXTAREA element definition&#xA;in HTML 4.01." ilk="class" name="HTMLTextAreaElement">
        <variable citdl="DOMString" doc="Represents the contents of the element. The value of this&#xA;attribute does not change if the contents of the&#xA;corresponding form control, in an interactive user agent,&#xA;changes." name="defaultValue" />
        <variable citdl="HTMLFormElement" doc="Returns the FORM element containing this control. Returns&#xA;null if this control is not within the context of a form." name="form" />
        <variable citdl="DOMString" doc="A single character access key to give access to the form&#xA;control. See the accesskey attribute definition in HTML&#xA;4.01." name="accessKey" />
        <variable citdl="Number" doc="Width of control (in characters). See the cols attribute&#xA;definition in HTML 4.01." name="cols" />
        <variable citdl="Boolean" doc="The control is unavailable in this context. See the disabled&#xA;attribute definition in HTML 4.01." name="disabled" />
        <variable citdl="DOMString" doc="Form control or object name when submitted with a form. See&#xA;the name attribute definition in HTML 4.01." name="name" />
        <variable citdl="Boolean" doc="This control is read-only. See the readonly attribute&#xA;definition in HTML 4.01." name="readOnly" />
        <variable citdl="Number" doc="Number of text rows. See the rows attribute definition in&#xA;HTML 4.01." name="rows" />
        <variable citdl="Number" doc="Index that represents the element&apos;s position in the tabbing&#xA;order. See the tabindex attribute definition in HTML 4.01." name="tabIndex" />
        <variable citdl="DOMString" doc="The type of this form control. This the string &quot;textarea&quot;." name="type" />
        <variable citdl="DOMString" doc="Represents the current contents of the corresponding form&#xA;control, in an interactive user agent. Changing this&#xA;attribute changes the contents of the form control, but does&#xA;not change the contents of the element." name="value" />
        <scope doc="Removes keyboard focus from this element." ilk="function" name="blur" signature="blur()" />
        <scope doc="Gives keyboard focus to this element." ilk="function" name="focus" signature="focus()" />
        <scope doc="Select the contents of the TEXTAREA." ilk="function" name="select" signature="select()" />
      </scope>
      <scope classrefs="HTMLElement" doc="Push button. See the BUTTON element definition in HTML 4.01." ilk="class" name="HTMLButtonElement">
        <variable citdl="HTMLFormElement" doc="Returns the FORM element containing this control. Returns&#xA;null if this control is not within the context of a form." name="form" />
        <variable citdl="DOMString" doc="A single character access key to give access to the form&#xA;control. See the accesskey attribute definition in HTML&#xA;4.01." name="accessKey" />
        <variable citdl="Boolean" doc="The control is unavailable in this context. See the disabled&#xA;attribute definition in HTML 4.01." name="disabled" />
        <variable citdl="DOMString" doc="Form control or object name when submitted with a form. See&#xA;the name attribute definition in HTML 4.01." name="name" />
        <variable citdl="Number" doc="Index that represents the element&apos;s position in the tabbing&#xA;order. See the tabindex attribute definition in HTML 4.01." name="tabIndex" />
        <variable citdl="DOMString" doc="The type of button (all lower case). See the type attribute&#xA;definition in HTML 4.01." name="type" />
        <variable citdl="DOMString" doc="The current form control value. See the value attribute&#xA;definition in HTML 4.01." name="value" />
      </scope>
      <scope classrefs="HTMLElement" doc="Form field label text. See the LABEL element definition in&#xA;HTML 4.01." ilk="class" name="HTMLLabelElement">
        <variable citdl="HTMLFormElement" doc="Returns the FORM element containing this control. Returns&#xA;null if this control is not within the context of a form." name="form" />
        <variable citdl="DOMString" doc="A single character access key to give access to the form&#xA;control. See the accesskey attribute definition in HTML&#xA;4.01." name="accessKey" />
        <variable citdl="DOMString" doc="This attribute links this label with another form control by&#xA;id attribute. See the for attribute definition in HTML 4.01." name="htmlFor" />
      </scope>
      <scope classrefs="HTMLElement" doc="Organizes form controls into logical groups. See the&#xA;FIELDSET element definition in HTML 4.01." ilk="class" name="HTMLFieldSetElement">
        <variable citdl="HTMLFormElement" doc="Returns the FORM element containing this control. Returns&#xA;null if this control is not within the context of a form." name="form" />
      </scope>
      <scope classrefs="HTMLElement" doc="Provides a caption for a FIELDSET grouping. See the LEGEND&#xA;element definition in HTML 4.01." ilk="class" name="HTMLLegendElement">
        <variable citdl="HTMLFormElement" doc="Returns the FORM element containing this control. Returns&#xA;null if this control is not within the context of a form." name="form" />
        <variable citdl="DOMString" doc="A single character access key to give access to the form&#xA;control. See the accesskey attribute definition in HTML&#xA;4.01." name="accessKey" />
        <variable citdl="DOMString" doc="Text alignment relative to FIELDSET. See the align&#xA;attribute definition in HTML 4.01." name="align" />
      </scope>
      <scope classrefs="HTMLElement" doc="Unordered list. See the UL element definition in HTML 4.01." ilk="class" name="HTMLUListElement">
        <variable citdl="Boolean" doc="Reduce spacing between list items. See the compact attribute&#xA;definition in HTML 4.01." name="compact" />
        <variable citdl="DOMString" doc="Bullet style. See the type attribute definition in HTML&#xA;4.01." name="type" />
      </scope>
      <scope classrefs="HTMLElement" doc="Ordered list. See the OL element definition in HTML 4.01." ilk="class" name="HTMLOListElement">
        <variable citdl="Boolean" doc="Reduce spacing between list items. See the compact attribute&#xA;definition in HTML 4.01." name="compact" />
        <variable citdl="Number" doc="Starting sequence number. See the start attribute definition&#xA;in HTML 4.01." name="start" />
        <variable citdl="DOMString" doc="Numbering style. See the type attribute definition in HTML&#xA;4.01." name="type" />
      </scope>
      <scope classrefs="HTMLElement" doc="Definition list. See the DL element definition in HTML 4.01." ilk="class" name="HTMLDListElement">
        <variable citdl="Boolean" doc="Reduce spacing between list items. See the compact attribute&#xA;definition in HTML 4.01." name="compact" />
      </scope>
      <scope classrefs="HTMLElement" doc="Directory list. See the DIR element definition in HTML 4.01." ilk="class" name="HTMLDirectoryElement">
        <variable citdl="Boolean" doc="Reduce spacing between list items. See the compact attribute&#xA;definition in HTML 4.01." name="compact" />
      </scope>
      <scope classrefs="HTMLElement" doc="Menu list. See the MENU element definition in HTML 4.01." ilk="class" name="HTMLMenuElement">
        <variable citdl="Boolean" doc="Reduce spacing between list items. See the compact attribute&#xA;definition in HTML 4.01." name="compact" />
      </scope>
      <scope classrefs="HTMLElement" doc="List item. See the LI element definition in HTML 4.01." ilk="class" name="HTMLLIElement">
        <variable citdl="DOMString" doc="List item bullet style. See the type attribute definition in&#xA;HTML 4.01." name="type" />
        <variable citdl="Number" doc="Reset sequence number when used in OL. See the value&#xA;attribute definition in HTML 4.01." name="value" />
      </scope>
      <scope classrefs="HTMLElement" doc="Generic block container. See the DIV element definition in&#xA;HTML 4.01." ilk="class" name="HTMLDivElement">
        <variable citdl="DOMString" doc="Horizontal text alignment. See the align attribute&#xA;definition in HTML 4.01." name="align" />
      </scope>
      <scope classrefs="HTMLElement" doc="Paragraphs. See the P element definition in HTML 4.01." ilk="class" name="HTMLParagraphElement">
        <variable citdl="DOMString" doc="Horizontal text alignment. See the align attribute&#xA;definition in HTML 4.01." name="align" />
      </scope>
      <scope classrefs="HTMLElement" doc="For the H1 to H6 elements. See the H1 element definition in&#xA;HTML 4.01." ilk="class" name="HTMLHeadingElement">
        <variable citdl="DOMString" doc="Horizontal text alignment. See the align attribute&#xA;definition in HTML 4.01." name="align" />
      </scope>
      <scope classrefs="HTMLElement" doc="For the Q and BLOCKQUOTE elements. See the Q element&#xA;definition in HTML 4.01." ilk="class" name="HTMLQuoteElement">
        <variable citdl="DOMString" doc="A URI designating a source document or message. See the cite&#xA;attribute definition in HTML 4.01." name="cite" />
      </scope>
      <scope classrefs="HTMLElement" doc="Preformatted text. See the PRE element definition in HTML&#xA;4.01." ilk="class" name="HTMLPreElement">
        <variable citdl="Number" doc="Fixed width for content. See the width attribute definition&#xA;in HTML 4.01." name="width" />
      </scope>
      <scope classrefs="HTMLElement" doc="Force a line break. See the BR element definition in HTML&#xA;4.01." ilk="class" name="HTMLBRElement">
        <variable citdl="DOMString" doc="Control flow of text around floats. See the clear attribute&#xA;definition in HTML 4.01." name="clear" />
      </scope>
      <scope classrefs="HTMLElement" doc="Base font. See the BASEFONT element definition in HTML 4.01." ilk="class" name="HTMLBaseFontElement">
        <variable citdl="DOMString" doc="Font color. See the color attribute definition in HTML 4.01." name="color" />
        <variable citdl="DOMString" doc="Font face identifier. See the face attribute definition in&#xA;HTML 4.01." name="face" />
        <variable citdl="Number" doc="Computed font size. See the size attribute definition in&#xA;HTML 4.01." name="size" />
      </scope>
      <scope classrefs="HTMLElement" doc="Local change to font. See the FONT element definition in&#xA;HTML 4.01." ilk="class" name="HTMLFontElement">
        <variable citdl="DOMString" doc="Font color. See the color attribute definition in HTML 4.01." name="color" />
        <variable citdl="DOMString" doc="Font face identifier. See the face attribute definition in&#xA;HTML 4.01." name="face" />
        <variable citdl="DOMString" doc="Font size. See the size attribute definition in HTML 4.01." name="size" />
      </scope>
      <scope classrefs="HTMLElement" doc="Create a horizontal rule. See the HR element definition in&#xA;HTML 4.01." ilk="class" name="HTMLHRElement">
        <variable citdl="DOMString" doc="Align the rule on the page. See the align attribute&#xA;definition in HTML 4.01." name="align" />
        <variable citdl="Boolean" doc="Indicates to the user agent that there should be no shading&#xA;in the rendering of this element. See the noshade attribute&#xA;definition in HTML 4.01." name="noShade" />
        <variable citdl="DOMString" doc="The height of the rule. See the size attribute definition in&#xA;HTML 4.01." name="size" />
        <variable citdl="DOMString" doc="The width of the rule. See the width attribute definition in&#xA;HTML 4.01." name="width" />
      </scope>
      <scope classrefs="HTMLElement" doc="Notice of modification to part of a document. See the INS&#xA;and DEL element definitions in HTML 4.01." ilk="class" name="HTMLModElement">
        <variable citdl="DOMString" doc="A URI designating a document that describes the reason for&#xA;the change. See the cite attribute definition in HTML 4.01." name="cite" />
        <variable citdl="DOMString" doc="The date and time of the change. See the datetime attribute&#xA;definition in HTML 4.01." name="dateTime" />
      </scope>
      <scope classrefs="HTMLElement" doc="The anchor element. See the A element definition in HTML&#xA;4.01." ilk="class" name="HTMLAnchorElement">
        <variable citdl="DOMString" doc="A single character access key to give access to the form&#xA;control. See the accesskey attribute definition in HTML&#xA;4.01." name="accessKey" />
        <variable citdl="DOMString" doc="The character encoding of the linked resource. See the&#xA;charset attribute definition in HTML 4.01." name="charset" />
        <variable citdl="DOMString" doc="Comma-separated list of lengths, defining an active region&#xA;geometry. See also shape for the shape of the region." name="coords" />
        <variable citdl="DOMString" doc="The absolute URI of the linked resource. See the href&#xA;attribute definition in HTML 4.01." name="href" />
        <variable citdl="DOMString" doc="Language code of the linked resource. See the hreflang&#xA;attribute definition in HTML 4.01." name="hreflang" />
        <variable citdl="DOMString" doc="Anchor name. See the name attribute definition in HTML 4.01." name="name" />
        <variable citdl="DOMString" doc="Forward link type. See the rel attribute definition in HTML&#xA;4.01." name="rel" />
        <variable citdl="DOMString" doc="Reverse link type. See the rev attribute definition in HTML&#xA;4.01." name="rev" />
        <variable citdl="DOMString" doc="The shape of the active area. The coordinates are given by&#xA;coords." name="shape" />
        <variable citdl="Number" doc="Index that represents the element&apos;s position in the tabbing&#xA;order. See the tabindex attribute definition in HTML 4.01." name="tabIndex" />
        <variable citdl="DOMString" doc="Frame to render the resource in. See the target attribute&#xA;definition in HTML 4.01." name="target" />
        <variable citdl="DOMString" doc="Advisory content type. See the type attribute definition in&#xA;HTML 4.01." name="type" />
        <scope doc="Removes keyboard focus from this element." ilk="function" name="blur" signature="blur()" />
        <scope doc="Gives keyboard focus to this element." ilk="function" name="focus" signature="focus()" />
      </scope>
      <scope classrefs="HTMLElement" doc="Embedded image. See the IMG element definition in HTML 4.01." ilk="class" name="HTMLImageElement">
        <variable citdl="DOMString" doc="The name of the element (for backwards compatibility)." name="name" />
        <variable citdl="DOMString" doc="Aligns this object (vertically or horizontally) with respect&#xA;to its surrounding text. See the align attribute definition&#xA;in HTML 4.01." name="align" />
        <variable citdl="DOMString" doc="Alternate text for user agents not rendering the normal&#xA;content of this element. See the alt attribute definition in&#xA;HTML 4.01." name="alt" />
        <variable citdl="DOMString" doc="Width of border around image. See the border attribute&#xA;definition in HTML 4.01." name="border" />
        <variable citdl="Number" doc="Height of the image in pixels. See the height attribute&#xA;definition in HTML 4.01." name="height" />
        <variable citdl="Number" doc="Horizontal space to the left and right of this image in&#xA;pixels. See the hspace attribute definition in HTML 4.01." name="hspace" />
        <variable citdl="Boolean" doc="Use server-side image map. See the ismap attribute&#xA;definition in HTML 4.01." name="isMap" />
        <variable citdl="DOMString" doc="URI designating a long description of this image or frame.&#xA;See the longdesc attribute definition in HTML 4.01." name="longDesc" />
        <variable citdl="DOMString" doc="URI designating the source of this image. See the src&#xA;attribute definition in HTML 4.01." name="src" />
        <variable citdl="DOMString" doc="Use client-side image map. See the usemap attribute&#xA;definition in HTML 4.01." name="useMap" />
        <variable citdl="Number" doc="Vertical space above and below this image in pixels. See the&#xA;vspace attribute definition in HTML 4.01." name="vspace" />
        <variable citdl="Number" doc="The width of the image in pixels. See the width attribute&#xA;definition in HTML 4.01." name="width" />
      </scope>
      <scope classrefs="HTMLElement" doc="Generic embedded object. In principle, all properties on the&#xA;object element are read-write but in some environments some&#xA;properties may be read-only once the underlying object is&#xA;instantiated." ilk="class" name="HTMLObjectElement">
        <variable citdl="HTMLFormElement" doc="Returns the FORM element containing this control. Returns&#xA;null if this control is not within the context of a form." name="form" />
        <variable citdl="DOMString" doc="Applet class file. See the code attribute for&#xA;HTMLAppletElement." name="code" />
        <variable citdl="DOMString" doc="Aligns this object (vertically or horizontally) with respect&#xA;to its surrounding text. See the align attribute definition&#xA;in HTML 4.01." name="align" />
        <variable citdl="DOMString" doc="Space-separated list of archives. See the archive attribute&#xA;definition in HTML 4.01." name="archive" />
        <variable citdl="DOMString" doc="Width of border around the object. See the border attribute&#xA;definition in HTML 4.01." name="border" />
        <variable citdl="DOMString" doc="Base URI for classid , data , and archive attributes. See&#xA;the codebase attribute definition in HTML 4.01." name="codeBase" />
        <variable citdl="DOMString" doc="Content type for data downloaded via classid attribute. See&#xA;the codetype attribute definition in HTML 4.01." name="codeType" />
        <variable citdl="DOMString" doc="A URI specifying the location of the object&apos;s data. See the&#xA;data attribute definition in HTML 4.01." name="data" />
        <variable citdl="Boolean" doc="Declare (for future reference), but do not instantiate, this&#xA;object. See the declare attribute definition in HTML 4.01." name="declare" />
        <variable citdl="DOMString" doc="Override height. See the height attribute definition in HTML&#xA;4.01." name="height" />
        <variable citdl="Number" doc="Horizontal space, in pixels, to the left and right of this&#xA;image, applet, or object. See the hspace attribute&#xA;definition in HTML 4.01." name="hspace" />
        <variable citdl="DOMString" doc="Form control or object name when submitted with a form. See&#xA;the name attribute definition in HTML 4.01." name="name" />
        <variable citdl="DOMString" doc="Message to render while loading the object. See the standby&#xA;attribute definition in HTML 4.01." name="standby" />
        <variable citdl="Number" doc="Index that represents the element&apos;s position in the tabbing&#xA;order. See the tabindex attribute definition in HTML 4.01." name="tabIndex" />
        <variable citdl="DOMString" doc="Content type for data downloaded via data attribute. See the&#xA;type attribute definition in HTML 4.01." name="type" />
        <variable citdl="DOMString" doc="Use client-side image map. See the usemap attribute&#xA;definition in HTML 4.01." name="useMap" />
        <variable citdl="Number" doc="Vertical space, in pixels, above and below this image,&#xA;applet, or object. See the vspace attribute definition in&#xA;HTML 4.01." name="vspace" />
        <variable citdl="DOMString" doc="Override width. See the width attribute definition in HTML&#xA;4.01." name="width" />
        <variable citdl="Document" doc="The document this object contains, if there is any and it is&#xA;available, or null otherwise." name="contentDocument" />
      </scope>
      <scope classrefs="HTMLElement" doc="Parameters fed to the OBJECT element. See the PARAM element&#xA;definition in HTML 4.01." ilk="class" name="HTMLParamElement">
        <variable citdl="DOMString" doc="The name of a run-time parameter. See the name attribute&#xA;definition in HTML 4.01." name="name" />
        <variable citdl="DOMString" doc="Content type for the value attribute when valuetype has the&#xA;value &quot;ref&quot;. See the type attribute definition in HTML 4.01." name="type" />
        <variable citdl="DOMString" doc="The value of a run-time parameter. See the value attribute&#xA;definition in HTML 4.01." name="value" />
        <variable citdl="DOMString" doc="Information about the meaning of the value attribute value.&#xA;See the valuetype attribute definition in HTML 4.01." name="valueType" />
      </scope>
      <scope classrefs="HTMLElement" doc="An embedded Java applet. See the APPLET element definition&#xA;in HTML 4.01." ilk="class" name="HTMLAppletElement">
        <variable citdl="DOMString" doc="Aligns this object (vertically or horizontally) with respect&#xA;to its surrounding text. See the align attribute definition&#xA;in HTML 4.01." name="align" />
        <variable citdl="DOMString" doc="Alternate text for user agents not rendering the normal&#xA;content of this element. See the alt attribute definition in&#xA;HTML 4.01." name="alt" />
        <variable citdl="DOMString" doc="Comma-separated archive list. See the archive attribute&#xA;definition in HTML 4.01." name="archive" />
        <variable citdl="DOMString" doc="Applet class file. See the code attribute definition in HTML&#xA;4.01." name="code" />
        <variable citdl="DOMString" doc="Optional base URI for applet. See the codebase attribute&#xA;definition in HTML 4.01." name="codeBase" />
        <variable citdl="DOMString" doc="Override height. See the height attribute definition in HTML&#xA;4.01." name="height" />
        <variable citdl="Number" doc="Horizontal space, in pixels, to the left and right of this&#xA;image, applet, or object. See the hspace attribute&#xA;definition in HTML 4.01." name="hspace" />
        <variable citdl="DOMString" doc="The name of the applet. See the name attribute definition in&#xA;HTML 4.01." name="name" />
        <variable citdl="DOMString" doc="The value of the &quot;object&quot; attribute. See the object&#xA;attribute definition in HTML 4.01." name="object" />
        <variable citdl="Number" doc="Vertical space, in pixels, above and below this image,&#xA;applet, or object. See the vspace attribute definition in&#xA;HTML 4.01." name="vspace" />
        <variable citdl="DOMString" doc="Override width. See the width attribute definition in HTML&#xA;4.01." name="width" />
      </scope>
      <scope classrefs="HTMLElement" doc="Client-side image map. See the MAP element definition in&#xA;HTML 4.01." ilk="class" name="HTMLMapElement">
        <variable citdl="HTMLCollection" doc="The list of areas defined for the image map." name="areas" />
        <variable citdl="DOMString" doc="Names the map (for use with usemap ). See the name attribute&#xA;definition in HTML 4.01." name="name" />
      </scope>
      <scope classrefs="HTMLElement" doc="Client-side image map area definition. See the AREA element&#xA;definition in HTML 4.01." ilk="class" name="HTMLAreaElement">
        <variable citdl="DOMString" doc="A single character access key to give access to the form&#xA;control. See the accesskey attribute definition in HTML&#xA;4.01." name="accessKey" />
        <variable citdl="DOMString" doc="Alternate text for user agents not rendering the normal&#xA;content of this element. See the alt attribute definition in&#xA;HTML 4.01." name="alt" />
        <variable citdl="DOMString" doc="Comma-separated list of lengths, defining an active region&#xA;geometry. See also shape for the shape of the region." name="coords" />
        <variable citdl="DOMString" doc="The URI of the linked resource. See the href attribute&#xA;definition in HTML 4.01." name="href" />
        <variable citdl="Boolean" doc="Specifies that this area is inactive, i.e., has no&#xA;associated action. See the nohref attribute definition in&#xA;HTML 4.01." name="noHref" />
        <variable citdl="DOMString" doc="The shape of the active area. The coordinates are given by&#xA;coords." name="shape" />
        <variable citdl="Number" doc="Index that represents the element&apos;s position in the tabbing&#xA;order. See the tabindex attribute definition in HTML 4.01." name="tabIndex" />
        <variable citdl="DOMString" doc="Frame to render the resource in. See the target attribute&#xA;definition in HTML 4.01." name="target" />
      </scope>
      <scope classrefs="HTMLElement" doc="Script statements. See the SCRIPT element definition in HTML&#xA;4.01." ilk="class" name="HTMLScriptElement">
        <variable citdl="DOMString" doc="The script content of the element." name="text" />
        <variable citdl="DOMString" doc="Reserved for future use." name="htmlFor" />
        <variable citdl="DOMString" doc="Reserved for future use." name="event" />
        <variable citdl="DOMString" doc="The character encoding of the linked resource. See the&#xA;charset attribute definition in HTML 4.01." name="charset" />
        <variable citdl="Boolean" doc="Indicates that the user agent can defer processing of the&#xA;script. See the defer attribute definition in HTML 4.01." name="defer" />
        <variable citdl="DOMString" doc="URI designating an external script. See the src attribute&#xA;definition in HTML 4.01." name="src" />
        <variable citdl="DOMString" doc="The content type of the script language. See the type&#xA;attribute definition in HTML 4.01." name="type" />
      </scope>
      <scope classrefs="HTMLElement" doc="The create* and delete* methods on the table allow authors&#xA;to construct and modify tables. specifies that only one of&#xA;each of the CAPTION , THEAD , and TFOOT elements may exist&#xA;in a table." ilk="class" name="HTMLTableElement">
        <variable citdl="HTMLTableCaptionElement" doc="Returns the table&apos;s CAPTION , or void if none exists." name="caption" />
        <variable citdl="HTMLTableSectionElement" doc="Returns the table&apos;s THEAD , or null if none exists." name="tHead" />
        <variable citdl="HTMLTableSectionElement" doc="Returns the table&apos;s TFOOT , or null if none exists." name="tFoot" />
        <variable citdl="HTMLCollection" doc="Returns a collection of all the rows in the table, including&#xA;all in THEAD , TFOOT , all TBODY elements." name="rows" />
        <variable citdl="HTMLCollection" doc="Returns a collection of the table bodies (including implicit&#xA;ones)." name="tBodies" />
        <variable citdl="DOMString" doc="Specifies the table&apos;s position with respect to the rest of&#xA;the document. See the align attribute definition in HTML&#xA;4.01." name="align" />
        <variable citdl="DOMString" doc="Cell background color. See the bgcolor attribute definition&#xA;in HTML 4.01." name="bgColor" />
        <variable citdl="DOMString" doc="The width of the border around the table. See the border&#xA;attribute definition in HTML 4.01." name="border" />
        <variable citdl="DOMString" doc="Specifies the horizontal and vertical space between cell&#xA;content and cell borders. See the cellpadding attribute&#xA;definition in HTML 4.01." name="cellPadding" />
        <variable citdl="DOMString" doc="Specifies the horizontal and vertical separation between&#xA;cells. See the cellspacing attribute definition in HTML&#xA;4.01." name="cellSpacing" />
        <variable citdl="DOMString" doc="Specifies which external table borders to render. See the&#xA;frame attribute definition in HTML 4.01." name="frame" />
        <variable citdl="DOMString" doc="Specifies which internal table borders to render. See the&#xA;rules attribute definition in HTML 4.01." name="rules" />
        <variable citdl="DOMString" doc="Description about the purpose or structure of a table. See&#xA;the summary attribute definition in HTML 4.01." name="summary" />
        <variable citdl="DOMString" doc="Specifies the desired table width. See the width attribute&#xA;definition in HTML 4.01." name="width" />
        <scope doc="Create a table header row or return an existing one." ilk="function" name="createTHead" returns="HTMLElement" signature="createTHead()" />
        <scope doc="Delete the header from the table, if one exists." ilk="function" name="deleteTHead" signature="deleteTHead()" />
        <scope doc="Create a table footer row or return an existing one." ilk="function" name="createTFoot" returns="HTMLElement" signature="createTFoot()" />
        <scope doc="Delete the footer from the table, if one exists." ilk="function" name="deleteTFoot" signature="deleteTFoot()" />
        <scope doc="Create a new table caption object or return an existing one." ilk="function" name="createCaption" returns="HTMLElement" signature="createCaption()" />
        <scope doc="Delete the table caption, if one exists." ilk="function" name="deleteCaption" signature="deleteCaption()" />
        <scope doc="Insert a new empty row in the table. The new row is inserted&#xA;immediately before and in the same section as the current&#xA;index th row in the table." ilk="function" name="insertRow" returns="HTMLElement" signature="insertRow(index)">
          <variable citdl="Number" ilk="argument" name="index" />
        </scope>
        <scope doc="Delete a table row." ilk="function" name="deleteRow" signature="deleteRow(index)">
          <variable citdl="Number" ilk="argument" name="index" />
        </scope>
      </scope>
      <scope classrefs="HTMLElement" doc="Table caption See the CAPTION element definition in HTML&#xA;4.01." ilk="class" name="HTMLTableCaptionElement">
        <variable citdl="DOMString" doc="Caption alignment with respect to the table. See the align&#xA;attribute definition in HTML 4.01." name="align" />
      </scope>
      <scope classrefs="HTMLElement" doc="Regroups the COL and COLGROUP elements. See the COL element&#xA;definition in HTML 4.01." ilk="class" name="HTMLTableColElement">
        <variable citdl="DOMString" doc="Horizontal alignment of cell data in column. See the align&#xA;attribute definition in HTML 4.01." name="align" />
        <variable citdl="DOMString" doc="Alignment character for cells in a column. See the char&#xA;attribute definition in HTML 4.01." name="ch" />
        <variable citdl="DOMString" doc="Offset of alignment character. See the charoff attribute&#xA;definition in HTML 4.01." name="chOff" />
        <variable citdl="Number" doc="Indicates the number of columns in a group or affected by a&#xA;grouping. See the span attribute definition in HTML 4.01." name="span" />
        <variable citdl="DOMString" doc="Vertical alignment of cell data in column. See the valign&#xA;attribute definition in HTML 4.01." name="vAlign" />
        <variable citdl="DOMString" doc="Default column width. See the width attribute definition in&#xA;HTML 4.01." name="width" />
      </scope>
      <scope classrefs="HTMLElement" doc="The THEAD , TFOOT , and TBODY elements." ilk="class" name="HTMLTableSectionElement">
        <variable citdl="DOMString" doc="Horizontal alignment of data in cells. See the align&#xA;attribute for HTMLTheadElement for details." name="align" />
        <variable citdl="DOMString" doc="Alignment character for cells in a column. See the char&#xA;attribute definition in HTML 4.01." name="ch" />
        <variable citdl="DOMString" doc="Offset of alignment character. See the charoff attribute&#xA;definition in HTML 4.01." name="chOff" />
        <variable citdl="DOMString" doc="Vertical alignment of data in cells. See the valign&#xA;attribute for HTMLTheadElement for details." name="vAlign" />
        <variable citdl="HTMLCollection" doc="The collection of rows in this table section." name="rows" />
        <scope doc="Insert a row into this section. The new row is inserted&#xA;immediately before the current index th row in this section." ilk="function" name="insertRow" returns="HTMLElement" signature="insertRow(index)">
          <variable citdl="Number" ilk="argument" name="index" />
        </scope>
        <scope doc="Delete a row from this section." ilk="function" name="deleteRow" signature="deleteRow(index)">
          <variable citdl="Number" ilk="argument" name="index" />
        </scope>
      </scope>
      <scope classrefs="HTMLElement" doc="A row in a table. See the TR element definition in HTML&#xA;4.01." ilk="class" name="HTMLTableRowElement">
        <variable citdl="Number" doc="This is in logical order and not in document order. The&#xA;rowIndex does take into account sections ( THEAD , TFOOT ,&#xA;or TBODY ) within the table, placing THEAD rows first in the&#xA;index, followed by TBODY rows, followed by TFOOT rows." name="rowIndex" />
        <variable citdl="Number" doc="The index of this row, relative to the current section (&#xA;THEAD , TFOOT , or TBODY ), starting from 0." name="sectionRowIndex" />
        <variable citdl="HTMLCollection" doc="The collection of cells in this row." name="cells" />
        <variable citdl="DOMString" doc="Horizontal alignment of data within cells of this row. See&#xA;the align attribute definition in HTML 4.01." name="align" />
        <variable citdl="DOMString" doc="Background color for rows. See the bgcolor attribute&#xA;definition in HTML 4.01." name="bgColor" />
        <variable citdl="DOMString" doc="Alignment character for cells in a column. See the char&#xA;attribute definition in HTML 4.01." name="ch" />
        <variable citdl="DOMString" doc="Offset of alignment character. See the charoff attribute&#xA;definition in HTML 4.01." name="chOff" />
        <variable citdl="DOMString" doc="Vertical alignment of data within cells of this row. See the&#xA;valign attribute definition in HTML 4.01." name="vAlign" />
        <scope doc="Insert an empty TD cell into this row. If index is -1 or&#xA;equal to the number of cells, the new cell is appended." ilk="function" name="insertCell" returns="HTMLElement" signature="insertCell(index)">
          <variable citdl="Number" ilk="argument" name="index" />
        </scope>
        <scope doc="Delete a cell from the current row." ilk="function" name="deleteCell" signature="deleteCell(index)">
          <variable citdl="Number" ilk="argument" name="index" />
        </scope>
      </scope>
      <scope classrefs="HTMLElement" doc="The object used to represent the TH and TD elements. See the&#xA;TD element definition in HTML 4.01." ilk="class" name="HTMLTableCellElement">
        <variable citdl="Number" doc="The index of this cell in the row, starting from 0. This&#xA;index is in document tree order and not display order." name="cellIndex" />
        <variable citdl="DOMString" doc="Abbreviation for header cells. See the abbr attribute&#xA;definition in HTML 4.01." name="abbr" />
        <variable citdl="DOMString" doc="Horizontal alignment of data in cell. See the align&#xA;attribute definition in HTML 4.01." name="align" />
        <variable citdl="DOMString" doc="Names group of related headers. See the axis attribute&#xA;definition in HTML 4.01." name="axis" />
        <variable citdl="DOMString" doc="Cell background color. See the bgcolor attribute definition&#xA;in HTML 4.01." name="bgColor" />
        <variable citdl="DOMString" doc="Alignment character for cells in a column. See the char&#xA;attribute definition in HTML 4.01." name="ch" />
        <variable citdl="DOMString" doc="Offset of alignment character. See the charoff attribute&#xA;definition in HTML 4.01." name="chOff" />
        <variable citdl="Number" doc="Number of columns spanned by cell. See the colspan attribute&#xA;definition in HTML 4.01." name="colSpan" />
        <variable citdl="DOMString" doc="List of id attribute values for header cells. See the&#xA;headers attribute definition in HTML 4.01." name="headers" />
        <variable citdl="DOMString" doc="Cell height. See the height attribute definition in HTML&#xA;4.01." name="height" />
        <variable citdl="Boolean" doc="Suppress word wrapping. See the nowrap attribute definition&#xA;in HTML 4.01." name="noWrap" />
        <variable citdl="Number" doc="Number of rows spanned by cell. See the rowspan attribute&#xA;definition in HTML 4.01." name="rowSpan" />
        <variable citdl="DOMString" doc="Scope covered by header cells. See the scope attribute&#xA;definition in HTML 4.01." name="scope" />
        <variable citdl="DOMString" doc="Vertical alignment of data in cell. See the valign attribute&#xA;definition in HTML 4.01." name="vAlign" />
        <variable citdl="DOMString" doc="Cell width. See the width attribute definition in HTML 4.01." name="width" />
      </scope>
      <scope classrefs="HTMLElement" doc="Create a grid of frames. See the FRAMESET element definition&#xA;in HTML 4.01." ilk="class" name="HTMLFrameSetElement">
        <variable citdl="DOMString" doc="The number of columns of frames in the frameset. See the&#xA;cols attribute definition in HTML 4.01." name="cols" />
        <variable citdl="DOMString" doc="The number of rows of frames in the frameset. See the rows&#xA;attribute definition in HTML 4.01." name="rows" />
      </scope>
      <scope classrefs="HTMLElement" doc="Create a frame. See the FRAME element definition in HTML&#xA;4.01." ilk="class" name="HTMLFrameElement">
        <variable citdl="DOMString" doc="Request frame borders. See the frameborder attribute&#xA;definition in HTML 4.01." name="frameBorder" />
        <variable citdl="DOMString" doc="URI designating a long description of this image or frame.&#xA;See the longdesc attribute definition in HTML 4.01." name="longDesc" />
        <variable citdl="DOMString" doc="Frame margin height, in pixels. See the marginheight&#xA;attribute definition in HTML 4.01." name="marginHeight" />
        <variable citdl="DOMString" doc="Frame margin width, in pixels. See the marginwidth attribute&#xA;definition in HTML 4.01." name="marginWidth" />
        <variable citdl="DOMString" doc="The frame name (object of the target attribute). See the&#xA;name attribute definition in HTML 4.01." name="name" />
        <variable citdl="Boolean" doc="When true, forbid user from resizing frame. See the noresize&#xA;attribute definition in HTML 4.01." name="noResize" />
        <variable citdl="DOMString" doc="Specify whether or not the frame should have scrollbars. See&#xA;the scrolling attribute definition in HTML 4.01." name="scrolling" />
        <variable citdl="DOMString" doc="A URI designating the initial frame contents. See the src&#xA;attribute definition in HTML 4.01." name="src" />
        <variable citdl="Document" doc="The document this frame contains, if there is any and it is&#xA;available, or null otherwise." name="contentDocument" />
      </scope>
      <scope classrefs="HTMLElement" doc="Inline subwindows. See the IFRAME element definition in HTML&#xA;4.01." ilk="class" name="HTMLIFrameElement">
        <variable citdl="DOMString" doc="Aligns this object (vertically or horizontally) with respect&#xA;to its surrounding text. See the align attribute definition&#xA;in HTML 4.01." name="align" />
        <variable citdl="DOMString" doc="Request frame borders. See the frameborder attribute&#xA;definition in HTML 4.01." name="frameBorder" />
        <variable citdl="DOMString" doc="Frame height. See the height attribute definition in HTML&#xA;4.01." name="height" />
        <variable citdl="DOMString" doc="URI designating a long description of this image or frame.&#xA;See the longdesc attribute definition in HTML 4.01." name="longDesc" />
        <variable citdl="DOMString" doc="Frame margin height, in pixels. See the marginheight&#xA;attribute definition in HTML 4.01." name="marginHeight" />
        <variable citdl="DOMString" doc="Frame margin width, in pixels. See the marginwidth attribute&#xA;definition in HTML 4.01." name="marginWidth" />
        <variable citdl="DOMString" doc="The frame name (object of the target attribute). See the&#xA;name attribute definition in HTML 4.01." name="name" />
        <variable citdl="DOMString" doc="Specify whether or not the frame should have scrollbars. See&#xA;the scrolling attribute definition in HTML 4.01." name="scrolling" />
        <variable citdl="DOMString" doc="A URI designating the initial frame contents. See the src&#xA;attribute definition in HTML 4.01." name="src" />
        <variable citdl="DOMString" doc="Frame width. See the width attribute definition in HTML&#xA;4.01." name="width" />
        <variable citdl="Document" doc="The document this frame contains, if there is any and it is&#xA;available, or null otherwise." name="contentDocument" />
      </scope>
      <scope classrefs="CSSValue" doc="The CSSValueList interface provides the abstraction of an&#xA;ordered collection of CSS values. Some properties allow an&#xA;empty list into their syntax." ilk="class" name="CSSValueList">
        <variable citdl="Number" doc="The number of CSSValues in the list. The range of valid&#xA;values of the indices is 0 to length-1 inclusive." name="length" />
        <scope doc="Used to retrieve a CSSValue by ordinal index. The order in&#xA;this collection represents the order of the values in the&#xA;CSS style property." ilk="function" name="item" returns="CSSValue" signature="item(index)">
          <variable citdl="Number" ilk="argument" name="index" />
        </scope>
      </scope>
      <scope classrefs="views::AbstractView" doc="This interface represents a CSS view. The getComputedStyle&#xA;method provides a read only access to the computed values of&#xA;an element." ilk="class" name="ViewCSS">
        <scope doc="This method is used to get the computed style as it is&#xA;defined in." ilk="function" name="getComputedStyle" returns="CSSStyleDeclaration" signature="getComputedStyle(elt, pseudoElt)">
          <variable citdl="Element" ilk="argument" name="elt" />
          <variable citdl="DOMString" ilk="argument" name="pseudoElt" />
        </scope>
      </scope>
      <scope classrefs="CSSRule" doc="The CSSStyleRule interface represents a single rule set in a&#xA;CSS style sheet." ilk="class" name="CSSStyleRule">
        <variable citdl="DOMString" doc="The textual representation of the selector for the rule set.&#xA;The implementation may have stripped out insignificant&#xA;whitespace while parsing the selector." name="selectorText" />
        <variable citdl="CSSStyleDeclaration" doc="The declaration-block of this rule set." name="style" />
      </scope>
      <scope doc="The EventListener interface is the primary method for&#xA;handling events. Users implement the EventListener interface&#xA;and register their listener on an EventTarget using the&#xA;AddEventListener method." ilk="class" name="EventListener">
        <scope doc="This method is called whenever an event occurs of the type&#xA;for which the EventListener interface was registered." ilk="function" name="handleEvent" signature="handleEvent(evt)">
          <variable citdl="Event" ilk="argument" name="evt" />
        </scope>
      </scope>
      <scope doc="Inline style information attached to elements is exposed&#xA;through the style attribute. This represents the contents of&#xA;the STYLE attribute for HTML elements (or elements in other&#xA;schemas or DTDs which use the STYLE attribute in the same&#xA;way)." ilk="class" name="ElementCSSInlineStyle">
        <variable citdl="CSSStyleDeclaration" doc="The style attribute." name="style" />
      </scope>
      <scope classrefs="Node" doc="DocumentFragment is a &quot;lightweight&quot; or &quot;minimal&quot; Document&#xA;object. It is very common to want to be able to extract a&#xA;portion of a document&apos;s tree or to create a new fragment of&#xA;a document." ilk="class" name="DocumentFragment" />
      <scope classrefs="Node NSInlineEventHandlers" doc="The Document interface represents the entire HTML or XML&#xA;document. Conceptually, it is the root of the document tree,&#xA;and provides the primary access to the document&apos;s data." ilk="class" name="Document">
        <scope ilk="function" name="onreadystatechange" />
        <variable citdl="DocumentType" doc="The Document Type Declaration (see DocumentType ) associated&#xA;with this document. For HTML documents as well as XML&#xA;documents without a document type declaration this returns&#xA;null." name="doctype" />
        <variable citdl="DOMImplementation" doc="The DOMImplementation object that handles this document. A&#xA;DOM application may use objects from multiple&#xA;implementations." name="implementation" />
        <variable citdl="Element" doc="This is a convenience attribute that allows direct access to&#xA;the child node that is the root element of the document. For&#xA;HTML documents, this is the element with the tagName &quot;HTML&quot;." name="documentElement" />
        <scope doc="Creates an element of the type specified. Note that the&#xA;instance returned implements the Element interface, so&#xA;attributes can be specified directly on the returned object." ilk="function" name="createElement" returns="Element" signature="createElement(tagName)">
          <variable citdl="DOMString" ilk="argument" name="tagName" />
        </scope>
        <scope doc="Creates an empty DocumentFragment object." ilk="function" name="createDocumentFragment" returns="DocumentFragment" signature="createDocumentFragment()" />
        <scope doc="Creates a Text node given the specified string." ilk="function" name="createTextNode" returns="String" signature="createTextNode(data)">
          <variable citdl="DOMString" ilk="argument" name="data" />
        </scope>
        <scope doc="Creates a Comment node given the specified string." ilk="function" name="createComment" returns="Comment" signature="createComment(data)">
          <variable citdl="DOMString" ilk="argument" name="data" />
        </scope>
        <scope doc="Creates a CDATASection node whose value is the specified&#xA;string." ilk="function" name="createCDATASection" returns="CDATASection" signature="createCDATASection(data)">
          <variable citdl="DOMString" ilk="argument" name="data" />
        </scope>
        <scope doc="Creates a ProcessingInstruction node given the specified&#xA;name and data strings." ilk="function" name="createProcessingInstruction" returns="ProcessingInstruction" signature="createProcessingInstruction(target, data)">
          <variable citdl="DOMString" ilk="argument" name="target" />
          <variable citdl="DOMString" ilk="argument" name="data" />
        </scope>
        <scope doc="Creates an Attr of the given name. Note that the Attr&#xA;instance can then be set on an Element using the&#xA;setAttributeNode method." ilk="function" name="createAttribute" returns="Attr" signature="createAttribute(name)">
          <variable citdl="DOMString" ilk="argument" name="name" />
        </scope>
        <scope doc="Creates an EntityReference object. In addition, if the&#xA;referenced entity is known, the child list of the&#xA;EntityReference node is made the same as that of the&#xA;corresponding Entity node." ilk="function" name="createEntityReference" returns="EntityReference" signature="createEntityReference(name)">
          <variable citdl="DOMString" ilk="argument" name="name" />
        </scope>
        <scope doc="Returns a NodeList of all the Elements with a given tag name&#xA;in the order in which they are encountered in a preorder&#xA;traversal of the Document tree." ilk="function" name="getElementsByTagName" returns="NodeList" signature="getElementsByTagName(tagname)">
          <variable citdl="DOMString" ilk="argument" name="tagname" />
        </scope>
        <scope doc="Imports a node from another document to this document. The&#xA;returned node has no parent; ( parentNode is null )." ilk="function" name="importNode" returns="Node" signature="importNode(importedNode, deep)">
          <variable citdl="Node" ilk="argument" name="importedNode" />
          <variable citdl="Boolean" ilk="argument" name="deep" />
        </scope>
        <scope doc="Creates an element of the given qualified name and namespace&#xA;URI. HTML-only DOM implementations do not need to implement&#xA;this method." ilk="function" name="createElementNS" returns="Element" signature="createElementNS(namespaceURI, qualifiedName)">
          <variable citdl="DOMString" ilk="argument" name="namespaceURI" />
          <variable citdl="DOMString" ilk="argument" name="qualifiedName" />
        </scope>
        <scope doc="Creates an attribute of the given qualified name and&#xA;namespace URI. HTML-only DOM implementations do not need to&#xA;implement this method." ilk="function" name="createAttributeNS" returns="Attr" signature="createAttributeNS(namespaceURI, qualifiedName)">
          <variable citdl="DOMString" ilk="argument" name="namespaceURI" />
          <variable citdl="DOMString" ilk="argument" name="qualifiedName" />
        </scope>
        <scope doc="Returns a NodeList of all the Elements with a given local&#xA;name and namespace URI in the order in which they are&#xA;encountered in a preorder traversal of the Document tree." ilk="function" name="getElementsByTagNameNS" returns="NodeList" signature="getElementsByTagNameNS(namespaceURI, localName)">
          <variable citdl="DOMString" ilk="argument" name="namespaceURI" />
          <variable citdl="DOMString" ilk="argument" name="localName" />
        </scope>
        <scope doc="Returns the Element whose ID is given by elementId. If no&#xA;such element exists, returns null." ilk="function" name="getElementById" returns="Element" signature="getElementById(elementId)">
          <variable citdl="DOMString" ilk="argument" name="elementId" />
        </scope>
      </scope>
      <scope doc="The StyleSheetList interface provides the abstraction of an&#xA;ordered collection of style sheets. The items in the&#xA;StyleSheetList are accessible via an integral index,&#xA;starting from 0." ilk="class" name="StyleSheetList">
        <variable citdl="Number" doc="The number of StyleSheets in the list. The range of valid&#xA;child stylesheet indices is 0 to length-1 inclusive." name="length" />
        <scope doc="Used to retrieve a style sheet by ordinal index. If index is&#xA;greater than or equal to the number of style sheets in the&#xA;list, this returns null." ilk="function" name="item" returns="StyleSheet" signature="item(index)">
          <variable citdl="Number" ilk="argument" name="index" />
        </scope>
      </scope>
      <scope doc="Event operations may throw an EventException as specified in&#xA;their method descriptions." ilk="class" name="EventException">
        <variable citdl="unsigned short &#xA;  " name="code" />
        <variable attributes="static" citdl="Number" doc="If the Event &apos;s type was not specified by initializing the&#xA;event before the method was called. Specification of the&#xA;Event&apos;s type as null or an empty string will also trigger&#xA;this exception." name="UNSPECIFIED_EVENT_TYPE_ERR" />
      </scope>
      <scope classrefs="Event" doc="The UIEvent interface provides specific contextual&#xA;information associated with User Interface events." ilk="class" name="UIEvent">
        <variable citdl="views::AbstractView" doc="The view attribute identifies the AbstractView from which&#xA;the event was generated." name="view" />
        <variable citdl="Number" doc="Specifies some detail information about the Event ,&#xA;depending on the type of event." name="detail" />
        <scope doc="The initUIEvent method is used to initialize the value of a&#xA;UIEvent created through the DocumentEvent interface. This&#xA;method may only be called before the UIEvent has been&#xA;dispatched via the dispatchEvent method, though it may be&#xA;called multiple times during that phase if necessary." ilk="function" name="initUIEvent" signature="initUIEvent(typeArg, canBubbleArg, cancelableArg, viewArg, detailArg)">
          <variable citdl="DOMString" ilk="argument" name="typeArg" />
          <variable citdl="Boolean" ilk="argument" name="canBubbleArg" />
          <variable citdl="Boolean" ilk="argument" name="cancelableArg" />
          <variable citdl="views::AbstractView" ilk="argument" name="viewArg" />
          <variable citdl="Number" ilk="argument" name="detailArg" />
        </scope>
      </scope>
      <scope doc="The LinkStyle interface provides a mechanism by which a&#xA;style sheet can be retrieved from the node responsible for&#xA;linking it into a document. An instance of the LinkStyle&#xA;interface can be obtained using binding-specific casting&#xA;methods on an instance of a linking node ( HTMLLinkElement ,&#xA;HTMLStyleElement or ProcessingInstruction in DOM Level 2)." ilk="class" name="LinkStyle">
        <variable citdl="StyleSheet" doc="The style sheet." name="sheet" />
      </scope>
      <scope doc="The MediaList interface provides the abstraction of an&#xA;ordered collection of media , without defining or&#xA;constraining how this collection is implemented. An empty&#xA;list is the same as a list that contains the medium &quot;all&quot;." ilk="class" name="MediaList">
        <variable citdl="DOMString" doc="The parsable textual representation of the media list. This&#xA;is a comma-separated list of media." name="mediaText" />
        <variable citdl="Number" doc="The number of media in the list. The range of valid media is&#xA;0 to length-1 inclusive." name="length" />
        <scope doc="Returns the index th in the list. If index is greater than&#xA;or equal to the number of media in the list, this returns&#xA;null." ilk="function" name="item" returns="DOMString" signature="item(index)">
          <variable citdl="Number" ilk="argument" name="index" />
        </scope>
        <scope doc="Deletes the medium indicated by oldMedium from the list." ilk="function" name="deleteMedium" signature="deleteMedium(oldMedium)">
          <variable citdl="DOMString" ilk="argument" name="oldMedium" />
        </scope>
        <scope doc="Adds the medium newMedium to the end of the list. If the&#xA;newMedium is already used, it is first removed." ilk="function" name="appendMedium" signature="appendMedium(newMedium)">
          <variable citdl="DOMString" ilk="argument" name="newMedium" />
        </scope>
      </scope>
      <scope doc="" ilk="class" name="Range">
        <variable attributes="static" citdl="Number" doc="Compare start boundary-point of sourceRange to start&#xA;boundary-point of Range on which compareBoundaryPoints is&#xA;invoked." name="START_TO_START" />
        <variable attributes="static" citdl="Number" doc="Compare start boundary-point of sourceRange to end boundary-&#xA;point of Range on which compareBoundaryPoints is invoked." name="START_TO_END" />
        <variable attributes="static" citdl="Number" doc="Compare end boundary-point of sourceRange to end boundary-&#xA;point of Range on which compareBoundaryPoints is invoked." name="END_TO_END" />
        <variable attributes="static" citdl="Number" doc="Compare end boundary-point of sourceRange to start boundary-&#xA;point of Range on which compareBoundaryPoints is invoked." name="END_TO_START" />
        <variable citdl="Node" doc="Node within which the Range begins" name="startContainer" />
        <variable citdl="Number" doc="Offset within the starting node of the Range." name="startOffset" />
        <variable citdl="Node" doc="Node within which the Range ends" name="endContainer" />
        <variable citdl="Number" doc="Offset within the ending node of the Range." name="endOffset" />
        <variable citdl="Boolean" doc="TRUE if the Range is collapsed" name="collapsed" />
        <variable citdl="Node" doc="The deepest common ancestor container of the Range&apos;s two&#xA;boundary-points." name="commonAncestorContainer" />
        <scope doc="Sets the attributes describing the start of the Range." ilk="function" name="setStart" signature="setStart(refNode, offset)">
          <variable citdl="Node" ilk="argument" name="refNode" />
          <variable citdl="Number" ilk="argument" name="offset" />
        </scope>
        <scope doc="Sets the attributes describing the end of a Range." ilk="function" name="setEnd" signature="setEnd(refNode, offset)">
          <variable citdl="Node" ilk="argument" name="refNode" />
          <variable citdl="Number" ilk="argument" name="offset" />
        </scope>
        <scope doc="Sets the start position to be before a node" ilk="function" name="setStartBefore" signature="setStartBefore(refNode)">
          <variable citdl="Node" ilk="argument" name="refNode" />
        </scope>
        <scope doc="Sets the start position to be after a node" ilk="function" name="setStartAfter" signature="setStartAfter(refNode)">
          <variable citdl="Node" ilk="argument" name="refNode" />
        </scope>
        <scope doc="Sets the end position to be before a node." ilk="function" name="setEndBefore" signature="setEndBefore(refNode)">
          <variable citdl="Node" ilk="argument" name="refNode" />
        </scope>
        <scope doc="Sets the end of a Range to be after a node" ilk="function" name="setEndAfter" signature="setEndAfter(refNode)">
          <variable citdl="Node" ilk="argument" name="refNode" />
        </scope>
        <scope doc="Collapse a Range onto one of its boundary-points" ilk="function" name="collapse" signature="collapse(toStart)">
          <variable citdl="Boolean" ilk="argument" name="toStart" />
        </scope>
        <scope doc="Select a node and its contents" ilk="function" name="selectNode" signature="selectNode(refNode)">
          <variable citdl="Node" ilk="argument" name="refNode" />
        </scope>
        <scope doc="Select the contents within a node" ilk="function" name="selectNodeContents" signature="selectNodeContents(refNode)">
          <variable citdl="Node" ilk="argument" name="refNode" />
        </scope>
        <scope doc="Compare the boundary-points of two Ranges in a document." ilk="function" name="compareBoundaryPoints" returns="Number" signature="compareBoundaryPoints(how, sourceRange)">
          <variable citdl="Number" ilk="argument" name="how" />
          <variable citdl="Range" ilk="argument" name="sourceRange" />
        </scope>
        <scope doc="Removes the contents of a Range from the containing document&#xA;or document fragment without returning a reference to the&#xA;removed content." ilk="function" name="deleteContents" signature="deleteContents()" />
        <scope doc="Moves the contents of a Range from the containing document&#xA;or document fragment to a new DocumentFragment." ilk="function" name="extractContents" returns="DocumentFragment" signature="extractContents()" />
        <scope doc="Duplicates the contents of a Range" ilk="function" name="cloneContents" returns="DocumentFragment" signature="cloneContents()" />
        <scope doc="Inserts a node into the Document or DocumentFragment at the&#xA;start of the Range. If the container is a Text node, this&#xA;will be split at the start of the Range (as if the Text&#xA;node&apos;s splitText method was performed at the insertion&#xA;point) and the insertion will occur between the two&#xA;resulting Text nodes." ilk="function" name="insertNode" signature="insertNode(newNode)">
          <variable citdl="Node" ilk="argument" name="newNode" />
        </scope>
        <scope doc="Reparents the contents of the Range to the given node and&#xA;inserts the node at the position of the start of the Range." ilk="function" name="surroundContents" signature="surroundContents(newParent)">
          <variable citdl="Node" ilk="argument" name="newParent" />
        </scope>
        <scope doc="Produces a new Range whose boundary-points are equal to the&#xA;boundary-points of the Range." ilk="function" name="cloneRange" returns="Range" signature="cloneRange()" />
        <scope doc="Returns the contents of a Range as a string. This string&#xA;contains only the data characters, not any markup." ilk="function" name="toString" returns="DOMString" signature="toString()" />
        <scope doc="Called to indicate that the Range is no longer in use and&#xA;that the implementation may relinquish any resources&#xA;associated with this Range. Subsequent calls to any methods&#xA;or attribute getters on this Range will result in a&#xA;DOMException being thrown with an error code of&#xA;INVALID_STATE_ERR." ilk="function" name="detach" signature="detach()" />
      </scope>
      <scope doc="" ilk="class" name="DocumentRange">
        <scope doc="This interface can be obtained from the object implementing&#xA;the Document interface using binding-specific casting&#xA;methods." ilk="function" name="createRange" returns="Range" signature="createRange()" />
      </scope>
      <scope classrefs="Event" doc="The MutationEvent interface provides specific contextual&#xA;information associated with Mutation events." ilk="class" name="MutationEvent">
        <variable attributes="static" citdl="Number" doc="The Attr was modified in place." name="MODIFICATION" />
        <variable attributes="static" citdl="Number" doc="The Attr was just added." name="ADDITION" />
        <variable attributes="static" citdl="Number" doc="The Attr was just removed." name="REMOVAL" />
        <variable citdl="Node" doc="relatedNode is used to identify a secondary node related to&#xA;a mutation event. For example, if a mutation event is&#xA;dispatched to a node indicating that its parent has changed,&#xA;the relatedNode is the changed parent." name="relatedNode" />
        <variable citdl="DOMString" doc="prevValue indicates the previous value of the Attr node in&#xA;DOMAttrModified events, and of the CharacterData node in&#xA;DOMCharDataModified events." name="prevValue" />
        <variable citdl="DOMString" doc="newValue indicates the new value of the Attr node in&#xA;DOMAttrModified events, and of the CharacterData node in&#xA;DOMCharDataModified events." name="newValue" />
        <variable citdl="DOMString" doc="attrName indicates the name of the changed Attr node in a&#xA;DOMAttrModified event." name="attrName" />
        <variable citdl="Number" doc="attrChange indicates the type of change which triggered the&#xA;DOMAttrModified event. The values can be MODIFICATION ,&#xA;ADDITION , or REMOVAL." name="attrChange" />
        <scope doc="The initMutationEvent method is used to initialize the value&#xA;of a MutationEvent created through the DocumentEvent&#xA;interface. This method may only be called before the&#xA;MutationEvent has been dispatched via the dispatchEvent&#xA;method, though it may be called multiple times during that&#xA;phase if necessary." ilk="function" name="initMutationEvent" signature="initMutationEvent(typeArg, canBubbleArg, cancelableArg, relatedNodeArg, prevValueArg, newValueArg, attrNameArg, attrChangeArg)">
          <variable citdl="DOMString" ilk="argument" name="typeArg" />
          <variable citdl="Boolean" ilk="argument" name="canBubbleArg" />
          <variable citdl="Boolean" ilk="argument" name="cancelableArg" />
          <variable citdl="Node" ilk="argument" name="relatedNodeArg" />
          <variable citdl="DOMString" ilk="argument" name="prevValueArg" />
          <variable citdl="DOMString" ilk="argument" name="newValueArg" />
          <variable citdl="DOMString" ilk="argument" name="attrNameArg" />
          <variable citdl="Number" ilk="argument" name="attrChangeArg" />
        </scope>
      </scope>
      <scope doc="The Counter interface is used to represent any counter or&#xA;counters function value. This interface reflects the values&#xA;in the underlying style property." ilk="class" name="Counter">
        <variable citdl="DOMString" doc="This attribute is used for the identifier of the counter." name="identifier" />
        <variable citdl="DOMString" doc="This attribute is used for the style of the list." name="listStyle" />
        <variable citdl="DOMString" doc="This attribute is used for the separator of the nested&#xA;counters." name="separator" />
      </scope>
      <scope classrefs="DOMImplementation" doc="This interface allows the DOM user to create a CSSStyleSheet&#xA;outside the context of a document. There is no way to&#xA;associate the new CSSStyleSheet with a document in DOM Level&#xA;2." ilk="class" name="DOMImplementationCSS">
        <scope doc="Creates a new CSSStyleSheet." ilk="function" name="createCSSStyleSheet" returns="CSSStyleSheet" signature="createCSSStyleSheet(title, media)">
          <variable citdl="DOMString" ilk="argument" name="title" />
          <variable citdl="DOMString" ilk="argument" name="media" />
        </scope>
      </scope>
      <scope doc="The CSSValue interface represents a simple or a complex&#xA;value. A CSSValue object only occurs in a context of a CSS&#xA;property." ilk="class" name="CSSValue">
        <variable attributes="static" citdl="Number" doc="The value is inherited and the cssText contains &quot;inherit&quot;." name="CSS_INHERIT" />
        <variable attributes="static" citdl="Number" doc="The value is a primitive value and an instance of the&#xA;CSSPrimitiveValue interface can be obtained by using&#xA;binding-specific casting methods on this instance of the&#xA;CSSValue interface." name="CSS_PRIMITIVE_VALUE" />
        <variable attributes="static" citdl="Number" doc="The value is a CSSValue list and an instance of the&#xA;CSSValueList interface can be obtained by using binding-&#xA;specific casting methods on this instance of the CSSValue&#xA;interface." name="CSS_VALUE_LIST" />
        <variable attributes="static" citdl="Number" doc="The value is a custom value." name="CSS_CUSTOM" />
        <variable citdl="DOMString" doc="A string representation of the current value." name="cssText" />
        <variable citdl="Number" doc="A code defining the type of the value as defined above." name="cssValueType" />
      </scope>
      <scope classrefs="CSSRule" doc="The CSSFontFaceRule interface represents a @font-face rule&#xA;in a CSS style sheet. The @font-face rule is used to hold a&#xA;set of font descriptions." ilk="class" name="CSSFontFaceRule">
        <variable citdl="CSSStyleDeclaration" doc="The declaration-block of this rule." name="style" />
      </scope>
      <scope classrefs="Text" doc="CDATA sections are used to escape blocks of text containing&#xA;characters that would otherwise be regarded as markup. The&#xA;only delimiter that is recognized in a CDATA section is the&#xA;&quot;]]&gt;&quot; string that ends the CDATA section." ilk="class" name="CDATASection" />
      <scope classrefs="stylesheets::DocumentStyle" doc="This interface represents a document with a CSS view. The&#xA;getOverrideStyle method provides a mechanism through which a&#xA;DOM author could effect immediate change to the style of an&#xA;element without modifying the explicitly linked style sheets&#xA;of a document or the inline style of elements in the style&#xA;sheets." ilk="class" name="DocumentCSS">
        <scope doc="This method is used to retrieve the override style&#xA;declaration for a specified element and a specified pseudo-&#xA;element." ilk="function" name="getOverrideStyle" returns="CSSStyleDeclaration" signature="getOverrideStyle(elt, pseudoElt)">
          <variable citdl="Element" ilk="argument" name="elt" />
          <variable citdl="DOMString" ilk="argument" name="pseudoElt" />
        </scope>
      </scope>
      <scope classrefs="CharacterData" doc="The Text interface inherits from CharacterData and&#xA;represents the textual content (termed character data in&#xA;XML) of an Element or Attr. If there is no markup inside an&#xA;element&apos;s content, the text is contained in a single object&#xA;implementing the Text interface that is the only child of&#xA;the element." ilk="class" name="Text">
        <scope doc="Breaks this node into two nodes at the specified offset ,&#xA;keeping both in the tree as siblings. After being split,&#xA;this node will contain all the content up to the offset&#xA;point." ilk="function" name="splitText" returns="String" signature="splitText(offset)">
          <variable citdl="Number" ilk="argument" name="offset" />
        </scope>
      </scope>
      <scope doc="The NodeList interface provides the abstraction of an&#xA;ordered collection of nodes, without defining or&#xA;constraining how this collection is implemented. NodeList&#xA;objects in the DOM are live." ilk="class" name="NodeList">
        <variable citdl="Number" doc="The number of nodes in the list. The range of valid child&#xA;node indices is 0 to length-1 inclusive." name="length" />
        <scope doc="Returns the index th item in the collection. If index is&#xA;greater than or equal to the number of nodes in the list,&#xA;this returns null." ilk="function" name="item" returns="Node" signature="item(index)">
          <variable citdl="Number" ilk="argument" name="index" />
        </scope>
      </scope>
      <scope doc="The DocumentEvent interface provides a mechanism by which&#xA;the user can create an Event of a type supported by the&#xA;implementation. It is expected that the DocumentEvent&#xA;interface will be implemented on the same object which&#xA;implements the Document interface in an implementation which&#xA;supports the Event model." ilk="class" name="DocumentEvent">
        <scope doc="The eventType parameter specifies the type of Event interface to be created. If the Event interface specified is supported by the implementation this method will return a new Event of the interface type requested. If the Event is to be dispatched via the dispatchEvent method the appropriate event init method must be called after creation in order to initialize the Event's values." ilk="function" name="createEvent" returns="Event" signature="createEvent(eventType)">
          <variable citdl="DOMString" ilk="argument" name="eventType" />
        </scope>
      </scope>
      <scope classrefs="Node ElementCSSInlineStyle EventTarget" doc="The Element interface represents an element in an HTML or&#xA;XML document. Elements may have attributes associated with&#xA;them; since the Element interface inherits from Node , the&#xA;generic Node interface attribute attributes may be used to&#xA;retrieve the set of all attributes for an element." ilk="class" name="Element">
        <variable citdl="DOMString" doc="The name of the element. For example, in: &lt;elementExample&#xA;id=&quot;demo&quot;&gt;..." name="tagName" />
        <scope doc="Retrieves an attribute value by name." ilk="function" name="getAttribute" returns="DOMString" signature="getAttribute(name)">
          <variable citdl="DOMString" ilk="argument" name="name" />
        </scope>
        <scope doc="Adds a new attribute. If an attribute with that name is&#xA;already present in the element, its value is changed to be&#xA;that of the value parameter." ilk="function" name="setAttribute" signature="setAttribute(name, value)">
          <variable citdl="DOMString" ilk="argument" name="name" />
          <variable citdl="DOMString" ilk="argument" name="value" />
        </scope>
        <scope doc="Removes an attribute by name. If the removed attribute is&#xA;known to have a default value, an attribute immediately&#xA;appears containing the default value as well as the&#xA;corresponding namespace URI, local name, and prefix when&#xA;applicable." ilk="function" name="removeAttribute" signature="removeAttribute(name)">
          <variable citdl="DOMString" ilk="argument" name="name" />
        </scope>
        <scope doc="Retrieves an attribute node by name. To retrieve an&#xA;attribute node by qualified name and namespace URI, use the&#xA;getAttributeNodeNS method." ilk="function" name="getAttributeNode" returns="Attr" signature="getAttributeNode(name)">
          <variable citdl="DOMString" ilk="argument" name="name" />
        </scope>
        <scope doc="Adds a new attribute node. If an attribute with that name (&#xA;nodeName ) is already present in the element, it is replaced&#xA;by the new one." ilk="function" name="setAttributeNode" returns="Attr" signature="setAttributeNode(newAttr)">
          <variable citdl="Attr" ilk="argument" name="newAttr" />
        </scope>
        <scope doc="Removes the specified attribute node. If the removed Attr&#xA;has a default value it is immediately replaced." ilk="function" name="removeAttributeNode" returns="Attr" signature="removeAttributeNode(oldAttr)">
          <variable citdl="Attr" ilk="argument" name="oldAttr" />
        </scope>
        <scope doc="Returns a NodeList of all descendant Elements with a given&#xA;tag name, in the order in which they are encountered in a&#xA;preorder traversal of this Element tree." ilk="function" name="getElementsByTagName" returns="NodeList" signature="getElementsByTagName(name)">
          <variable citdl="DOMString" ilk="argument" name="name" />
        </scope>
        <scope doc="Retrieves an attribute value by local name and namespace&#xA;URI. HTML-only DOM implementations do not need to implement&#xA;this method." ilk="function" name="getAttributeNS" returns="DOMString" signature="getAttributeNS(namespaceURI, localName)">
          <variable citdl="DOMString" ilk="argument" name="namespaceURI" />
          <variable citdl="DOMString" ilk="argument" name="localName" />
        </scope>
        <scope doc="Adds a new attribute. If an attribute with the same local&#xA;name and namespace URI is already present on the element,&#xA;its prefix is changed to be the prefix part of the&#xA;qualifiedName , and its value is changed to be the value&#xA;parameter." ilk="function" name="setAttributeNS" signature="setAttributeNS(namespaceURI, qualifiedName, value)">
          <variable citdl="DOMString" ilk="argument" name="namespaceURI" />
          <variable citdl="DOMString" ilk="argument" name="qualifiedName" />
          <variable citdl="DOMString" ilk="argument" name="value" />
        </scope>
        <scope doc="Removes an attribute by local name and namespace URI. If the&#xA;removed attribute has a default value it is immediately&#xA;replaced." ilk="function" name="removeAttributeNS" signature="removeAttributeNS(namespaceURI, localName)">
          <variable citdl="DOMString" ilk="argument" name="namespaceURI" />
          <variable citdl="DOMString" ilk="argument" name="localName" />
        </scope>
        <scope doc="Retrieves an Attr node by local name and namespace URI.&#xA;HTML-only DOM implementations do not need to implement this&#xA;method." ilk="function" name="getAttributeNodeNS" returns="Attr" signature="getAttributeNodeNS(namespaceURI, localName)">
          <variable citdl="DOMString" ilk="argument" name="namespaceURI" />
          <variable citdl="DOMString" ilk="argument" name="localName" />
        </scope>
        <scope doc="Adds a new attribute. If an attribute with that local name&#xA;and that namespace URI is already present in the element, it&#xA;is replaced by the new one." ilk="function" name="setAttributeNodeNS" returns="Attr" signature="setAttributeNodeNS(newAttr)">
          <variable citdl="Attr" ilk="argument" name="newAttr" />
        </scope>
        <scope doc="Returns a NodeList of all the descendant Elements with a&#xA;given local name and namespace URI in the order in which&#xA;they are encountered in a preorder traversal of this Element&#xA;tree. HTML-only DOM implementations do not need to implement&#xA;this method." ilk="function" name="getElementsByTagNameNS" returns="NodeList" signature="getElementsByTagNameNS(namespaceURI, localName)">
          <variable citdl="DOMString" ilk="argument" name="namespaceURI" />
          <variable citdl="DOMString" ilk="argument" name="localName" />
        </scope>
        <scope doc="Returns true when an attribute with a given name is&#xA;specified on this element or has a default value, false&#xA;otherwise." ilk="function" name="hasAttribute" returns="Boolean" signature="hasAttribute(name)">
          <variable citdl="DOMString" ilk="argument" name="name" />
        </scope>
        <scope doc="Returns true when an attribute with a given local name and&#xA;namespace URI is specified on this element or has a default&#xA;value, false otherwise. HTML-only DOM implementations do not&#xA;need to implement this method." ilk="function" name="hasAttributeNS" returns="Boolean" signature="hasAttributeNS(namespaceURI, localName)">
          <variable citdl="DOMString" ilk="argument" name="namespaceURI" />
          <variable citdl="DOMString" ilk="argument" name="localName" />
        </scope>
      </scope>
      <scope classrefs="CSSRule" doc="The CSSPageRule interface represents a @page rule within a&#xA;CSS style sheet. The @page rule is used to specify the&#xA;dimensions, orientation, margins, etc." ilk="class" name="CSSPageRule">
        <variable citdl="DOMString" doc="The parsable textual representation of the page selector for&#xA;the rule." name="selectorText" />
        <variable citdl="CSSStyleDeclaration" doc="The declaration-block of this rule." name="style" />
      </scope>
      <scope classrefs="Node" doc="This interface represents a notation declared in the DTD. A&#xA;notation either declares, by name, the format of an unparsed&#xA;entity (see section 4.7 of the XML 1.0 specification ), or&#xA;is used for formal declaration of processing instruction&#xA;targets (see section 2.6 of the XML 1.0 specification )." ilk="class" name="Notation">
        <variable citdl="DOMString" doc="The public identifier of this notation. If the public&#xA;identifier was not specified, this is null." name="publicId" />
        <variable citdl="DOMString" doc="The system identifier of this notation. If the system&#xA;identifier was not specified, this is null." name="systemId" />
      </scope>
      <scope doc="Iterators are used to step through a set of nodes, e.g. the&#xA;set of nodes in a NodeList , the document subtree governed&#xA;by a particular Node , the results of a query, or any other&#xA;set of nodes." ilk="class" name="NodeIterator">
        <variable citdl="Node" doc="The root node of the NodeIterator , as specified when it was&#xA;created." name="root" />
        <variable citdl="Number" doc="This attribute determines which node types are presented via&#xA;the iterator. The available set of constants is defined in&#xA;the NodeFilter interface." name="whatToShow" />
        <variable citdl="NodeFilter" doc="The NodeFilter used to screen nodes." name="filter" />
        <variable citdl="Boolean" doc="The value of this flag determines whether the children of&#xA;entity reference nodes are visible to the iterator. If&#xA;false, they and their descendants will be rejected." name="expandEntityReferences" />
        <scope doc="Returns the next node in the set and advances the position&#xA;of the iterator in the set. After a NodeIterator is created,&#xA;the first call to nextNode() returns the first node in the&#xA;set." ilk="function" name="nextNode" returns="Node" signature="nextNode()" />
        <scope doc="Returns the previous node in the set and moves the position&#xA;of the NodeIterator backwards in the set." ilk="function" name="previousNode" returns="Node" signature="previousNode()" />
        <scope doc="Detaches the NodeIterator from the set which it iterated&#xA;over, releasing any computational resources and placing the&#xA;iterator in the INVALID state. After detach has been&#xA;invoked, calls to nextNode or previousNode will raise the&#xA;exception INVALID_STATE_ERR." ilk="function" name="detach" signature="detach()" />
      </scope>
      <scope doc="Filters are objects that know how to &quot;filter out&quot; nodes. If&#xA;a NodeIterator or TreeWalker is given a NodeFilter , it&#xA;applies the filter before it returns the next node." ilk="class" name="NodeFilter">
        <variable attributes="static" citdl="Number" doc="Accept the node. Navigation methods defined for NodeIterator&#xA;or TreeWalker will return this node." name="FILTER_ACCEPT" />
        <variable attributes="static" citdl="Number" doc="Reject the node. Navigation methods defined for NodeIterator&#xA;or TreeWalker will not return this node." name="FILTER_REJECT" />
        <variable attributes="static" citdl="Number" doc="Skip this single node. Navigation methods defined for&#xA;NodeIterator or TreeWalker will not return this node." name="FILTER_SKIP" />
        <variable attributes="static" citdl="Number" doc="Show all Nodes." name="SHOW_ALL" />
        <variable attributes="static" citdl="Number" doc="Show Element nodes." name="SHOW_ELEMENT" />
        <variable attributes="static" citdl="Number" doc="Show Attr nodes. This is meaningful only when creating an&#xA;iterator or tree-walker with an attribute node as its root ;&#xA;in this case, it means that the attribute node will appear&#xA;in the first position of the iteration or traversal." name="SHOW_ATTRIBUTE" />
        <variable attributes="static" citdl="Number" doc="Show Text nodes." name="SHOW_TEXT" />
        <variable attributes="static" citdl="Number" doc="Show CDATASection nodes." name="SHOW_CDATA_SECTION" />
        <variable attributes="static" citdl="Number" doc="Show EntityReference nodes." name="SHOW_ENTITY_REFERENCE" />
        <variable attributes="static" citdl="Number" doc="Show Entity nodes. This is meaningful only when creating an&#xA;iterator or tree-walker with an Entity node as its root ; in&#xA;this case, it means that the Entity node will appear in the&#xA;first position of the traversal." name="SHOW_ENTITY" />
        <variable attributes="static" citdl="Number" doc="Show ProcessingInstruction nodes." name="SHOW_PROCESSING_INSTRUCTION" />
        <variable attributes="static" citdl="Number" doc="Show Comment nodes." name="SHOW_COMMENT" />
        <variable attributes="static" citdl="Number" doc="Show Document nodes." name="SHOW_DOCUMENT" />
        <variable attributes="static" citdl="Number" doc="Show DocumentType nodes." name="SHOW_DOCUMENT_TYPE" />
        <variable attributes="static" citdl="Number" doc="Show DocumentFragment nodes." name="SHOW_DOCUMENT_FRAGMENT" />
        <variable attributes="static" citdl="Number" doc="Show Notation nodes. This is meaningful only when creating&#xA;an iterator or tree-walker with a Notation node as its root&#xA;; in this case, it means that the Notation node will appear&#xA;in the first position of the traversal." name="SHOW_NOTATION" />
        <scope doc="Test whether a specified node is visible in the logical view&#xA;of a TreeWalker or NodeIterator. This function will be&#xA;called by the implementation of TreeWalker and NodeIterator&#xA;; it is not normally called directly from user code." ilk="function" name="acceptNode" returns="Number" signature="acceptNode(n)">
          <variable citdl="Node" ilk="argument" name="n" />
        </scope>
      </scope>
      <scope doc="TreeWalker objects are used to navigate a document tree or&#xA;subtree using the view of the document defined by their&#xA;whatToShow flags and filter (if any). Any function which&#xA;performs navigation using a TreeWalker will automatically&#xA;support any view defined by a TreeWalker." ilk="class" name="TreeWalker">
        <variable citdl="Node" doc="The root node of the TreeWalker , as specified when it was&#xA;created." name="root" />
        <variable citdl="Number" doc="This attribute determines which node types are presented via&#xA;the TreeWalker. The available set of constants is defined&#xA;in the NodeFilter interface." name="whatToShow" />
        <variable citdl="NodeFilter" doc="The filter used to screen nodes." name="filter" />
        <variable citdl="Boolean" doc="The value of this flag determines whether the children of&#xA;entity reference nodes are visible to the TreeWalker. If&#xA;false, they and their descendants will be rejected." name="expandEntityReferences" />
        <variable citdl="Node" doc="The node at which the TreeWalker is currently positioned.&#xA;Alterations to the DOM tree may cause the current node to no&#xA;longer be accepted by the TreeWalker &apos;s associated filter." name="currentNode" />
        <scope doc="Moves to and returns the closest visible ancestor node of&#xA;the current node. If the search for parentNode attempts to&#xA;step upward from the TreeWalker &apos;s root node, or if it fails&#xA;to find a visible ancestor node, this method retains the&#xA;current position and returns null." ilk="function" name="parentNode" returns="Node" signature="parentNode()" />
        <scope doc="Moves the TreeWalker to the first visible child of the&#xA;current node, and returns the new node. If the current node&#xA;has no visible children, returns null , and retains the&#xA;current node." ilk="function" name="firstChild" returns="Node" signature="firstChild()" />
        <scope doc="Moves the TreeWalker to the last visible child of the&#xA;current node, and returns the new node. If the current node&#xA;has no visible children, returns null , and retains the&#xA;current node." ilk="function" name="lastChild" returns="Node" signature="lastChild()" />
        <scope doc="Moves the TreeWalker to the previous sibling of the current&#xA;node, and returns the new node. If the current node has no&#xA;visible previous sibling , returns null , and retains the&#xA;current node." ilk="function" name="previousSibling" returns="Node" signature="previousSibling()" />
        <scope doc="Moves the TreeWalker to the next sibling of the current&#xA;node, and returns the new node. If the current node has no&#xA;visible next sibling , returns null , and retains the&#xA;current node." ilk="function" name="nextSibling" returns="Node" signature="nextSibling()" />
        <scope doc="Moves the TreeWalker to the previous visible node in&#xA;document order relative to the current node, and returns the&#xA;new node. If the current node has no previous node, or if&#xA;the search for previousNode attempts to step upward from the&#xA;TreeWalker &apos;s root node, returns null , and retains the&#xA;current node." ilk="function" name="previousNode" returns="Node" signature="previousNode()" />
        <scope doc="Moves the TreeWalker to the next visible node in document&#xA;order relative to the current node, and returns the new&#xA;node. If the current node has no next node, or if the search&#xA;for nextNode attempts to step upward from the TreeWalker &apos;s&#xA;root node, returns null , and retains the current node." ilk="function" name="nextNode" returns="Node" signature="nextNode()" />
      </scope>
      <scope doc="DocumentTraversal contains methods that create iterators and&#xA;tree-walkers to traverse a node and its children in document&#xA;order (depth first, pre-order traversal, which is equivalent&#xA;to the order in which the start tags occur in the text&#xA;representation of the document). In DOMs which support the&#xA;Traversal feature, DocumentTraversal will be implemented by&#xA;the same objects that implement the Document interface." ilk="class" name="DocumentTraversal">
        <scope doc="Create a new NodeIterator over the subtree rooted at the&#xA;specified node." ilk="function" name="createNodeIterator" returns="NodeIterator" signature="createNodeIterator(root, whatToShow, filter, entityReferenceExpansion)">
          <variable citdl="Node" ilk="argument" name="root" />
          <variable citdl="Number" ilk="argument" name="whatToShow" />
          <variable citdl="NodeFilter" ilk="argument" name="filter" />
          <variable citdl="Boolean" ilk="argument" name="entityReferenceExpansion" />
        </scope>
        <scope doc="Create a new TreeWalker over the subtree rooted at the&#xA;specified node." ilk="function" name="createTreeWalker" returns="TreeWalker" signature="createTreeWalker(root, whatToShow, filter, entityReferenceExpansion)">
          <variable citdl="Node" ilk="argument" name="root" />
          <variable citdl="Number" ilk="argument" name="whatToShow" />
          <variable citdl="NodeFilter" ilk="argument" name="filter" />
          <variable citdl="Boolean" ilk="argument" name="entityReferenceExpansion" />
        </scope>
      </scope>
      <scope classrefs="CSSValue" doc="The CSSPrimitiveValue interface represents a single CSS&#xA;value. This interface may be used to determine the value of&#xA;a specific style property currently set in a block or to set&#xA;a specific style property explicitly within the block." ilk="class" name="CSSPrimitiveValue">
        <variable attributes="static" citdl="Number" doc="The value is not a recognized CSS2 value. The value can only&#xA;be obtained by using the cssText attribute." name="CSS_UNKNOWN" />
        <variable attributes="static" citdl="Number" doc="The value is a simple number. The value can be obtained by&#xA;using the getFloatValue method." name="CSS_NUMBER" />
        <variable attributes="static" citdl="Number" doc="The value is a percentage. The value can be obtained by&#xA;using the getFloatValue method." name="CSS_PERCENTAGE" />
        <variable attributes="static" citdl="Number" doc="The value is a length (ems). The value can be obtained by&#xA;using the getFloatValue method." name="CSS_EMS" />
        <variable attributes="static" citdl="Number" doc="The value is a length (exs). The value can be obtained by&#xA;using the getFloatValue method." name="CSS_EXS" />
        <variable attributes="static" citdl="Number" doc="The value is a length (px). The value can be obtained by&#xA;using the getFloatValue method." name="CSS_PX" />
        <variable attributes="static" citdl="Number" doc="The value is a length (cm). The value can be obtained by&#xA;using the getFloatValue method." name="CSS_CM" />
        <variable attributes="static" citdl="Number" doc="The value is a length (mm). The value can be obtained by&#xA;using the getFloatValue method." name="CSS_MM" />
        <variable attributes="static" citdl="Number" doc="The value is a length (in). The value can be obtained by&#xA;using the getFloatValue method." name="CSS_IN" />
        <variable attributes="static" citdl="Number" doc="The value is a length (pt). The value can be obtained by&#xA;using the getFloatValue method." name="CSS_PT" />
        <variable attributes="static" citdl="Number" doc="The value is a length (pc). The value can be obtained by&#xA;using the getFloatValue method." name="CSS_PC" />
        <variable attributes="static" citdl="Number" doc="The value is an angle (deg). The value can be obtained by&#xA;using the getFloatValue method." name="CSS_DEG" />
        <variable attributes="static" citdl="Number" doc="The value is an angle (rad). The value can be obtained by&#xA;using the getFloatValue method." name="CSS_RAD" />
        <variable attributes="static" citdl="Number" doc="The value is an angle (grad). The value can be obtained by&#xA;using the getFloatValue method." name="CSS_GRAD" />
        <variable attributes="static" citdl="Number" doc="The value is a time (ms). The value can be obtained by&#xA;using the getFloatValue method." name="CSS_MS" />
        <variable attributes="static" citdl="Number" doc="The value is a time (s). The value can be obtained by using&#xA;the getFloatValue method." name="CSS_S" />
        <variable attributes="static" citdl="Number" doc="The value is a frequency (Hz). The value can be obtained by&#xA;using the getFloatValue method." name="CSS_HZ" />
        <variable attributes="static" citdl="Number" doc="The value is a frequency (kHz). The value can be obtained&#xA;by using the getFloatValue method." name="CSS_KHZ" />
        <variable attributes="static" citdl="Number" doc="The value is a number with an unknown dimension. The value&#xA;can be obtained by using the getFloatValue method." name="CSS_DIMENSION" />
        <variable attributes="static" citdl="Number" doc="The value is a STRING. The value can be obtained by using&#xA;the getStringValue method." name="CSS_STRING" />
        <variable attributes="static" citdl="Number" doc="The value is a URI. The value can be obtained by using the&#xA;getStringValue method." name="CSS_URI" />
        <variable attributes="static" citdl="Number" doc="The value is an identifier. The value can be obtained by&#xA;using the getStringValue method." name="CSS_IDENT" />
        <variable attributes="static" citdl="Number" doc="The value is a attribute function. The value can be&#xA;obtained by using the getStringValue method." name="CSS_ATTR" />
        <variable attributes="static" citdl="Number" doc="The value is a counter or counters function. The value can&#xA;be obtained by using the getCounterValue method." name="CSS_COUNTER" />
        <variable attributes="static" citdl="Number" doc="The value is a rect function. The value can be obtained by&#xA;using the getRectValue method." name="CSS_RECT" />
        <variable attributes="static" citdl="Number" doc="The value is a RGB color. The value can be obtained by&#xA;using the getRGBColorValue method." name="CSS_RGBCOLOR" />
        <variable citdl="Number" doc="The type of the value as defined by the constants specified&#xA;above." name="primitiveType" />
        <scope doc="A method to set the float value with a specified unit. If&#xA;the property attached with this value can not accept the&#xA;specified unit or the float value, the value will be&#xA;unchanged and a DOMException will be raised." ilk="function" name="setFloatValue" signature="setFloatValue(unitType, floatValue)">
          <variable citdl="Number" ilk="argument" name="unitType" />
          <variable citdl="Number" ilk="argument" name="floatValue" />
        </scope>
        <scope doc="This method is used to get a float value in a specified&#xA;unit. If this CSS value doesn&apos;t contain a float value or&#xA;can&apos;t be converted into the specified unit, a DOMException&#xA;is raised." ilk="function" name="getFloatValue" returns="Number" signature="getFloatValue(unitType)">
          <variable citdl="Number" ilk="argument" name="unitType" />
        </scope>
        <scope doc="A method to set the string value with the specified unit. If&#xA;the property attached to this value can&apos;t accept the&#xA;specified unit or the string value, the value will be&#xA;unchanged and a DOMException will be raised." ilk="function" name="setStringValue" signature="setStringValue(stringType, stringValue)">
          <variable citdl="Number" ilk="argument" name="stringType" />
          <variable citdl="DOMString" ilk="argument" name="stringValue" />
        </scope>
        <scope doc="This method is used to get the string value. If the CSS&#xA;value doesn&apos;t contain a string value, a DOMException is&#xA;raised." ilk="function" name="getStringValue" returns="DOMString" signature="getStringValue()" />
        <scope doc="This method is used to get the Counter value. If this CSS&#xA;value doesn&apos;t contain a counter value, a DOMException is&#xA;raised." ilk="function" name="getCounterValue" returns="Counter" signature="getCounterValue()" />
        <scope doc="This method is used to get the Rect value. If this CSS value&#xA;doesn&apos;t contain a rect value, a DOMException is raised." ilk="function" name="getRectValue" returns="Rect" signature="getRectValue()" />
        <scope doc="This method is used to get the RGB color. If this CSS value&#xA;doesn&apos;t contain a RGB color value, a DOMException is raised." ilk="function" name="getRGBColorValue" returns="RGBColor" signature="getRGBColorValue()" />
      </scope>
      <scope classrefs="Node" doc="The CharacterData interface extends Node with a set of&#xA;attributes and methods for accessing character data in the&#xA;DOM. For clarity this set is defined here rather than on&#xA;each object that uses these attributes and methods." ilk="class" name="CharacterData">
        <variable citdl="DOMString" doc="The character data of the node that implements this&#xA;interface. The DOM implementation may not put arbitrary&#xA;limits on the amount of data that may be stored in a&#xA;CharacterData node." name="data" />
        <variable citdl="Number" doc="The number of 16-bit units that are available through data&#xA;and the substringData method below. This may have the value&#xA;zero, i.e., CharacterData nodes may be empty." name="length" />
        <scope doc="Extracts a range of data from the node." ilk="function" name="substringData" returns="DOMString" signature="substringData(offset, count)">
          <variable citdl="Number" ilk="argument" name="offset" />
          <variable citdl="Number" ilk="argument" name="count" />
        </scope>
        <scope doc="Append the string to the end of the character data of the&#xA;node. Upon success, data provides access to the&#xA;concatenation of data and the DOMString specified." ilk="function" name="appendData" signature="appendData(arg)">
          <variable citdl="DOMString" ilk="argument" name="arg" />
        </scope>
        <scope doc="Insert a string at the specified 16-bit unit offset." ilk="function" name="insertData" signature="insertData(offset, arg)">
          <variable citdl="Number" ilk="argument" name="offset" />
          <variable citdl="DOMString" ilk="argument" name="arg" />
        </scope>
        <scope doc="Remove a range of 16-bit units from the node. Upon success,&#xA;data and length reflect the change." ilk="function" name="deleteData" signature="deleteData(offset, count)">
          <variable citdl="Number" ilk="argument" name="offset" />
          <variable citdl="Number" ilk="argument" name="count" />
        </scope>
        <scope doc="Replace the characters starting at the specified 16-bit unit&#xA;offset with the specified string." ilk="function" name="replaceData" signature="replaceData(offset, count, arg)">
          <variable citdl="Number" ilk="argument" name="offset" />
          <variable citdl="Number" ilk="argument" name="count" />
          <variable citdl="DOMString" ilk="argument" name="arg" />
        </scope>
      </scope>
    </scope>
  </file>
</codeintel>
