This is to support vi block selection. The following patch adds a property to
always enforce the selection to be a block selection.

http://bugs.activestate.com/show_bug.cgi?id=87281

Index: C:\as\komodo-devel\src\scintilla\src\Selection.h
--- src/Selection.h 
+++ src/Selection.h (unsaved) 
@@ -144,6 +144,7 @@
 	Selection();
 	~Selection();
 	bool IsRectangular() const;
+	bool enforceRectangular;
 	int MainCaret() const;
 	int MainAnchor() const;
 	SelectionRange &Rectangular();
Index: C:\as\komodo-devel\src\scintilla\src\Selection.cxx
--- src/Selection.cxx 
+++ src/Selection.cxx (unsaved) 
@@ -156,7 +156,7 @@
 	}
 }
 
-Selection::Selection() : mainRange(0), moveExtends(false), tentativeMain(false), selType(selStream) {
+Selection::Selection() : mainRange(0), moveExtends(false), tentativeMain(false), selType(selStream), enforceRectangular(false) {
 	AddSelection(SelectionPosition(0));
 }
 
Index: C:\as\komodo-devel\src\scintilla\src\Editor.cxx
--- src/Editor.cxx 
+++ src/Editor.cxx (unsaved) 
@@ -866,7 +866,10 @@
 int Editor::MovePositionTo(SelectionPosition newPos, Selection::selTypes selt, bool ensureVisible) {
 	bool simpleCaret = (sel.Count() == 1) && sel.Empty();
 	SelectionPosition spCaret = sel.Last();
 
+	if (sel.enforceRectangular) {
+		selt = Selection::selRectangle;
+	}
 	int delta = newPos.Position() - sel.MainCaret();
 	newPos = ClampPositionIntoDocument(newPos);
 	newPos = MovePositionOutsideChar(newPos, delta);
@@ -4717,6 +4720,9 @@
 }
 
 void Editor::CursorUpOrDown(int direction, Selection::selTypes selt) {
+	if (sel.enforceRectangular) {
+		selt = Selection::selRectangle;
+	}
 	SelectionPosition caretToUse = sel.Range(sel.Main()).caret;
 	if (sel.IsRectangular()) {
 		if (selt ==  Selection::noSel) {
@@ -4752,6 +4758,9 @@
 }
 
 void Editor::ParaUpOrDown(int direction, Selection::selTypes selt) {
+	if (sel.enforceRectangular) {
+		selt = Selection::selRectangle;
+	}
 	int lineDoc, savedPos = sel.MainCaret();
 	do {
 		MovePositionTo(SelectionPosition(direction > 0 ? pdoc->ParaDown(sel.MainCaret()) : pdoc->ParaUp(sel.MainCaret())), selt);
@@ -8164,22 +8173,27 @@
 			case SC_SEL_STREAM:
 				sel.SetMoveExtends(!sel.MoveExtends() || (sel.selType != Selection::selStream));
 				sel.selType = Selection::selStream;
+				sel.enforceRectangular = false;
 				break;
 			case SC_SEL_RECTANGLE:
 				sel.SetMoveExtends(!sel.MoveExtends() || (sel.selType != Selection::selRectangle));
 				sel.selType = Selection::selRectangle;
+				sel.enforceRectangular = true;
 				break;
 			case SC_SEL_LINES:
 				sel.SetMoveExtends(!sel.MoveExtends() || (sel.selType != Selection::selLines));
 				sel.selType = Selection::selLines;
+				sel.enforceRectangular = false;
 				break;
 			case SC_SEL_THIN:
 				sel.SetMoveExtends(!sel.MoveExtends() || (sel.selType != Selection::selThin));
 				sel.selType = Selection::selThin;
+				sel.enforceRectangular = false;
 				break;
 			default:
 				sel.SetMoveExtends(!sel.MoveExtends() || (sel.selType != Selection::selStream));
 				sel.selType = Selection::selStream;
+				sel.enforceRectangular = false;
 			}
 			InvalidateSelection(sel.RangeMain(), true);
 		}
