Index: macosx/ScintillaMacOSX.cxx
===================================================================
--- macosx/ScintillaMacOSX.cxx	(revision 19760)
+++ macosx/ScintillaMacOSX.cxx	(working copy)
@@ -233,13 +233,13 @@
 
 ScintillaMacOSX::~ScintillaMacOSX() {
     // If the window is closed and the timer is not removed,
     // A segment violation will occur when it attempts to fire the timer next.
+    Finalise();
     if ( mouseTrackingRef != NULL ) {
         ReleaseMouseTrackingRegion(mouseTrackingRef);
     }
     mouseTrackingRef = NULL;
-    SetTicking(false);
 #ifdef EXT_INPUT
     ExtInput::detach (GetViewRef());
 #endif
 }
@@ -345,33 +345,65 @@
     Point pt;
     int startPos, endPos, ep;
     Rect rcSel;
-    rcSel.top = rcSel.bottom = rcSel.right = rcSel.left = -1;
-    for (int l = startLine; l <= endLine; l++) {
-        startPos = WndProc(SCI_GETLINESELSTARTPOSITION, l, 0);
-        endPos = WndProc(SCI_GETLINESELENDPOSITION, l, 0);
-        if (endPos == startPos) continue;
+    
+    if (startLine==endLine && WndProc(SCI_GETWRAPMODE, 0, 0) != SC_WRAP_NONE) {
+        // Komodo bug http://bugs.activestate.com/show_bug.cgi?id=87571
+        // Scintilla bug https://sourceforge.net/tracker/?func=detail&atid=102439&aid=3040200&group_id=2439
+        // If the width on a wrapped-line selection is negative,
+        // find a better bounding rectangle.
+      
+        Point ptStart, ptEnd;
+        startPos = WndProc(SCI_GETLINESELSTARTPOSITION, startLine, 0);
+        endPos =   WndProc(SCI_GETLINESELENDPOSITION,   startLine, 0);
         // step back a position if we're counting the newline
-        ep = WndProc(SCI_GETLINEENDPOSITION, l, 0);
+        ep =       WndProc(SCI_GETLINEENDPOSITION,      startLine, 0);
         if (endPos > ep) endPos = ep;
+        ptStart = LocationFromPosition(startPos);
+        ptEnd =   LocationFromPosition(endPos);
+        if (ptStart.y == ptEnd.y) {
+            // We're just selecting part of one visible line
+            rcSel.left = ptStart.x;
+            rcSel.right = ptEnd.x < client.right ? ptEnd.x : client.right;
+        } else {
+            // Find the bounding box.
+            startPos = WndProc(SCI_POSITIONFROMLINE, startLine, 0);
+            rcSel.left = LocationFromPosition(startPos).x;
+            rcSel.right = client.right;
+        }
+        rcSel.top = ptStart.y;
+        rcSel.bottom = ptEnd.y + vs.lineHeight;
+        if (rcSel.bottom > client.bottom) {
+            rcSel.bottom = client.bottom;
+        }
+    } else {
+        rcSel.top = rcSel.bottom = rcSel.right = rcSel.left = -1;
+        for (int l = startLine; l <= endLine; l++) {
+            startPos = WndProc(SCI_GETLINESELSTARTPOSITION, l, 0);
+            endPos = WndProc(SCI_GETLINESELENDPOSITION, l, 0);
+            if (endPos == startPos) continue;
+            // step back a position if we're counting the newline
+            ep = WndProc(SCI_GETLINEENDPOSITION, l, 0);
+            if (endPos > ep) endPos = ep;
 
-        pt = LocationFromPosition(startPos); // top left of line selection
-        if (pt.x < rcSel.left || rcSel.left < 0) rcSel.left = pt.x;
-        if (pt.y < rcSel.top || rcSel.top < 0) rcSel.top = pt.y;
+            pt = LocationFromPosition(startPos); // top left of line selection
+            if (pt.x < rcSel.left || rcSel.left < 0) rcSel.left = pt.x;
+            if (pt.y < rcSel.top || rcSel.top < 0) rcSel.top = pt.y;
 
-        pt = LocationFromPosition(endPos); // top right of line selection
-        pt.y += vs.lineHeight; // get to the bottom of the line
-        if (pt.x > rcSel.right || rcSel.right < 0) {
-            if (pt.x > client.right)
-                rcSel.right = client.right;
-            else
-                rcSel.right = pt.x;
+            pt = LocationFromPosition(endPos); // top right of line selection
+            pt.y += vs.lineHeight; // get to the bottom of the line
+            if (pt.x > rcSel.right || rcSel.right < 0) {
+                if (pt.x > client.right)
+                    rcSel.right = client.right;
+                else
+                    rcSel.right = pt.x;
+            }
+            if (pt.y > rcSel.bottom || rcSel.bottom < 0) {
+                if (pt.y > client.bottom)
+                    rcSel.bottom = client.bottom;
+                else
+                    rcSel.bottom = pt.y;
+            }
         }
-        if (pt.y > rcSel.bottom || rcSel.bottom < 0) {
-            if (pt.y > client.bottom)
-                rcSel.bottom = client.bottom;
-            else
-                rcSel.bottom = pt.y;
-        }
     }
 
     // must convert to global coordinates for drag regions, but also save the
@@ -623,6 +623,7 @@
     kFormatText,
     kFormatUnicode,
     kFormatUTF8,
+    kFormatUTF16LE,
     kFormatFile
 };
 
@@ -664,14 +666,22 @@
             CFRelease(data);
         }
     }
-    data = CFStringCreateExternalRepresentation ( kCFAllocatorDefault, string, kCFStringEncodingUnicode, 0 );
+
+    data = CFStringCreateExternalRepresentation ( kCFAllocatorDefault, string, kCFStringEncodingUTF8, 0 );
     if (data) {
-        PasteboardPutItemFlavor( theClipboard, (PasteboardItemID)1,
-                                CFSTR("public.utf16-plain-text"),
-                                data, 0 );
+        // When created as kCFStringEncodingUTF16LE - no BOM is added, whereas
+        // if created with kCFStringEncodingUnicode - a BOM may be added.
+        // The flavor "public.utf16-plain-text" is meant to be without a BOM.
+        // Fixes http://bugs.activestate.com/show_bug.cgi?id=81340:
+        // However, the fix for bug 81340 resulted in bug 88563:
+        //    total crash when copying non-ascii text on OSX 10.4 (or lower?)
+        // Testing shows no problems copy/pasting to other apps
+        PasteboardPutItemFlavor( theClipboard, (PasteboardItemID)1,
+                                kUTTypeUTF8PlainText, data, 0 );
         CFRelease(data);
         data = NULL;
     }
+
     data = CFStringCreateExternalRepresentation ( kCFAllocatorDefault, string, kCFStringEncodingMacRoman, 0 );
     if (data) {
         PasteboardPutItemFlavor( theClipboard, (PasteboardItemID)1,
@@ -736,6 +743,9 @@
                     isRectangular = true;
                 }
                 else if (UTTypeConformsTo(flavorType, CFSTR("public.utf16-plain-text"))) { // this is 'utxt'
+                    format = kFormatUTF16LE;
+                }
+                else if (UTTypeConformsTo(flavorType, CFSTR("public.utf16-external-plain-text"))) { // this is 'utxt'
                     format = kFormatUnicode;
                 }
                 else if (UTTypeConformsTo(flavorType, CFSTR("public.utf8-plain-text"))) {
@@ -768,7 +778,11 @@
                         case kFormatUnicode:
                             data = CFDataCreate (NULL, dataBytes, dataSize);
                             textString = CFStringCreateFromExternalRepresentation (NULL, data, kCFStringEncodingUnicode);
                             break;
+                        case kFormatUTF16LE:
+                            data = CFDataCreate (NULL, dataBytes, dataSize);
+                            textString = CFStringCreateFromExternalRepresentation (NULL, data, kCFStringEncodingUTF16LE);
+                            break;
                         case kFormatUTF8:
                             data = CFDataCreate (NULL, dataBytes, dataSize);
                             textString = CFStringCreateFromExternalRepresentation (NULL, data, kCFStringEncodingUTF8);
@@ -782,11 +815,16 @@
     }
 PasteboardDataRetrieved:
     if (flavorTypeArray != NULL) CFRelease(flavorTypeArray);
-        int newlen = 0;
     if (textString != NULL) {
-        selectedText->s = GetStringFromCFString(textString, &selectedText->len);
-        selectedText->rectangular = isRectangular;
+        if (CFStringGetLength(textString) == 0) {
+            // Bug 85437 -- GetStringFromCFString() with a zero bytes
+            // crashes on osx.
+            haveMatch = false;
+        } else {
+            selectedText->s = GetStringFromCFString(textString, &selectedText->len);
+            selectedText->rectangular = isRectangular;
+        }
         // Default allocator releases both the CFString and the UniChar buffer (text)
         CFRelease( textString );
         textString = NULL;
     }
@@ -1295,8 +1328,9 @@
     if (NULL != notifyProc)
         notifyProc (notifyObj, WM_COMMAND,
                 (uintptr_t) ((focus ? SCEN_SETFOCUS : SCEN_KILLFOCUS) << 16),
                 (uintptr_t) GetViewRef());
+    SetTicking(focus);
 }
 
 void ScintillaMacOSX::NotifyChange() {
     if (NULL != notifyProc)
@@ -1534,9 +1568,9 @@
     pdoc->BeginUndoAction();
     ClearSelection();
     if (selectedText.rectangular) {
         SelectionPosition selStart = sel.RangeMain().Start();
-        PasteRectangular(selStart, selectedText.s, selectedText.len);
+        PasteRectangular(selStart.Position(), selectedText.s, selectedText.len);
     } else
     if ( pdoc->InsertString( sel.RangeMain().caret.Position(), selectedText.s, selectedText.len ) ) {
         SetEmptySelection( sel.RangeMain().caret.Position() + selectedText.len );
     }
