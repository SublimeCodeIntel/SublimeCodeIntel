diff -r -du src/AutoComplete.cxx src/AutoComplete.cxx
--- src/AutoComplete.cxx	2005-08-29 18:09:20.000000000 -0700
+++ src/AutoComplete.cxx	2007-05-01 17:00:17.000000000 -0700
@@ -124,6 +124,56 @@
 	lb->Select(current);
 }
 
+
+/* ActiveState change:
+ * Change AutoComplete "ignoreCase" ordering of autocomplete results to
+ * move all non-alphanumeric characters to after the numbers and letters.
+ * The letters are still compared case-insensitively.
+ *
+ * Justification: It is weird that some punctuation chars appear before
+ * numbers and letters in sort order (e.g., '!' and '#'), some in between
+ * (e.g., ':', '<') and some after (e.g., '_', '['). This can be relevant
+ * for autocomplete in some languages -- for example, CSS:
+ * 	p {
+ * 		color: <|>
+ * 		       +------------+
+ * 		       | inherit    |
+ * 		       | rgb(       |
+ * 		       | !important |
+ * 		       | #          |
+ * 		       +------------+
+ *  }
+ * */
+static inline char OrdPunctLast(char ch) {
+	if (ch >= 'a' && ch <= 'z')
+		return static_cast<char>(ch - 'a' + 'A');
+	else if (ch >= '!' && ch <= '/')
+		return static_cast<char>(ch - '!' + '[');
+	else if (ch >= ':' && ch <= '@')
+		return static_cast<char>(ch - ':' + '[');
+	else
+		return ch;
+}
+
+static int CompareNPunctLast(const char *a, const char *b, size_t len) {
+ 	while (*a && *b && len) {
+ 		if (*a != *b) {
+ 			char upperA = OrdPunctLast(*a);
+ 			char upperB = OrdPunctLast(*b);
+ 			if (upperA != upperB)
+ 				return upperA - upperB;
+ 		}
+ 		a++;
+ 		b++;
+ 		len--;
+ 	}
+ 	if (len == 0)
+ 		return 0;
+ 	else
+ 		// Either *a or *b is nul
+ 		return *a - *b;	
+}
+
 void AutoComplete::Select(const char *word) {
 	size_t lenWord = strlen(word);
 	int location = -1;
@@ -136,7 +186,7 @@
 		lb->GetValue(pivot, item, maxItemLen);
 		int cond;
 		if (ignoreCase)
-			cond = CompareNCaseInsensitive(word, item, lenWord);
+			cond = CompareNPunctLast(word, item, lenWord);
 		else
 			cond = strncmp(word, item, lenWord);
 		if (!cond) {
@@ -144,7 +194,7 @@
 			while (pivot > start) {
 				lb->GetValue(pivot-1, item, maxItemLen);
 				if (ignoreCase)
-					cond = CompareNCaseInsensitive(word, item, lenWord);
+					cond = CompareNPunctLast(word, item, lenWord);
 				else
 					cond = strncmp(word, item, lenWord);
 				if (0 != cond)
@@ -160,7 +210,7 @@
 						location = pivot;
 						break;
 					}
-					if (CompareNCaseInsensitive(word, item, lenWord))
+					if (CompareNPunctLast(word, item, lenWord))
 						break;
 				}
 			}
Only in src: CVS
diff -r -du src/CellBuffer.cxx src/CellBuffer.cxx
--- src/CellBuffer.cxx	2005-08-29 18:09:20.000000000 -0700
+++ src/CellBuffer.cxx	2007-05-01 17:00:17.000000000 -0700
@@ -769,6 +773,11 @@
 void CellBuffer::BasicDeleteChars(int position, int deleteLength) {
 	if (deleteLength == 0)
 		return;
+	// XXX ACTIVESTATE bug 48527 {
+	int length = substance.Length();
+	if (deleteLength > length)
+		deleteLength = length;
+	// XXX }
 
 	if ((position == 0) && (deleteLength == substance.Length())) {
 		// If whole buffer is being deleted, faster to reinitialise lines data
diff -r -du src/Document.cxx src/Document.cxx
--- src/Document.cxx	2005-08-29 18:09:20.000000000 -0700
+++ src/Document.cxx	2007-05-01 17:00:17.000000000 -0700
@@ -515,6 +515,139 @@
 	}
 }
 
+// Quick-n-dirty position helper.  Implements scimoz.positionAtChar.
+// checkLineEnd (3rd arg) is never used.
+int Document::GetBytePositionForCharOffset(int bytePos, int charOffset,
+					   bool checkLineEnd) {
+	/**
+	 * There's a subtlety in this routine involving Unicode characters that
+	 * are >= 0x10000 : Scintilla has no problem representing these as
+	 * 4 UTF-8 bytes starting with header byte 0b11110xxx (0xf0 - 0xf7),
+	 * and correctly maps this to a single * character.  But both
+	 * JS and Python encode Unicode characters with UCS-2, and these
+	 * characters are mapped to a surrogate pair.  So suppose that char "&"
+	 * is actually Unicode \U0001011E. JS and Python count this character
+	 * as 2 characters.  So when this function finds the UTF-8 for such
+	 * a character, it knows that the UCS-2 parts of Komodo have said
+	 * this character accounts for 2 chars towards a string length,
+	 * and returns the appropriate byte position.
+	 *
+	 * Also, if any of the arguments point to a non-Komodo situation, run
+	 * the old code. This covers cases where we have a non-utf8 code page or
+	 * checkLineEnd is on (and I'm not sure how that can happen.)
+	 */
+	int newPos = bytePos;
+	int charCount;
+	if (checkLineEnd || dbcsCodePage != SC_CP_UTF8) {
+		// Run the old code.
+		int moveDir = charOffset >=0 ? 1 : -1;
+		charCount = charOffset * moveDir;
+		for (int i = 0; i < charCount; ++i) {
+			newPos = MovePositionOutsideChar(newPos + moveDir, moveDir, checkLineEnd);
+		}
+		return newPos;
+	}
+	int docLength = Length();
+	if (newPos < 0) {
+		// Can't access a position in the buffer.
+		// Should we return 0 or just bounce newPos back?
+		return 0;
+	}
+	if (newPos > docLength) {
+		// This doesn't make sense for either direction.
+		return docLength;
+	}
+	charCount = charOffset;
+	// First synchronize on the first char
+	unsigned char ch;
+	if (newPos < docLength && IsTrailByte(ch = static_cast<unsigned char>(cb.CharAt(newPos)))) {
+		// If we're sitting on a non-ascii char, move to
+		// the start of it, and process it in the main loop below.
+		int startUTF8, endUTF8;
+		if (InGoodUTF8(newPos, startUTF8, endUTF8)) {
+			newPos = startUTF8;
+			// If we're moving backwards, land on a 0xfx byte,
+			// don't count this partial character as 2, since we
+			// didn't hop over the whole thing.
+		}
+	}
+	if (charCount <= 0) {
+		// Move backwards looking for utf8 sequences of
+		// 0xf0 0xhh 0xhh 0xhh
+		// where 0xhh starts with 0b10xx xxxx
+		// and treat them like two characters.
+		charCount *= -1;
+		while (charCount > 0 && --newPos >= 0) {
+			ch = static_cast<unsigned char>(cb.CharAt(newPos));
+			if (!IsTrailByte(ch)) {
+				charCount -= 1;
+				if ((ch & 0xf8) == 0xf0) {
+					// We're at the start of a multi-ucs2 char character,
+					// so count it as 2 characters.
+					// Assume any byte matching 0b11110xxx heads a 4-byte
+					// utf-8 sequence.  If not, we should have handled
+					// the non-utf8 code-page code.
+					charCount -= 1;
+				}
+			}
+		}
+		if (newPos < 0) {
+			newPos = 0;
+		}
+		return newPos;
+	}
+	if (newPos == docLength) {
+		// Otherwise we can never access characters past docLength
+		return docLength;
+	}
+	bool inError = false;
+	while (--charCount >= 0) {
+		// Look for non-ascii byte values
+		ch = static_cast<unsigned char>(cb.CharAt(newPos));
+		if (ch < (unsigned char) 0x80) {
+			// \x00 - \x7f
+			newPos += 1;
+		} else if (ch < (unsigned char) 0xc2) {
+			// \x80 - \xbf
+			// \xc0 and \xc1 are error header bytes in
+			// canonical utf8:  0b11000001 10??????
+			// only has 7 bits of information, doesn't happen in scintilla
+			inError = true;
+		} else if (ch < (unsigned char) 0xe0) {
+			// \xc2 - \xdf
+			newPos += 2;
+		} else if (ch < (unsigned char) 0xf0) {
+			// \xe0 - \xef
+			newPos += 3;
+		} else if (ch < (unsigned char) 0xf8) {
+			// \xf0 - \xf7
+			// In UCS-2 we're told that this value occupies 2 chars,
+			// so we need to treat this character like 2 towards CharCount
+			--charCount;
+			newPos += 4;
+		} else {
+			// \xf8 - \xff not expected in scintilla utf8
+			// Error, but we need to advance.
+			inError = true;
+		}
+		if (inError) {
+			inError = false;
+			fprintf(stderr, "Unexpected char at pos %d, cpos %d, char %d",
+				newPos, charOffset - charCount - 1, ch);
+			while (++newPos < docLength) {
+				ch = static_cast<unsigned char>(cb.CharAt(newPos));
+				if (!IsTrailByte(ch)) {
+					break;
+				}
+			}
+		}
+		if (newPos >= docLength) {
+			newPos = docLength;
+			break;
+		}
+	}
+	return newPos;
+}
 // Normalise a position so that it is not halfway through a two byte character.
 // This can occur in two situations -
 // When lines are terminated with \r\n pairs which should be treated as one character.
@@ -1501,7 +1513,7 @@
 	} else if (isspacechar(startChar)) {
 		while (pos < length && isspacechar(cb.CharAt(pos)))
 			++pos;
-	} else {
+	} else if (pos < length) { // ACTIVESTATE
 		++pos;
 	}
 	return pos;
diff -r -du src/Document.h src/Document.h
--- src/Document.h	2005-08-29 18:09:20.000000000 -0700
+++ src/Document.h	2007-05-01 17:00:17.000000000 -0700
@@ -137,8 +137,11 @@
 	int LenChar(int pos);
 	bool InGoodUTF8(int pos, int &start, int &end) const;
 	int MovePositionOutsideChar(int pos, int moveDir, bool checkLineEnd=true);
 
+	// ACTIVESTATE	
+	int GetBytePositionForCharOffset(int bytePos, int charOffset, bool checkLineEnd=true);
+
 	int NextPosition(int pos, int moveDir) const;
 	bool NextCharacter(int &pos, int moveDir);	// Returns true if pos changed
 	int SCI_METHOD CodePage() const;
 	bool SCI_METHOD IsDBCSLeadByte(char ch) const;
diff -r -du src/Editor.cxx src/Editor.cxx
--- src/Editor.cxx	2005-08-29 18:09:20.000000000 -0700
+++ src/Editor.cxx	2007-05-01 17:00:17.000000000 -0700
@@ -806,8 +806,13 @@
 
 /**
  * Asks document to find a good position and then moves out of any invisible positions.
  */
+// ACTIVESTATE
+int Editor::GetBytePositionForCharOffset(int bytePos, int charOffset, bool checkLineEnd) {
+	return pdoc->GetBytePositionForCharOffset(bytePos, charOffset, checkLineEnd);
+}
+
 int Editor::MovePositionOutsideChar(int pos, int moveDir, bool checkLineEnd) const {
 	return MovePositionOutsideChar(SelectionPosition(pos), moveDir, checkLineEnd).Position();
 }
 
@@ -1090,12 +1098,14 @@
 	Point pt = PointMainCaret();
 	if (pt.y < rcClient.top) {
 		MovePositionTo(SPositionFromLocation(
-		            Point(lastXChosen - xOffset, rcClient.top)),
+		            Point(lastXChosen - xOffset, rcClient.top),
+                    false, false, (virtualSpaceOptions & SCVS_USERACCESSIBLE) != 0),
 					Selection::noSel, ensureVisible);
 	} else if ((pt.y + vs.lineHeight - 1) > rcClient.bottom) {
 		int yOfLastLineFullyDisplayed = rcClient.top + (LinesOnScreen() - 1) * vs.lineHeight;
 		MovePositionTo(SPositionFromLocation(
-		            Point(lastXChosen - xOffset, rcClient.top + yOfLastLineFullyDisplayed)),
+		            Point(lastXChosen - xOffset, rcClient.top + yOfLastLineFullyDisplayed),
+                    false, false, (virtualSpaceOptions & SCVS_USERACCESSIBLE) != 0),
 		        Selection::noSel, ensureVisible);
 	}
 }
@@ -5900,12 +5909,20 @@
 	}
 	lastClickTime = curTime;
 	lastXChosen = pt.x + xOffset;
+	lastClick = pt; // ACTIVESTATE need this to make dblclicks work in scimoz
 	ShowCaretAtCurrentPosition();
 }
 
 bool Editor::PositionIsHotspot(int position) {
-	return vs.styles[pdoc->StyleAt(position) & pdoc->stylingBitsMask].hotspot;
+	// return vs.styles[pdoc->StyleAt(position) & pdoc->stylingBitsMask].hotspot;
+	// StyleAt returns _signed_ chars, which don't play well with array indexing
+	// for "large" style numbers like -80 =)
+	// The signature of StyleAt should probably be changed.
+	// Also, styleAt currently doesn't "filter out" indicator bits, which again points
+	// in never-never land.
+	int style = (unsigned char)(pdoc->StyleAt(position)) & pdoc->stylingBitsMask;
+	return vs.styles[style].hotspot;
 }
 
 bool Editor::PointIsHotspot(Point pt) {
 	int pos = PositionFromLocation(pt, true);
@@ -8291,7 +8308,32 @@
 		break;
 
 	case SCI_GETPASTECONVERTENDINGS:
 		return convertPastes ? 1 : 0;
+ 
+	// ACTIVESTATE Komodo-only function.
+	case SCI_POSITIONATCHAR:
+		// The 'false' is to ensure CRLF is treated at _two_ chars
+		// instead of one, as MovePositionOutsideChar (the underlying
+		// function) would otherwise do. (E.g., for the find system
+		// which must treat CRLF as two characters).
+		return pdoc->GetBytePositionForCharOffset(wParam, lParam, false);
+
+	case SCI_POSITIONATCOLUMN:
+		return pdoc->FindColumn(wParam, lParam);
+
+	case SCI_SETDRAGPOSITION:
+		SetDragPosition(SelectionPosition(wParam));
+		break;
+
+	case SCI_GETDRAGPOSITION:
+		return posDrag.Position();
+
+	case SCI_STOPTIMERS: // This patch from stop_timers.patch
+		SetTicking(false);
+		SetIdle(false);
+
+	// END ACTIVESTATE
+
 
 	case SCI_GETCHARACTERPOINTER:
 		return reinterpret_cast<sptr_t>(pdoc->BufferPointer());
diff -r -du src/Editor.h src/Editor.h
--- src/Editor.h	2005-08-29 18:09:20.000000000 -0700
+++ src/Editor.h	2007-05-01 17:00:17.000000000 -0700
@@ -361,7 +361,11 @@
 	void SetEmptySelection(int currentPos_);
 	bool RangeContainsProtected(int start, int end) const;
 	bool SelectionContainsProtected();
+	
+	// ACTIVESTATE
+	int GetBytePositionForCharOffset(int bytePos, int charOffset, bool checkLineEnd=true);
+
 	int MovePositionOutsideChar(int pos, int moveDir, bool checkLineEnd=true) const;
 	SelectionPosition MovePositionOutsideChar(SelectionPosition pos, int moveDir, bool checkLineEnd=true) const;
 	int MovePositionTo(SelectionPosition newPos, Selection::selTypes sel=Selection::noSel, bool ensureVisible=true);
 	int MovePositionTo(int newPos, Selection::selTypes sel=Selection::noSel, bool ensureVisible=true);
diff -r -du src/Catalogue.cxx src/Catalogue.cxx
--- src/Catalogue.cxx	2005-08-29 18:09:20.000000000 -0700
+++ src/Catalogue.cxx	2007-05-01 17:00:17.000000000 -0700
@@ -209,10 +213,9 @@
 	LINK_LEXER(lmSpice);
 	LINK_LEXER(lmSQL);
 	LINK_LEXER(lmTACL);
 	LINK_LEXER(lmTADS3);
 	LINK_LEXER(lmTAL);
-	LINK_LEXER(lmTCL);
 	LINK_LEXER(lmTeX);
 	LINK_LEXER(lmTxt2tags);
 	LINK_LEXER(lmVB);
 	LINK_LEXER(lmVBScript);
@@ -217,6 +220,10 @@
 	LINK_LEXER(lmVHDL);
 	LINK_LEXER(lmXML);
 	LINK_LEXER(lmYAML);
+	LINK_LEXER(lmUDL);
+	LINK_LEXER(lmXSLT);
+	LINK_LEXER(lmTcl);
+	LINK_LEXER(lmCoffeeScript);
 
 //--Autogenerated -- end of automatically generated section
 
diff -r -du src/LineMarker.cxx src/LineMarker.cxx
--- src/LineMarker.cxx	2005-08-29 18:09:20.000000000 -0700
+++ src/LineMarker.cxx	2007-05-01 17:00:17.000000000 -0700
@@ -267,8 +267,12 @@
 		int width = surface->WidthText(fontForCharacter, character, 1);
 		rc.left += (rc.Width() - width) / 2;
 		rc.right = rc.left + width;
-		surface->DrawTextClipped(rc, fontForCharacter, rc.bottom - 2,
-			character, 1, fore.allocated, back.allocated);
+		// ACTIVESTATE Komodo use transparent background for margin symbols, and more
+		// buffer under character.
+		// XXX unfortunately, spacing at the bottom doesn't work well for all font
+		// sizes, some kind of more complex font size calculation needs to happen
+		surface->DrawTextTransparent(rc, fontForCharacter, rc.bottom - 4,
+			character, 1, fore.allocated);
 
 	} else if (markType == SC_MARK_DOTDOTDOT) {
 		int right = centreX - 6;
diff -r -du src/ScintillaBase.cxx src/ScintillaBase.cxx
--- src/ScintillaBase.cxx	2005-08-29 18:09:20.000000000 -0700
+++ src/ScintillaBase.cxx	2007-05-01 17:00:17.000000000 -0700
@@ -85,6 +85,14 @@
 	}
 }
 
+// XXX ActiveState bug 33804
+void ScintillaBase::PasteRectangular(int pos, const char *ptr, int len) {
+	if (ac.Active()) {
+		ac.Cancel();
+	}
+	Editor::PasteRectangular(SelectionPosition(pos), ptr, len);
+}
+
 void ScintillaBase::Command(int cmdId) {
 
 	switch (cmdId) {
@@ -180,16 +188,34 @@
 		    (iMessage != SCI_CHARRIGHT) &&
 		    (iMessage != SCI_CHARRIGHTEXTEND) &&
 		    (iMessage != SCI_EDITTOGGLEOVERTYPE) &&
 		    (iMessage != SCI_DELETEBACK) &&
-		    (iMessage != SCI_DELETEBACKNOTLINE)
+		    (iMessage != SCI_DELETEBACKNOTLINE) &&
+		    // ACTIVESTATE start
+		    (iMessage != SCI_NEWLINE) &&
+		    (iMessage != SCI_LINEDOWN) &&
+		    (iMessage != SCI_LINEUP) &&
+		    (iMessage != SCI_VCHOME) &&
+		    (iMessage != SCI_WORDLEFT) &&
+		    (iMessage != SCI_WORDLEFTEXTEND) &&
+		    (iMessage != SCI_WORDRIGHT) &&
+		    (iMessage != SCI_WORDRIGHTEXTEND) &&
+		    (iMessage != SCI_LINEEND)
+		    // ACTIVESTATE end
 		) {
 			ct.CallTipCancel();
 		}
+		//XXX Komodo change: Scintilla's CallTip::posStartCallTip
+		//    gets improperly set to the currentPos when
+		//    SCI_CALLTIPSHOW is called, rather than the actual
+		//    position it is told to show at. The result is that
+		//    this block can cancel the calltip at the wrong pos.
+		/*
 		if ((iMessage == SCI_DELETEBACK) || (iMessage == SCI_DELETEBACKNOTLINE)) {
 			if (sel.MainCaret() <= ct.posStartCallTip) {
 				ct.CallTipCancel();
 			}
 		}
+		*/
 	}
 	return Editor::KeyCommand(iMessage);
 }
diff -r -du src/ScintillaBase.h src/ScintillaBase.h
--- src/ScintillaBase.h	2005-08-29 18:09:20.000000000 -0700
+++ src/ScintillaBase.h	2007-05-01 17:00:17.000000000 -0700
@@ -61,6 +61,9 @@
 	virtual ~ScintillaBase();
 	virtual void Initialise() = 0;
 	virtual void Finalise() = 0;
+	
+	// XXX ActiveState bug 33804
+	void PasteRectangular(int pos, const char *ptr, int len);
 
 	virtual void RefreshColourPalette(Palette &pal, bool want);
 
