--- lexers/LexCPP.cxx	2011-01-03 12:22:32.000000000 -0800
+++ lexers/LexCPP.cxx	2011-07-08 11:11:54.000000000 -0700
@@ -39,6 +39,13 @@
 using namespace Scintilla;
 #endif
 
+// KOMODO  see if a style is one of our IO styles
+static inline bool IsIOStyle(int style) {
+	return style == SCE_C_STDIN ||
+		style == SCE_C_STDOUT ||
+		style == SCE_C_STDERR;
+}
+
 static bool IsSpaceEquiv(int state) {
 	return (state <= SCE_C_COMMENTDOC) ||
 		// including SCE_C_DEFAULT, SCE_C_COMMENT, SCE_C_COMMENTLINE
@@ -64,6 +71,85 @@
 	return false;
 }
 
+// Helpers for startsJavaScriptLambdaBody
+static void sjslb_skipCommentsAndWhiteSpace(int &pos, LexAccessor &styler) {
+	int style;
+	for (; pos > 0; --pos) {
+		if (styler.StyleAt(pos) > SCE_C_COMMENTDOC) {
+			break;
+		}
+	}
+}
+
+static bool sjslb_matchStyledChar(int targetStyle, char targetChar, int &pos, LexAccessor &styler) {
+	if (pos < 0) return false;
+	if ((styler.StyleAt(pos) != targetStyle)
+	    || (styler.SafeGetCharAt(pos) != targetChar)) {
+		return false;
+	}
+	--pos; // Consume the char.
+	return true;
+}
+
+static bool sjslb_matchIdentifier(int &pos, LexAccessor &styler) {
+	int startPos;
+	for (startPos = pos; pos >= 0; --pos) {
+		if (styler.StyleAt(pos) != SCE_C_IDENTIFIER) {
+			break;
+		}
+	}
+	return pos < startPos;
+}
+
+static bool sjslb_matchKeyword(const char *kwd, int &pos, LexAccessor &styler) {
+	int startPos, targetLen = strlen(kwd), style;
+	const char *p_src = &kwd[targetLen - 1];
+	for (startPos = pos; pos >= 0 && p_src >= kwd; --pos, --p_src) {
+		if (styler.SafeGetCharAt(pos) != *p_src
+		    || styler.StyleAt(pos) != SCE_C_WORD) {
+			return false;
+		}
+	}
+	return (p_src == kwd - 1 && (pos == -1 || styler.StyleAt(pos) != SCE_C_WORD));
+	// lambda's can't occur at the very start of a file.
+}
+
+/*** startsJavaScriptLambdaBody()
+ * Look for lambda expressions like
+ *
+ * function optName (name {, name}* ) <|>
+ *
+ * where we can have comments and white-space before each char
+ *
+ * So the grammar to match walking backwards is:
+ *
+ * )-op {name {,-op name}*}? (-op name? function-WORD
+ *
+ * where each term can be preceded by white-space and comments.
+ */
+static bool startsJavaScriptLambdaBody(StyleContext &sc, LexAccessor &styler) {
+	int pos = (int) sc.currentPos - 1;
+	styler.Flush();
+	sjslb_skipCommentsAndWhiteSpace(pos, styler);
+	if (!sjslb_matchStyledChar(SCE_C_OPERATOR, ')', pos, styler)) return false;
+	sjslb_skipCommentsAndWhiteSpace(pos, styler);
+	// Allow for (name); (name1, name2,..., nameN); ()
+	if (sjslb_matchIdentifier(pos, styler)) {
+		while (pos > 7) {
+			sjslb_skipCommentsAndWhiteSpace(pos, styler);
+			if (!sjslb_matchStyledChar(SCE_C_OPERATOR, ',', pos, styler)) break;
+			sjslb_skipCommentsAndWhiteSpace(pos, styler);
+			if (!sjslb_matchIdentifier(pos, styler)) return false;
+		}
+	}
+	sjslb_skipCommentsAndWhiteSpace(pos, styler);
+	if (!sjslb_matchStyledChar(SCE_C_OPERATOR, '(', pos, styler)) return false;
+	sjslb_skipCommentsAndWhiteSpace(pos, styler);
+	sjslb_matchIdentifier(pos, styler); // Allow an optional name
+	sjslb_skipCommentsAndWhiteSpace(pos, styler);
+	return sjslb_matchKeyword("function", pos, styler);
+}
+
 static bool followsReturnKeyword(StyleContext &sc, LexAccessor &styler) {
 	// Don't look at styles, so no need to flush.
 	int pos = (int) sc.currentPos;
@@ -519,10 +605,14 @@
 	for (; sc.More(); sc.Forward()) {
 
 		if (sc.atLineStart) {
-			if ((sc.state == SCE_C_STRING) || (sc.state == SCE_C_CHARACTER)) {
+			int lineStartState = sc.state;
+			if (lineStartState == SCE_C_STRING
+			    || lineStartState == SCE_C_CHARACTER) {
 				// Prevent SCE_C_STRINGEOL from leaking back to previous line which
 				// ends with a line continuation by locking in the state upto this position.
-				sc.SetState(sc.state);
+				sc.SetState(lineStartState);
+			} else if (IsIOStyle(sc.state)) {
+				sc.SetState(SCE_C_DEFAULT);
 			}
 			// Reset states to begining of colourise so no surprises
 			// if different sets of lines lexed.
@@ -576,7 +666,7 @@
 				}
 				break;
 			case SCE_C_IDENTIFIER:
-				if (!setWord.Contains(sc.ch) || (sc.ch == '.')) {
+				if (!setWord.Contains(sc.ch) || (sc.ch == '.') || (sc.ch == '$')) {
 					char s[1000];
 					if (caseSensitive) {
 						sc.GetCurrent(s, sizeof(s));
@@ -775,7 +865,7 @@
 				} else {
 					sc.SetState(SCE_C_NUMBER|activitySet);
 				}
-			} else if (setWordStart.Contains(sc.ch) || (sc.ch == '@')) {
+			} else if (setWordStart.Contains(sc.ch) || (sc.ch == '@') || (sc.ch == '$')) {
 				if (lastWordWasUUID) {
 					sc.SetState(SCE_C_UUID|activitySet);
 					lastWordWasUUID = false;
@@ -790,16 +880,18 @@
 				}
 				sc.Forward();	// Eat the * so it isn't used for the end of the comment
 			} else if (sc.Match('/', '/')) {
+				// In JS "//" always starts a comment, and is never the empty regex
 				if ((sc.Match("///") && !sc.Match("////")) || sc.Match("//!"))
 					// Support of Qt/Doxygen doc. style
 					sc.SetState(SCE_C_COMMENTLINEDOC|activitySet);
 				else
 					sc.SetState(SCE_C_COMMENTLINE|activitySet);
 			} else if (sc.ch == '/'
-				   && (setOKBeforeRE.Contains(chPrevNonWhite)
-				       || followsReturnKeyword(sc, styler))
-				   && (!setCouldBePostOp.Contains(chPrevNonWhite)
-				       || !FollowsPostfixOperator(sc, styler))) {
+				   && (((setOKBeforeRE.Contains(chPrevNonWhite)
+					 || followsReturnKeyword(sc, styler))
+					&& (!setCouldBePostOp.Contains(chPrevNonWhite)
+					    || !FollowsPostfixOperator(sc, styler)))
+				       || startsJavaScriptLambdaBody(sc, styler))) {
 				sc.SetState(SCE_C_REGEX|activitySet);	// JavaScript's RegEx
 			} else if (sc.ch == '\"') {
 				if (sc.chPrev == 'R') {
@@ -992,8 +1084,12 @@
 					levelMinCurrent = levelNext;
 				}
 				levelNext++;
-			} else if (ch == '}') {
-				levelNext--;
+			} else if (ch == '[') {
+				levelNext++;
+			} else if (ch == '}' || ch == ']') {
+				if ((levelNext & (SC_FOLDLEVELNUMBERMASK & ~SC_FOLDLEVELBASE)) > 0) {
+					levelNext--;
+				}
 			}
 		}
 		if (!IsASpace(ch))
